//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 19 colors.
  struct color {
    /// Color `Black`.
    static let black = Rswift.ColorResource(bundle: R.hostingBundle, name: "Black")
    /// Color `CCError`.
    static let ccError = Rswift.ColorResource(bundle: R.hostingBundle, name: "CCError")
    /// Color `Error5`.
    static let error5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Error5")
    /// Color `ForcedInformationImage`.
    static let forcedInformationImage = Rswift.ColorResource(bundle: R.hostingBundle, name: "ForcedInformationImage")
    /// Color `Grey1`.
    static let grey1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey1")
    /// Color `Grey2`.
    static let grey2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey2")
    /// Color `Grey3`.
    static let grey3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey3")
    /// Color `Grey4`.
    static let grey4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey4")
    /// Color `Grey5`.
    static let grey5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey5")
    /// Color `LightBackground`.
    static let lightBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightBackground")
    /// Color `PrimaryBlue10`.
    static let primaryBlue10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryBlue10")
    /// Color `PrimaryBlue5`.
    static let primaryBlue5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryBlue5")
    /// Color `PrimaryBlue`.
    static let primaryBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryBlue")
    /// Color `PrimaryText`.
    static let primaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryText")
    /// Color `ScannerRed`.
    static let scannerRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ScannerRed")
    /// Color `SecondaryGreen`.
    static let secondaryGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryGreen")
    /// Color `SecondaryText`.
    static let secondaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryText")
    /// Color `Shadow`.
    static let shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Shadow")
    /// Color `White`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "White")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CCError", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ccError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ccError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Error5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func error5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.error5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ForcedInformationImage", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func forcedInformationImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.forcedInformationImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryBlue10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBlue10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBlue10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryBlue5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBlue5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBlue5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ScannerRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func scannerRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.scannerRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CCError", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ccError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ccError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Error5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func error5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.error5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ForcedInformationImage", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func forcedInformationImage(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.forcedInformationImage.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryBlue10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryBlue10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryBlue10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryBlue5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryBlue5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryBlue5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ScannerRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func scannerRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.scannerRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 39 images.
  struct image {
    /// Image `BackArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
    /// Image `BannerCross`.
    static let bannerCross = Rswift.ImageResource(bundle: R.hostingBundle, name: "BannerCross")
    /// Image `Clockwarning_icon`.
    static let clockwarning_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clockwarning_icon")
    /// Image `Cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cross")
    /// Image `DeeplinkScan`.
    static let deeplinkScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "DeeplinkScan")
    /// Image `Disclosure`.
    static let disclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "Disclosure")
    /// Image `DiskFull`.
    static let diskFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "DiskFull")
    /// Image `EndOfLife`.
    static let endOfLife = Rswift.ImageResource(bundle: R.hostingBundle, name: "EndOfLife")
    /// Image `Error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "Error")
    /// Image `Expired`.
    static let expired = Rswift.ImageResource(bundle: R.hostingBundle, name: "Expired")
    /// Image `Eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "Eye")
    /// Image `FuzzyOnboardingPage1`.
    static let fuzzyOnboardingPage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "FuzzyOnboardingPage1")
    /// Image `FuzzyOnboardingPage2`.
    static let fuzzyOnboardingPage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "FuzzyOnboardingPage2")
    /// Image `FuzzyOnboardingPage3`.
    static let fuzzyOnboardingPage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "FuzzyOnboardingPage3")
    /// Image `Hamburger`.
    static let hamburger = Rswift.ImageResource(bundle: R.hostingBundle, name: "Hamburger")
    /// Image `Health`.
    static let health = Rswift.ImageResource(bundle: R.hostingBundle, name: "Health")
    /// Image `HolderAppLaunchIcon`.
    static let holderAppLaunchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "HolderAppLaunchIcon")
    /// Image `NoInternet`.
    static let noInternet = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoInternet")
    /// Image `PageIndicatorBack`.
    static let pageIndicatorBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "PageIndicatorBack")
    /// Image `PageIndicatorNext`.
    static let pageIndicatorNext = Rswift.ImageResource(bundle: R.hostingBundle, name: "PageIndicatorNext")
    /// Image `Plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus")
    /// Image `QuestionMark`.
    static let questionMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuestionMark")
    /// Image `ScannableQRs`.
    static let scannableQRs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScannableQRs")
    /// Image `Torch`.
    static let torch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Torch")
    /// Image `UpdateRequired`.
    static let updateRequired = Rswift.ImageResource(bundle: R.hostingBundle, name: "UpdateRequired")
    /// Image `VerifierAppLaunchIcon`.
    static let verifierAppLaunchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "VerifierAppLaunchIcon")
    /// Image `access`.
    static let access = Rswift.ImageResource(bundle: R.hostingBundle, name: "access")
    /// Image `denied`.
    static let denied = Rswift.ImageResource(bundle: R.hostingBundle, name: "denied")
    /// Image `digid`.
    static let digid = Rswift.ImageResource(bundle: R.hostingBundle, name: "digid")
    /// Image `icon_menu_aboutthisapp`.
    static let icon_menu_aboutthisapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_aboutthisapp")
    /// Image `icon_menu_add`.
    static let icon_menu_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_add")
    /// Image `icon_menu_addpapercertificate`.
    static let icon_menu_addpapercertificate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_addpapercertificate")
    /// Image `icon_menu_addvisitorpass`.
    static let icon_menu_addvisitorpass = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_addvisitorpass")
    /// Image `icon_menu_faq`.
    static let icon_menu_faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_faq")
    /// Image `icon_menu_hamburger`.
    static let icon_menu_hamburger = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_hamburger")
    /// Image `icon_menu_howitworks`.
    static let icon_menu_howitworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_howitworks")
    /// Image `icon_menu_risklevel`.
    static let icon_menu_risklevel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_risklevel")
    /// Image `icon_menu_storeddata`.
    static let icon_menu_storeddata = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_menu_storeddata")
    /// Image `menuChevron`.
    static let menuChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuChevron")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BannerCross", bundle: ..., traitCollection: ...)`
    static func bannerCross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bannerCross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Clockwarning_icon", bundle: ..., traitCollection: ...)`
    static func clockwarning_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockwarning_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DeeplinkScan", bundle: ..., traitCollection: ...)`
    static func deeplinkScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deeplinkScan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Disclosure", bundle: ..., traitCollection: ...)`
    static func disclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disclosure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DiskFull", bundle: ..., traitCollection: ...)`
    static func diskFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diskFull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EndOfLife", bundle: ..., traitCollection: ...)`
    static func endOfLife(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.endOfLife, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Expired", bundle: ..., traitCollection: ...)`
    static func expired(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.expired, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FuzzyOnboardingPage1", bundle: ..., traitCollection: ...)`
    static func fuzzyOnboardingPage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fuzzyOnboardingPage1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FuzzyOnboardingPage2", bundle: ..., traitCollection: ...)`
    static func fuzzyOnboardingPage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fuzzyOnboardingPage2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FuzzyOnboardingPage3", bundle: ..., traitCollection: ...)`
    static func fuzzyOnboardingPage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fuzzyOnboardingPage3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Hamburger", bundle: ..., traitCollection: ...)`
    static func hamburger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hamburger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Health", bundle: ..., traitCollection: ...)`
    static func health(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HolderAppLaunchIcon", bundle: ..., traitCollection: ...)`
    static func holderAppLaunchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.holderAppLaunchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NoInternet", bundle: ..., traitCollection: ...)`
    static func noInternet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noInternet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PageIndicatorBack", bundle: ..., traitCollection: ...)`
    static func pageIndicatorBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pageIndicatorBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PageIndicatorNext", bundle: ..., traitCollection: ...)`
    static func pageIndicatorNext(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pageIndicatorNext, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "QuestionMark", bundle: ..., traitCollection: ...)`
    static func questionMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.questionMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScannableQRs", bundle: ..., traitCollection: ...)`
    static func scannableQRs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scannableQRs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Torch", bundle: ..., traitCollection: ...)`
    static func torch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.torch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UpdateRequired", bundle: ..., traitCollection: ...)`
    static func updateRequired(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.updateRequired, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "VerifierAppLaunchIcon", bundle: ..., traitCollection: ...)`
    static func verifierAppLaunchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verifierAppLaunchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "access", bundle: ..., traitCollection: ...)`
    static func access(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.access, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "denied", bundle: ..., traitCollection: ...)`
    static func denied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.denied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "digid", bundle: ..., traitCollection: ...)`
    static func digid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.digid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_aboutthisapp", bundle: ..., traitCollection: ...)`
    static func icon_menu_aboutthisapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_aboutthisapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_add", bundle: ..., traitCollection: ...)`
    static func icon_menu_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_addpapercertificate", bundle: ..., traitCollection: ...)`
    static func icon_menu_addpapercertificate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_addpapercertificate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_addvisitorpass", bundle: ..., traitCollection: ...)`
    static func icon_menu_addvisitorpass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_addvisitorpass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_faq", bundle: ..., traitCollection: ...)`
    static func icon_menu_faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_hamburger", bundle: ..., traitCollection: ...)`
    static func icon_menu_hamburger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_hamburger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_howitworks", bundle: ..., traitCollection: ...)`
    static func icon_menu_howitworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_howitworks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_risklevel", bundle: ..., traitCollection: ...)`
    static func icon_menu_risklevel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_risklevel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_menu_storeddata", bundle: ..., traitCollection: ...)`
    static func icon_menu_storeddata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_menu_storeddata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuChevron", bundle: ..., traitCollection: ...)`
    static func menuChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuChevron, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.dashboard` struct is generated, and contains static references to 6 images.
    struct dashboard {
      /// Image `Domestic`.
      static let domestic = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/Domestic")
      /// Image `Error`.
      static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/Error")
      /// Image `ExpiredQR`.
      static let expiredQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/ExpiredQR")
      /// Image `International`.
      static let international = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/International")
      /// Image `MyQR`.
      static let myQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/MyQR")
      /// Image `RedScreenSmall`.
      static let redScreenSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dashboard/RedScreenSmall")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Domestic", bundle: ..., traitCollection: ...)`
      static func domestic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.domestic, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Error", bundle: ..., traitCollection: ...)`
      static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.error, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ExpiredQR", bundle: ..., traitCollection: ...)`
      static func expiredQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.expiredQR, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "International", bundle: ..., traitCollection: ...)`
      static func international(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.international, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "MyQR", bundle: ..., traitCollection: ...)`
      static func myQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.myQR, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "RedScreenSmall", bundle: ..., traitCollection: ...)`
      static func redScreenSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.dashboard.redScreenSmall, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.disclosurePolicy` struct is generated, and contains static references to 2 images.
    struct disclosurePolicy {
      /// Image `DutchAndInternationalQRCards`.
      static let dutchAndInternationalQRCards = Rswift.ImageResource(bundle: R.hostingBundle, name: "DisclosurePolicy/DutchAndInternationalQRCards")
      /// Image `NewInTheApp`.
      static let newInTheApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "DisclosurePolicy/NewInTheApp")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DutchAndInternationalQRCards", bundle: ..., traitCollection: ...)`
      static func dutchAndInternationalQRCards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.disclosurePolicy.dutchAndInternationalQRCards, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "NewInTheApp", bundle: ..., traitCollection: ...)`
      static func newInTheApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.disclosurePolicy.newInTheApp, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.launch` struct is generated, and contains static references to 3 images.
    struct launch {
      /// Image `HolderAppIcon`.
      static let holderAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch/HolderAppIcon")
      /// Image `VerifierAppIcon`.
      static let verifierAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch/VerifierAppIcon")
      /// Image `ribbonvws`.
      static let ribbonvws = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch/ribbonvws")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "HolderAppIcon", bundle: ..., traitCollection: ...)`
      static func holderAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.launch.holderAppIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "VerifierAppIcon", bundle: ..., traitCollection: ...)`
      static func verifierAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.launch.verifierAppIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ribbonvws", bundle: ..., traitCollection: ...)`
      static func ribbonvws(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.launch.ribbonvws, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.newInTheApp` struct is generated, and contains static references to 1 images.
    struct newInTheApp {
      /// Image `paperDCC`.
      static let paperDCC = Rswift.ImageResource(bundle: R.hostingBundle, name: "NewInTheApp/paperDCC")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "paperDCC", bundle: ..., traitCollection: ...)`
      static func paperDCC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.newInTheApp.paperDCC, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.onboarding` struct is generated, and contains static references to 10 images.
    struct onboarding {
      /// Image `DisclosurePolicy`.
      static let disclosurePolicy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/DisclosurePolicy")
      /// Image `International`.
      static let international = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/International")
      /// Image `PrivacyItem`.
      static let privacyItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/PrivacyItem")
      /// Image `Rijkslint`.
      static let rijkslint = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/Rijkslint")
      /// Image `Safely`.
      static let safely = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/Safely")
      /// Image `TabbarEN`.
      static let tabbarEN = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/TabbarEN")
      /// Image `TabbarNL`.
      static let tabbarNL = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/TabbarNL")
      /// Image `Validity`.
      static let validity = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/Validity")
      /// Image `YourQR`.
      static let yourQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/YourQR")
      /// Image `ZeroGInternational`.
      static let zeroGInternational = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding/ZeroGInternational")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "DisclosurePolicy", bundle: ..., traitCollection: ...)`
      static func disclosurePolicy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.disclosurePolicy, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "International", bundle: ..., traitCollection: ...)`
      static func international(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.international, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "PrivacyItem", bundle: ..., traitCollection: ...)`
      static func privacyItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.privacyItem, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Rijkslint", bundle: ..., traitCollection: ...)`
      static func rijkslint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.rijkslint, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Safely", bundle: ..., traitCollection: ...)`
      static func safely(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.safely, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "TabbarEN", bundle: ..., traitCollection: ...)`
      static func tabbarEN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.tabbarEN, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "TabbarNL", bundle: ..., traitCollection: ...)`
      static func tabbarNL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.tabbarNL, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Validity", bundle: ..., traitCollection: ...)`
      static func validity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.validity, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "YourQR", bundle: ..., traitCollection: ...)`
      static func yourQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.yourQR, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ZeroGInternational", bundle: ..., traitCollection: ...)`
      static func zeroGInternational(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.onboarding.zeroGInternational, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.radioButton24` struct is generated, and contains static references to 3 images.
    struct radioButton24 {
      /// Image `Error`.
      static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "RadioButton24/Error")
      /// Image `Normal`.
      static let normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "RadioButton24/Normal")
      /// Image `Selected`.
      static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "RadioButton24/Selected")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Error", bundle: ..., traitCollection: ...)`
      static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.radioButton24.error, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Normal", bundle: ..., traitCollection: ...)`
      static func normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.radioButton24.normal, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Selected", bundle: ..., traitCollection: ...)`
      static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.radioButton24.selected, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.radioButton` struct is generated, and contains static references to 2 images.
    struct radioButton {
      /// Image `Normal`.
      static let normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "RadioButton/Normal")
      /// Image `Selected`.
      static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "RadioButton/Selected")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Normal", bundle: ..., traitCollection: ...)`
      static func normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.radioButton.normal, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Selected", bundle: ..., traitCollection: ...)`
      static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.radioButton.selected, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.scanner` struct is generated, and contains static references to 3 images.
    struct scanner {
      /// Image `RiskEllipse`.
      static let riskEllipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Scanner/RiskEllipse")
      /// Image `ScanStart1GPolicy`.
      static let scanStart1GPolicy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Scanner/ScanStart1GPolicy")
      /// Image `ScanStart3GPolicy`.
      static let scanStart3GPolicy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Scanner/ScanStart3GPolicy")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "RiskEllipse", bundle: ..., traitCollection: ...)`
      static func riskEllipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.scanner.riskEllipse, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ScanStart1GPolicy", bundle: ..., traitCollection: ...)`
      static func scanStart1GPolicy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.scanner.scanStart1GPolicy, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "ScanStart3GPolicy", bundle: ..., traitCollection: ...)`
      static func scanStart3GPolicy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.scanner.scanStart3GPolicy, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.toggle` struct is generated, and contains static references to 3 images.
    struct toggle {
      /// Image `Error`.
      static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "Toggle/Error")
      /// Image `Normal`.
      static let normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "Toggle/Normal")
      /// Image `Selected`.
      static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Toggle/Selected")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Error", bundle: ..., traitCollection: ...)`
      static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.toggle.error, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Normal", bundle: ..., traitCollection: ...)`
      static func normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.toggle.normal, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "Selected", bundle: ..., traitCollection: ...)`
      static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.toggle.selected, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// nl translation: 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport
      ///
      /// Locales: en, nl
      static let nsHumanReadableCopyright = Rswift.StringResource(key: "NSHumanReadableCopyright", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app will toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// nl translation: 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport
      ///
      /// Locales: en, nl
      static func nsHumanReadableCopyright(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSHumanReadableCopyright", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSHumanReadableCopyright"
        }

        return NSLocalizedString("NSHumanReadableCopyright", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// nl translation: De app will toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreenHolder` struct is generated, and contains static references to 1 localization keys.
    struct launchScreenHolder {
      /// en translation: CoronaCheck
      ///
      /// Locales: en
      static let lRDEwIO3Text = Rswift.StringResource(key: "lRD-Ew-iO3.text", tableName: "LaunchScreenHolder", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: CoronaCheck
      ///
      /// Locales: en
      static func lRDEwIO3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lRD-Ew-iO3.text", tableName: "LaunchScreenHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreenHolder", preferredLanguages: preferredLanguages) else {
          return "lRD-Ew-iO3.text"
        }

        return NSLocalizedString("lRD-Ew-iO3.text", tableName: "LaunchScreenHolder", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreenVerifier` struct is generated, and contains static references to 1 localization keys.
    struct launchScreenVerifier {
      /// en translation: CoronaCheck Scanner
      ///
      /// Locales: en
      static let gpo5PgTText = Rswift.StringResource(key: "8GP-o5-PgT.text", tableName: "LaunchScreenVerifier", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: CoronaCheck Scanner
      ///
      /// Locales: en
      static func gpo5PgTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8GP-o5-PgT.text", tableName: "LaunchScreenVerifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreenVerifier", preferredLanguages: preferredLanguages) else {
          return "8GP-o5-PgT.text"
        }

        return NSLocalizedString("8GP-o5-PgT.text", tableName: "LaunchScreenVerifier", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 984 localization keys.
    struct localizable {
      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static let general_testresults = Rswift.StringResource(key: "general_testresults", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static let general_vaccinationAssessments = Rswift.StringResource(key: "general_vaccinationAssessments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static let general_vaccinations = Rswift.StringResource(key: "general_vaccinations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %1$li tot %2$li bewijzen gescand
      ///
      /// Locales: en, nl
      static let scan_log_list_entry = Rswift.StringResource(key: "scan_log_list_entry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@ van %@
      ///
      /// Locales: en, nl
      static let holderVaccinationAboutOff = Rswift.StringResource(key: "holder.vaccination.about.off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@ van %@.
      ///
      /// Locales: en, nl
      static let generalListAccessibility = Rswift.StringResource(key: "general.list.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@-controle klaar
      ///
      /// Locales: en, nl
      static let verifier_result_access_title_policy = Rswift.StringResource(key: "verifier_result_access_title_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@-toegang
      ///
      /// Locales: en, nl
      static let verifier_risksetting_title = Rswift.StringResource(key: "verifier_risksetting_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@-toegang
      ///
      /// Locales: en, nl
      static let verifier_scanner_policy_indication = Rswift.StringResource(key: "verifier_scanner_policy_indication", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: %@-toegang ingesteld
      ///
      /// Locales: en, nl
      static let verifier_risksetting_changeselection = Rswift.StringResource(key: "verifier_risksetting_changeselection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 's middags
      ///
      /// Locales: en, nl
      static let holderDashboardQrPm = Rswift.StringResource(key: "holder.dashboard.qr.pm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 's morgens
      ///
      /// Locales: en, nl
      static let holderDashboardQrAm = Rswift.StringResource(key: "holder.dashboard.qr.am", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: (Papieren) bewijs toevoegen
      ///
      /// Locales: en, nl
      static let holder_menu_paperproof_subTitle = Rswift.StringResource(key: "holder_menu_paperproof_subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryDateinformation = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.dateinformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestDateinformation = Rswift.StringResource(key: "holder.showqr.eu.about.test.dateinformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationDateinformation = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.dateinformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 1G
      ///
      /// Locales: en, nl
      static let holder_dashboard_domesticQRCard_1G_label = Rswift.StringResource(key: "holder_dashboard_domesticQRCard_1G_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 1G- of 3G-toegang
      ///
      /// Locales: en, nl
      static let new_in_app_risksetting_title = Rswift.StringResource(key: "new_in_app_risksetting_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 1G-toegang
      ///
      /// Locales: en, nl
      static let holder_showQR_domestic_title_1g = Rswift.StringResource(key: "holder_showQR_domestic_title_1g", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 1G-toegang
      ///
      /// Locales: en, nl
      static let new_policy_1G_title = Rswift.StringResource(key: "new_policy_1G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 3G
      ///
      /// Locales: en, nl
      static let holder_dashboard_domesticQRCard_3G_label = Rswift.StringResource(key: "holder_dashboard_domesticQRCard_3G_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 3G-toegang
      ///
      /// Locales: en, nl
      static let holder_showQR_domestic_title_3g = Rswift.StringResource(key: "holder_showQR_domestic_title_3g", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 3G-toegang in Nederland
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only3G_title = Rswift.StringResource(key: "holder_newintheapp_content_only3G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: 3G-toegang in Nederland
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_only3GAccess_title = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_only3GAccess_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <a href="https://coronacheck.nl/nl/dosis">Lees meer over de dosis</a>
      ///
      /// Locales: en, nl
      static let holder_showqr_eu_about_vaccination_dosage_message = Rswift.StringResource(key: "holder_showqr_eu_about_vaccination_dosage_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <a href="https://coronacheck.nl/nl/faq-in-app">Lees hier</a> welke informatie in de QR-code staat.
      ///
      /// Locales: en, nl
      static let holderBannerNewqrMessage = Rswift.StringResource(key: "holder.banner.newqr.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <b>%@</b>-toegang ingesteld
      ///
      /// Locales: en, nl
      static let verifier_start_scan_qr_policy_indication = Rswift.StringResource(key: "verifier_start_scan_qr_policy_indication", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <b>Dit is veranderd</b><ul><li>Beschrijving van gebruiksregels</li><li>Uitleg over gebruik van de app</li><li>Toestemming voor gebruik camera</li></ul>
      ///
      /// Locales: en, nl
      static let newTermsHighlights = Rswift.StringResource(key: "new.terms.highlights", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <b>Dit kun je doen:</b>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageTwo = Rswift.StringResource(key: "verifier.denied.message.two", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Blijft het scherm rood?</b></p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageFour = Rswift.StringResource(key: "verifier.denied.message.four", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Heb je corona gehad?</b><br />Dan heb je soms een prik minder nodig om volledig gevaccineerd te zijn. Haal ook je oudste positieve testuitslag op om die mogelijk mee te laten tellen in je vaccinatiebewijs.</p>
      ///
      /// Locales: en, nl
      static let holder_addVaccination_alsoCollectPositiveTestResults_message = Rswift.StringResource(key: "holder_addVaccination_alsoCollectPositiveTestResults_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Check in het land waar je getest of gevaccineerd bent hoe je jouw gegevens kunt aanpassen.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_foreignDCC_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_foreignDCC_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holderDccRecoveryFooter = Rswift.StringResource(key: "holder.dcc.recovery.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holderDccTestFooter = Rswift.StringResource(key: "holder.dcc.test.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holderDccVaccinationFooter = Rswift.StringResource(key: "holder.dcc.vaccination.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Let op:</b> Als je tijdens het scannen wisselt van scan-instelling moet je %li minuten wachten voordat je weer kunt scannen.</p>
      ///
      /// Locales: en, nl
      static let verifier_risksetting_active_lock_warning_header = Rswift.StringResource(key: "verifier_risksetting_active_lock_warning_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Let op:</b> zonder groen scherm met vinkje mag de bezoeker niet toegelaten worden.</p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageSix = Rswift.StringResource(key: "verifier.denied.message.six", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p><b>Let op:</b> zonder scherm met vinkje mag de bezoeker niet toegelaten worden.</p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageSix_1G = Rswift.StringResource(key: "verifier.denied.message.six_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Alleen vaccinatie- en testgegevens die bij de naam horen die je hebt gekozen zijn bewaard (<b>%@</b>).</p><p>De onderstaande gegevens zijn verwijderd uit de app:</p>%@<p>Wil je vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad. Voeg ze daarna zelf opnieuw toe aan de app.</p>
      ///
      /// Locales: en, nl
      static let holder_identityRemoved_moreinfo_body = Rswift.StringResource(key: "holder_identityRemoved_moreinfo_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Als de QR-code van je vaccinatie verborgen is, dan heb je deze waarschijnlijk niet nodig. Dit komt omdat je ook QR-codes van nieuwere vaccinaties in de app hebt staan.</p><p>Verborgen QR-codes kun je gewoon nog laten zien en gebruiken als dat nodig is.</p>
      ///
      /// Locales: en, nl
      static let holder_qr_code_hidden_explanation_description = Rswift.StringResource(key: "holder_qr_code_hidden_explanation_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Als je QR-code is verlopen betekent dit dat je vaccinatie nog geldig is, maar het bewijs dat je hebt toegevoegd niet meer. Je kunt een nieuw bewijs met QR-code aanvragen en deze opnieuw toevoegen aan de app.</p><p>Heb je een nieuwere vaccinatie in de app staan? Dan kun je ook die QR-code gebruiken.</p>
      ///
      /// Locales: en, nl
      static let holder_qr_code_expired_explanation_description = Rswift.StringResource(key: "holder_qr_code_expired_explanation_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Ben je buiten de Europese Unie gevaccineerd en op bezoek in Nederland? Dan kun je van jouw vaccinatiebeoordeling en een negatieve testuitslag een bezoekersbewijs maken.</p><p>Met je bezoekersbewijs krijg je toegang tot plekken en activiteiten in Nederland die vragen om een coronatoegangsbewijs.</p><p>Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let visitorpass_start_message = Rswift.StringResource(key: "visitorpass_start_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Ben je in het buitenland of ga je de grens over? Gebruik dan altijd de internationale QR-code hieronder. Controleer voor vertrek welk bewijs je nodig hebt.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardIntroInternational = Rswift.StringResource(key: "holder.dashboard.intro.international", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Ben je in het buitenland of ga je de grens over? Gebruik dan altijd jouw internationale bewijs. Controleer voor vertrek welk bewijs je nodig hebt.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardEmptyInternationalMessage = Rswift.StringResource(key: "holder.dashboard.empty.international.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Ben je net getest? Het kan een paar uur duren voordat jouw positieve testuitslag beschikbaar is. Probeer het later nog eens.</p><p>Al even geleden getest? Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holderRecoveryNolistMessage = Rswift.StringResource(key: "holder.recovery.nolist.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Bezoek je een plek in Nederland? Check vooraf of je een bewijs voor <a href="https://coronacheck.nl/toegangsregels/3g-1g-toegang">3G- of 1G toegang</a> nodig hebt.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_empty_domestic_3Gand1Gaccess_message = Rswift.StringResource(key: "holder_dashboard_empty_domestic_3Gand1Gaccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Check vooraf of je een bewijs voor <a href="https://coronacheck.nl/toegangsregels/3g-1g-toegang">3G- of 1G toegang</a> nodig hebt. Laat ook je identiteitsbewijs zien.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_intro_domestic_3Gand1Gaccess = Rswift.StringResource(key: "holder_dashboard_intro_domestic_3Gand1Gaccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>CoronaCheck Scanner is ontwikkeld zodat bepaalde plekken en activiteiten veilig hun deuren kunnen openen.</p><p> Bezoekers maken een coronabewijs met een QR-code van hun vaccinatie, negatieve testuitslag, of herstel van corona. Met behulp van deze app krijgen alleen bezoekers met zo’n coronabewijs toegang. Zo kunnen steeds meer plekken veilig bezocht worden.</p>
      ///
      /// Locales: en, nl
      static let verifierAboutText = Rswift.StringResource(key: "verifier.about.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Dan is het niet mogelijk om jouw bewijs op deze manier aan de app toe te voegen.</p><p>Je hebt alleen een lettercombinatie gekregen als je jouw papieren coronabewijs hebt aangevraagd bij je zorgverlener, of opgestuurd hebt gekregen per post.</p><p><b>Zelf jouw bewijs geprint?</b><br />Voeg je bewijs dan toe in de app via het menu. Ga naar ‘Bewijs toevoegen’ en log in met DigiD.</p>
      ///
      /// Locales: en, nl
      static let holderDcctokenentryinfoBody = Rswift.StringResource(key: "holder.dcctokenentryinfo.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>De CoronaCheck-app heeft af en toe internet nodig om te blijven werken. Zonder internetverbinding werkt jouw app nog tot %@. Open de app zodra je internet hebt. Dan doet deze het gewoon weer.</p><p>Maak regelmatig verbinding om problemen te voorkomen.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardConfigIsAlmostOutOfDatePageMessage = Rswift.StringResource(key: "holder.dashboard.configIsAlmostOutOfDate.page.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>De app maakt in 3 stappen een QR-code. De QR-code is jouw bewijs.</p><b>1. Kies het soort bewijs</b><p>Je kan een vaccinatiebewijs, een testbewijs of een herstelbewijs maken.</p><b>2. Automatisch gegevens ophalen</b><p>De app haalt direct de gegevens van je vaccinatie, testuitslag of herstel op.</p><b>3. QR-codes staan klaar</b><p>De app maakt twee QR-codes: een QR-code voor Nederland en een internationale.</p>
      ///
      /// Locales: en, nl
      static let holderAboutmakingaqrBody = Rswift.StringResource(key: "holder.aboutmakingaqr.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>De scan-instelling log houdt bij welk soort toegang is gebruikt tijdens het scannen. Een BOA kan vragen om deze log te bekijken.</p><p>Om privacyredenen worden alleen de scan-instellingen van de laatste %li minuten opgeslagen op deze telefoon. Er worden geen persoonsgegevens opgeslagen. Lees meer in de <a href="https://coronacheck.nl/nl/faq-scanner-in-app">meestgestelde vragen</a>.</p>
      ///
      /// Locales: en, nl
      static let scan_log_message = Rswift.StringResource(key: "scan_log_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Dit bewijs is ongeldig verklaard. Daarom kun je het niet aan de app toevoegen.</p><p>Probeer een geldig bewijs toe te voegen, of bel de CoronaCheck helpdesk op <a href="tel:08001421">0800-1421</a> en geef onderstaande foutcode door.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateNoValidCertificate_body = Rswift.StringResource(key: "holder_listRemoteEvents_endStateNoValidCertificate_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Dit papieren bewijs is niet meer geldig. Dit kan verschillende oorzaken hebben:</p><ul><li>Je vaccinatie of herstel is nog geldig, maar het papieren bewijs niet. Vraag dan opnieuw je papieren bewijs aan.</li><li>Je vaccinatie of herstel is verlopen.</li></ul>
      ///
      /// Locales: en, nl
      static let holderCheckdccExpiredMessage = Rswift.StringResource(key: "holder.checkdcc.expired.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Een bezoekersbewijs is geldig tot %li dagen na de beoordeling van je vaccinatie. Blijf je langer in Nederland? Dan kun je opnieuw een bezoekersbewijs aanvragen. Ga voor meer informatie naar <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_visitorpassexpired_body = Rswift.StringResource(key: "holder_dashboard_visitorpassexpired_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Een rood scherm met kruis betekent dat de QR-code niet aan Nederlandse eisen voldoet, of niet geldig is op jouw locatie.</p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageOne_1G = Rswift.StringResource(key: "verifier.denied.message.one_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Een rood scherm met kruis betekent dat de QR-code niet aan Nederlandse eisen voldoet.</p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageOne = Rswift.StringResource(key: "verifier.denied.message.one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er gaat iets mis bij de testlocatie. Daardoor kunnen jouw gegevens niet worden opgehaald.</p><p><b>Wat nu?</b><br />Neem contact op met je testlocatie en geef de volgende foutcode door:</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateTestMessage = Rswift.StringResource(key: "holder.errorstate.test.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er gaat iets mis bij het maken van je bewijs. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateClientMessage = Rswift.StringResource(key: "holder.errorstate.client.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er gaat iets mis bij het ophalen van je gegevens. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateFetchMessage = Rswift.StringResource(key: "holder.errorstate.fetch.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er gaat iets mis bij het ophalen van je gegevens. Wil je het later nog eens proberen?</p><p><b>Foutcodes:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateFetchMessages = Rswift.StringResource(key: "holder.errorstate.fetch.messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er zijn geen gegevens over je testuitslag beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Heb je al een testuitslag van de GGD gekregen? Dan kan het nog een paar uur duren voordat je de uitslag hier kunt ophalen. Probeer het later opnieuw.</p>
      ///
      /// Locales: en, nl
      static let holderTestNolistMessage = Rswift.StringResource(key: "holder.test.nolist.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er zijn geen gegevens over je testuitslag beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Heb je al een testuitslag van de GGD gekregen? Het kan een paar uur duren voordat je de uitslag hier kunt ophalen. Probeer het later opnieuw.</p>
      ///
      /// Locales: en, nl
      static let holderEventNolistMessage = Rswift.StringResource(key: "holder.event.nolist.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er zijn geen gegevens over je vaccinatie(s) beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Ben je kortgeleden gevaccineerd? Het kan een paar uur duren tot de gegevens beschikbaar zijn.</p>
      ///
      /// Locales: en, nl
      static let holderVaccinationNolistMessage = Rswift.StringResource(key: "holder.vaccination.nolist.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er zijn geen gegevens over je vaccinatiebeoordeling beschikbaar. Ga terug naar de balie waar jouw vaccinatie is beoordeeld.</p><p>Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_nolist_message = Rswift.StringResource(key: "holder_event_vaccination_assessment_nolist_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Er zijn gegevens van jou ongeldig verklaard. Daarom zijn deze uit de app verwijderd. Het gaat om de volgende gegevens:</p>%@<p>Mogelijk zijn hierdoor ook bewijzen uit de app verwijderd. Voeg een geldige vaccinatie of test toe om bewijzen weer terug te halen.</p><p>Heb je vragen? Bel de CoronaCheck helpdesk op <a href="tel:08001421">0800-1421</a> en geef onderstaande foutcode door.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_moreinfo_body = Rswift.StringResource(key: "holder_invaliddetailsremoved_moreinfo_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Ga terug naar de balie waar jouw vaccinatie is beoordeeld. Zij kunnen opnieuw je gegevens invoeren. Je krijgt dan ook een nieuwe beoordelingscode. Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Haal een negatieve testuitslag op om je bezoekersbewijs compleet te maken.</p><p>Heb je nog geen coronatest gedaan? Maak een afspraak op <a href="https://www.testenvoortoegang.org">www.testenvoortoegang.org</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_completecertificate_body = Rswift.StringResource(key: "holder_completecertificate_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Heb je al een coronabewijs gekregen en wil je deze aan de app toevoegen? Dat kan door de QR-code op je bewijs te scannen met de camera van je telefoon.</p>
      ///
      /// Locales: en, nl
      static let holder_paperproof_startscanning_body = Rswift.StringResource(key: "holder_paperproof_startscanning_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Heb je een (booster)vaccinatie gehad? Log in met DigiD om al je vaccinatiegegevens op te halen.</p>
      ///
      /// Locales: en, nl
      static let holder_addVaccination_message = Rswift.StringResource(key: "holder_addVaccination_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Het is niet gelukt de server te bereiken. Wil je controleren of je verbinding met het internet hebt?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let generalErrorServerUnreachableErrorCode = Rswift.StringResource(key: "general.error.server.unreachable.errorCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Het is te lang geleden dat je positief getest bent op corona. Daardoor is je testuitslag niet meer geldig om een herstelbewijs van te maken.</p><p>Je positieve test kon wel meegeteld worden in je vaccinatiebewijs. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Het is te lang geleden dat je positief getest bent op corona. Daarom is je testuitslag niet meer geldig. Je kunt helaas geen herstelbewijs maken.</p><p>Kijk voor meer informatie op de <a href="https://www.coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryTooOld_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryTooOld_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>In Nederland krijg je alleen toegang met een testbewijs op plekken waar om een coronabewijs wordt gevraagd <a href="https://coronacheck.nl/toegangsregels/1g-toegang">(1G-toegang)</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_empty_domestic_only1Gaccess_message = Rswift.StringResource(key: "holder_dashboard_empty_domestic_only1Gaccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>In de <a href="https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app">gebruikersvoorwaarden</a> staat hoe CoronaCheck Scanner werkt en wat je rechten zijn.</p>
      ///
      /// Locales: en, nl
      static let verifierConsentMessage = Rswift.StringResource(key: "verifier.consent.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>In de <a href="https://coronacheck.nl/nl/privacy-in-app">privacyverklaring</a> staat hoe CoronaCheck omgaat met jouw gegevens. Dit zijn de belangrijkste punten:</p>
      ///
      /// Locales: en, nl
      static let holderConsentMessage = Rswift.StringResource(key: "holder.consent.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>In jouw Nederlandse QR-code staan minimale gegevens. Er staat wel dat je een geldig bewijs hebt, maar niet of je een test hebt gedaan, hersteld of gevaccineerd bent.</p><p>In de QR-code staat ook de eerste letter van je voornaam en van je achternaam, je geboortedag en geboortemaand. Dit is om zeker te zijn dat de QR-code bij jou hoort.</p><p>Jouw gegevens*: <b>%@</b></p><p></p><p>* Soms vallen gegevens weg om je privacy te beschermen. Je ziet dan een streepje (_).</p>
      ///
      /// Locales: en, nl
      static let holderShowqrDomesticAboutMessage = Rswift.StringResource(key: "holder.showqr.domestic.about.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>In jouw Nederlandse QR-code staat dat je een geldig bewijs hebt voor 1G-toegang en er zijn minimale gegevens zichtbaar.</p><p>De controleur ziet alleen de eerste letter van je voornaam en van je achternaam, je geboortedag en geboortemaand. Dit is om zeker te zijn dat de QR-code bij jou hoort.</p><p>Jouw gegevens*: <b>%@</b></p><p></p><p>* Soms vallen gegevens weg om je privacy te beschermen. Je ziet dan een streepje (_).</p>
      ///
      /// Locales: en, nl
      static let holder_qr_explanation_description_domestic_1G = Rswift.StringResource(key: "holder_qr_explanation_description_domestic_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je bezoekersbewijs is alleen in Nederland geldig. Wil je naar een ander land? Check de regels van het land dat je wilt bezoeken.</p> <p><b>Meer weten?</b><br />Lees meer op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_notvalidinthisregionmodal_visitorpass_international_body = Rswift.StringResource(key: "holder_notvalidinthisregionmodal_visitorpass_international_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je hebt alleen een lettercombinatie als je jouw bewijs opgestuurd hebt gekregen van je zorgverlener, of de Nederlandse overheid.</p><p>Heb je geen lettercombinatie of ben je deze kwijt? Dan is het niet mogelijk om je bewijs nu toe te voegen. Vraag eerst een nieuw bewijs met bijbehorende lettercombinatie aan.</p><p><b>Heb je zelf je bewijs geprint?</b><br />Je kunt dan alleen via DigiD je bewijzen toevoegen aan de app.</p>
      ///
      /// Locales: en, nl
      static let holderPaperproofNotokenMessage = Rswift.StringResource(key: "holder.paperproof.notoken.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je herstelbewijs is niet geldig in Nederland. Je hebt wel een internationaal bewijs.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenDomesticRecoveryMessage = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.domestic.recovery.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je herstelbewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen doordat je type test niet voldoet, of doordat deze niet meer geldig is in het buitenland. Alleen van een PCR-test die minder dan 180 dagen oud is kan een internationaal herstelbewijs gemaakt worden. Lees meer over de mogelijke oorzaken op de <a href="https://coronacheck.nl/wegwijzer"> Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuRecoveryMessage = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.recovery.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je krijgt een beoordelingscode van de balie waar je vaccinatie is beoordeeld. Deze code heb je geprint gekregen. Heb je geen beoordelingscode? Ga dan terug naar de balie waar je bent geweest.</p><p>Nog niet langs een balie geweest om je vaccinatie te laten beoordelen? Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static let visitorpass_token_modal_notoken_details = Rswift.StringResource(key: "visitorpass_token_modal_notoken_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je krijgt van de testlocatie een ophaalcode met cijfers en letters.</p><p>Heb je geen code gekregen? Of ben je deze kwijtgeraakt? Neem dan contact op met je testlocatie.</p>
      ///
      /// Locales: en, nl
      static let holderTokenentryModalNotokenDetails = Rswift.StringResource(key: "holder.tokenentry.modal.notoken.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je kunt de volgende bewijzen inscannen en toevoegen aan de app:</p><ul><li>Een papieren bewijs gekregen van je zorgverlener of de overheid. Heb je een bewijs voor in Nederland en voor internationaal gebruik? Scan dan de <b>internationale QR-code</b>.</li><li>Een coronabewijs met QR-code van je test of vaccinatie uit het buitenland. Je hebt je QR-code op papier of in een buitenlandse corona-app staan.</li></ul>
      ///
      /// Locales: en, nl
      static let holder_paperproof_whichProofsCanBeUsed_body = Rswift.StringResource(key: "holder_paperproof_whichProofsCanBeUsed_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je kunt een bewijs maken als je:</p><ul><li>Gevaccineerd bent</li><li>Positief getest bent en hersteld van corona</li><li>Negatief getest bent en geen corona hebt</li></ul>
      ///
      /// Locales: en, nl
      static let holderOnboardingMessageYourqr = Rswift.StringResource(key: "holder.onboarding.message.yourqr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je kunt een bewijs toevoegen als je bent gevaccineerd of hersteld. Of als je bent getest bij een <a href="https://coronacheck.nl/nl/testafspraak-in-app">aangesloten testlocatie</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_empty_domestic_only3Gaccess_message = Rswift.StringResource(key: "holder_dashboard_empty_domestic_only3Gaccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je kunt een bewijs toevoegen als je bent gevaccineerd of hersteld. Of als je bent getest bij een <a href="https://coronacheck.nl/nl/testafspraak-in-app">aangesloten testlocatie</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_incompleteVisitorPass_message = Rswift.StringResource(key: "holder_dashboard_incompleteVisitorPass_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je mag de bezoeker geen toegang geven als de gegevens op jouw scherm anders zijn dan op het identiteitsbewijs.</p><p><b>Let op: soms vallen gegevens weg</b><br />Om de privacy van de bezoeker te beschermen zie je soms niet alle gegevens op jouw scherm. Dan staat er een streepje (-) in het vak. Controleer in dat geval alleen de gegevens die je wel ziet.</p>
      ///
      /// Locales: en, nl
      static let verifierResultCheckText = Rswift.StringResource(key: "verifier.result.check.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je moet je eerst laten testen voordat je een QR-code maakt. Alleen van een negatieve testuitslag kan je een QR-code maken.</p>
      ///
      /// Locales: en, nl
      static let holderAppointmentBody = Rswift.StringResource(key: "holder.appointment.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je naam moet bij alle vaccinaties, testuitslagen en bewijzen in de app op dezelfde manier zijn geschreven. Anders ziet CoronaCheck het als van verschillende personen. Kies daarom één naam.</p><p>Alleen de vaccinaties en testuitslagen bij de naam die je kiest blijven bewaard. De rest wordt verwijderd. Wil je die vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad.</p><p>Als je naam is aangepast, kun je zelf de vaccinaties en testuitslagen opnieuw toevoegen aan de app.</p>
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_why_body = Rswift.StringResource(key: "holder_fuzzyMatching_why_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je negatieve testuitslag is succesvol toegevoegd. Maak je bezoekersbewijs compleet met je vaccinatiebeoordeling.</p><p>Hiervoor heb je een beoordelingscode gekregen van de balie waar je vaccinatie is beoordeeld. Deze code heb je geprint gekregen.</p>
      ///
      /// Locales: en, nl
      static let holder_event_negativeTestEndstate_addVaccinationAssessment_body = Rswift.StringResource(key: "holder_event_negativeTestEndstate_addVaccinationAssessment_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Je testuitslag is al opgehaald en omgezet in een QR-code.</p><p>Klopt dit niet? Neem dan contact op met de testlocatie.</p>
      ///
      /// Locales: en, nl
      static let holderTestresultsAlreadyText = Rswift.StringResource(key: "holder.testresults.already.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Jouw testbewijs is niet geldig in Nederland. Je hebt wel een internationaal bewijs.</p><p>Dit kan komen doordat de geldigheidsduur in Nederland korter is dan in andere landen. Laat je opnieuw testen voor een bewijs dat ook in Nederland geldig is.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenDomesticTestMessage = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.domestic.test.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Jouw testbewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen door je type test niet geaccepteerd wordt in andere landen. Laat je opnieuw testen voor een bewijs dat ook internationaal geldig is.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuTestMessage = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.test.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Jouw vaccinatiebewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen doordat jouw type vaccin niet geaccepteerd wordt in het buitenland.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuVaccinationMessage = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.vaccination.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Laat in Nederland een bewijs voor <a href="https://coronacheck.nl/toegangsregels/1g-toegang">1G-toegang</a> zien als om een coronabewijs wordt gevraagd. Laat ook je identiteitsbewijs zien.</p>
      ///
      /// Locales: en, nl
      static let holder_dashboard_intro_domestic_only1Gaccess = Rswift.StringResource(key: "holder_dashboard_intro_domestic_only1Gaccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Met de CoronaCheck app kun je aantonen dat je gevaccineerd, negatief getest, of hersteld van corona bent. Je kunt een digitaal coronabewijs maken van je vaccinatie(s), maar ook van een positieve of negatieve testuitslag.</p><p>Je bewijs heeft een QR-code. Die kan gescand worden voor toegang tot plekken of activiteiten, of om mee te reizen.</p>
      ///
      /// Locales: en, nl
      static let holderAboutText = Rswift.StringResource(key: "holder.about.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Met de vaccinatie(s) die je nu in de app hebt toegevoegd, krijg je geen Nederlands vaccinatiebewijs.</p><p>Voeg een nieuwe (booster)vaccinatie of test toe om een Nederlands bewijs te krijgen.</p><p>Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_incompletedutchvaccination_paragraph_secondvaccine = Rswift.StringResource(key: "holder_incompletedutchvaccination_paragraph_secondvaccine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Neem contact op met de zorgverlener waar je bent gevaccineerd. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_vaccination_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_vaccination_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Neem contact op met je testlocatie. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_recovery_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_recovery_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Neem contact op met je testlocatie. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_test_body = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_test_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Om de CoronaCheck Scanner-app goed te kunnen gebruiken, is het belangrijk dat de tijd op je telefoon goed staat ingesteld. Loopt je telefoon bijvoorbeeld een paar minuten voor? Dan kan er een fout ontstaan tijdens de controle van een coronabewijs.</p><p><a href="%@">Ga naar de instellingen</a> van je telefoon en zet de datum en tijd op 'automatisch instellen'.</p>
      ///
      /// Locales: en, nl
      static let verifierClockDeviationDetectedMessage = Rswift.StringResource(key: "verifier.clockDeviationDetected.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Om de CoronaCheck-app goed te kunnen gebruiken, is het belangrijk dat de tijd op je telefoon goed staat ingesteld. Loopt je telefoon bijvoorbeeld een paar minuten voor? Dan kan er een fout ontstaan tijdens de controle van je coronabewijs.</p><p><a href="%@">Ga naar de instellingen van je telefoon</a> en zet de datum en tijd op 'automatisch instellen'.</p>
      ///
      /// Locales: en, nl
      static let holderClockDeviationDetectedMessage = Rswift.StringResource(key: "holder.clockDeviationDetected.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Om je vaccinatiebewijs te verlengen heb je en boostervaccinatie nodig. Kijk voor meer informatie over boostervaccinaties op <a href="https://www.coronavaccinatie.nl/booster-cc">www.coronavaccinatie.nl/booster</a>.</p><p>Heb je en boostervaccinatie gehad? Haal opnieuw je gegevens op om deze aan je bewijs toe te voegen.</p>
      ///
      /// Locales: en, nl
      static let holder_expiredDomesticVaccinationModal_body = Rswift.StringResource(key: "holder_expiredDomesticVaccinationModal_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Op dit moment kunnen we geen bewijs maken van je %@. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://www.coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateCantCreateCertificate_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateCantCreateCertificate_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Probeer het later nog eens.</p><p>Neem voor vragen contact op met jouw testlocatie.</p>
      ///
      /// Locales: en, nl
      static let holderTestresultsPendingText = Rswift.StringResource(key: "holder.testresults.pending.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Probeer het op een later moment nog eens.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let generalNetworkwasbusyErrorcode = Rswift.StringResource(key: "general.networkwasbusy.errorcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Sorry, het is niet gelukt de QR-code te vernieuwen. Open de app opnieuw over 10 minuten.<br /><br />Helpt dat niet? Bel dan de helpdesk op <a href="tel:08001421">0800-1421</a> (gratis) en geef de foutcode (i 075) door.</p>
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredErrorfooterServerHelpdesk = Rswift.StringResource(key: "holder.dashboard.strippen.expired.errorfooter.server.helpdesk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Van je opgehaalde gegevens is een herstelbewijs gemaakt.</p><p>Je positieve test kon ook meegeteld worden in je vaccinatiebewijs. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Van je opgehaalde gegevens kon alleen een herstelbewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryOnly_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryOnly_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Van je opgehaalde gegevens kon alleen een internationaal vaccinatiebewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateInternationalQROnly_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateInternationalQROnly_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Van je opgehaalde vaccinaties is een vaccinatiebewijs gemaakt.</p><p>Van je positieve testuitslag kon ook een herstelbewijs worden gemaakt.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateVaccinationsAndRecovery_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateVaccinationsAndRecovery_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Van je opgehaalde vaccinaties kon alleen een internationaal vaccinatiebewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Van je positieve testuitslag kon ook een herstelbewijs gemaakt worden.</p>
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Voor de veiligheid kun je deze QR-code tijdelijk niet meer in de app zetten.</p><p>Je kunt het over 24 uur weer proberen.</p>
      ///
      /// Locales: en, nl
      static let holderCheckdccBlockedMessage = Rswift.StringResource(key: "holder.checkdcc.blocked.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Voor een testbewijs moet je eerst een test doen bij een aangesloten testlocatie. Blijkt uit de test dat je geen corona hebt? Dan kun je een bewijs maken.</p>
      ///
      /// Locales: en, nl
      static let holderNotestBody = Rswift.StringResource(key: "holder.notest.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Vraag de bezoeker contact op te nemen met de helpdesk van CoronaCheck.</p>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageFive = Rswift.StringResource(key: "verifier.denied.message.five", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Vraag een papieren coronabewijs aan door te bellen met de GGD op <a href="tel:0888-5090">0800 - 5090</a>.</p><p>Je bewijs met QR-code wordt per post opgestuurd.</p>
      ///
      /// Locales: en, nl
      static let holder_contactProviderHelpdesk_testFlow_message = Rswift.StringResource(key: "holder_contactProviderHelpdesk_testFlow_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Vraag je bewijs aan bij de CoronaCheck helpdesk. Die kun je elke dag tussen 08.00 en 20.00 uur bellen op: <a href="tel:0800-1421">0800-1421</a> (gratis).</p> <p>Of als je vanuit het buitenland belt: <a href="tel:+31707503720">+31 70 750 37 20</a>. Kies in het keuzemenu voor “een bewijs aanvragen”.</p>Geef het volgende door:<ul><li>je burgerservicenummer (BSN)</li><li>je postcode</li></ul><p>Je bewijs met QR-code wordt per post opgestuurd. Dit kan maximaal 7 werkdagen duren.</p>
      ///
      /// Locales: en, nl
      static let holder_contactCoronaCheckHelpdesk_message = Rswift.StringResource(key: "holder_contactCoronaCheckHelpdesk_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>Waar je jouw coronabewijs kunt aanvragen hangt af van waar je gevaccineerd bent. </p><ul><li>Was dit bij de GGD? Bel de GGD op <a href="tel:0888-5090">0800 - 5090</a> om je bewijs aan te vragen.</li><li>Was dit ergens anders? Bijvoorbeeld bij je huisarts of een andere zorgverlener? Neem direct contact op met hen.</li></ul><p>Je kunt je coronabewijs aanvragen op papier of als pdf-bestand.</p>
      ///
      /// Locales: en, nl
      static let holder_contactProviderHelpdesk_vaccinationFlow_message = Rswift.StringResource(key: "holder_contactProviderHelpdesk_vaccinationFlow_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>We hebben voor iedereen het vaccinatiebewijs vernieuwd. Je hebt nu ook toegang tot QR-codes van eerdere prikken.</p><p>Dat is bijvoorbeeld handig voor mensen die ergens heen willen waar hun laatste prik nog niet geldig is.</p><p><a href="https://coronacheck.nl/nl/faq/3-5-waarom-heb-ik-voor-elke-prik-een-internationale-QR-code/">Lees hier meer over je vernieuwde vaccinatiebewijs</a>.</p>
      ///
      /// Locales: en, nl
      static let holderEuvaccinationswereupgradedMessage = Rswift.StringResource(key: "holder.euvaccinationswereupgraded.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>We zijn bezig met een oplossing. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateServerMessage = Rswift.StringResource(key: "holder.errorstate.server.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <p>We zijn bezig met een oplossing. Wil je het later nog eens proberen?</p><p><b>Foutcodes:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static let holderErrorstateServerMessages = Rswift.StringResource(key: "holder.errorstate.server.messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <ul><li>Controleer of de tijd goed staat ingesteld op de telefoon van de bezoeker en die van jou. Zorg dat de datum en tijd op ‘automatisch instellen’ staan.</li><li>Controleer of de bezoeker een origineel bewijs laat zien. Een screenshot van een bewijs kan voor problemen zorgen.</li><li>Vraag de bezoeker om de app volledig af te sluiten en opnieuw op te starten. Scan daarna opnieuw de QR-code.</li></ul>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageThree = Rswift.StringResource(key: "verifier.denied.message.three", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: <ul><li>Laat de bezoeker weten welk soort toegang jouw locatie mag geven. Let op dat bij 1G-toegang alleen bezoekers met een testbewijs naar binnen mogen.</li><li>Controleer of de tijd goed staat ingesteld op de telefoon van de bezoeker en die van jou. Zorg dat de datum en tijd op ‘automatisch instellen’ staan.</li><li>Controleer of de bezoeker een origineel bewijs laat zien. Een screenshot van een bewijs kan voor problemen zorgen.</li><li>Vraag de bezoeker om de app volledig af te sluiten en opnieuw op te starten. Scan daarna opnieuw de QR-code.</li></ul>
      ///
      /// Locales: en, nl
      static let verifierDeniedMessageThree_1G = Rswift.StringResource(key: "verifier.denied.message.three_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: APR
      ///
      /// Locales: en, nl
      static let holderTestresultsApril = Rswift.StringResource(key: "holder.testresults.april", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: AUG
      ///
      /// Locales: en, nl
      static let holderTestresultsAugust = Rswift.StringResource(key: "holder.testresults.august", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Aan de slag
      ///
      /// Locales: en, nl
      static let holderConsentAction = Rswift.StringResource(key: "holder.consent.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Aan de slag
      ///
      /// Locales: en, nl
      static let verifierConsentAction = Rswift.StringResource(key: "verifier.consent.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Aanpassen
      ///
      /// Locales: en, nl
      static let verifier_risksetting_changeselection_button = Rswift.StringResource(key: "verifier_risksetting_changeselection_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Achternaam
      ///
      /// Locales: en, nl
      static let verifierResultIdentityLastname = Rswift.StringResource(key: "verifier.result.identity.lastname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryIssuer = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestIssuer = Rswift.StringResource(key: "holder.showqr.eu.about.test.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationIssuer = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Afgever certificaat:
      ///
      /// Locales: en, nl
      static let holder_dcc_issuer = Rswift.StringResource(key: "holder_dcc_issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Akkoord
      ///
      /// Locales: en, nl
      static let newTermsAgree = Rswift.StringResource(key: "new.terms.agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Alleen 1G-toegang
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only1G_title = Rswift.StringResource(key: "holder_newintheapp_content_only1G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Alleen 1G-toegang in Nederland
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_only1GAccess_title = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_only1GAccess_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Alleen internationale bewijzen
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_onlyInternationalCertificates_0G_title = Rswift.StringResource(key: "holder_newintheapp_content_onlyInternationalCertificates_0G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_vaccination_message = Rswift.StringResource(key: "holder_listRemoteEvents_vaccination_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als de gegevens kloppen kun je jouw vaccinatiebeoordeling toevoegen aan de app.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_vaccinationAssessment_message = Rswift.StringResource(key: "holder_listRemoteEvents_vaccinationAssessment_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als de gegevens van je test kloppen kun je een herstelbewijs maken.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_recovery_message = Rswift.StringResource(key: "holder_listRemoteEvents_recovery_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als je geen DigiD kunt of wilt aanvragen
      ///
      /// Locales: en, nl
      static let holder_noDigiD_buttonSubTitle_continueWithoutDigiD = Rswift.StringResource(key: "holder_noDigiD_buttonSubTitle_continueWithoutDigiD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als je voor of op %@ getest bent kun je de testuitslag ophalen via DigiD. Ben je erna getest? Gebruik de ophaalcode die je van de testlocatie hebt gekregen.
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_body = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als je wisselt van scan-instelling moet je %li minuten wachten voordat je weer kunt scannen.
      ///
      /// Locales: en, nl
      static let verifier_risksetting_confirmation_dialog_message = Rswift.StringResource(key: "verifier_risksetting_confirmation_dialog_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Als onderstaande gegevens kloppen kun je jouw bewijs toevoegen aan de app.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_paperflow_message = Rswift.StringResource(key: "holder_listRemoteEvents_paperflow_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Andere testlocatie
      ///
      /// Locales: en, nl
      static let holderLocationOtherTitle = Rswift.StringResource(key: "holder.location.other.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Andere testlocatie
      ///
      /// Locales: en, nl
      static let holderProviderCommercialTitle = Rswift.StringResource(key: "holder.provider.commercial.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Animatie van mensen op een fiets en skateboard
      ///
      /// Locales: en, nl
      static let holder_showqr_animation_summerctb_voiceover_label = Rswift.StringResource(key: "holder_showqr_animation_summerctb_voiceover_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Animatie van mensen op een slee en schaatsen
      ///
      /// Locales: en, nl
      static let holder_showqr_animation_winterctb_voiceover_label = Rswift.StringResource(key: "holder_showqr_animation_winterctb_voiceover_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Animatie van reizigers op een loopband
      ///
      /// Locales: en, nl
      static let holder_showqr_animation_summerdcc_voiceover_label = Rswift.StringResource(key: "holder_showqr_animation_summerdcc_voiceover_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Animatie van reizigers op een loopband
      ///
      /// Locales: en, nl
      static let holder_showqr_animation_winterdcc_voiceover_label = Rswift.StringResource(key: "holder_showqr_animation_winterdcc_voiceover_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Annuleer
      ///
      /// Locales: en, nl
      static let general_cancel = Rswift.StringResource(key: "general_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App in gebruik sinds %@
      ///
      /// Locales: en, nl
      static let scan_log_footer_in_use = Rswift.StringResource(key: "scan_log_footer_in_use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App langer dan een maand in gebruik
      ///
      /// Locales: en, nl
      static let scan_log_footer_long_time = Rswift.StringResource(key: "scan_log_footer_long_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App niet in gebruik
      ///
      /// Locales: en, nl
      static let holder_endOfLife_title = Rswift.StringResource(key: "holder_endOfLife_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App niet in gebruik
      ///
      /// Locales: en, nl
      static let verifier_endOfLife_title = Rswift.StringResource(key: "verifier_endOfLife_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App resetten
      ///
      /// Locales: en, nl
      static let holder_menu_resetApp = Rswift.StringResource(key: "holder_menu_resetApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App versie %@ (%@)
      ///
      /// Locales: en, nl
      static let generalMenuVersion = Rswift.StringResource(key: "general.menu.version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App versie %@ (build %@)
      ///
      /// Locales: en, nl
      static let holderLaunchVersion = Rswift.StringResource(key: "holder.launch.version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: App versie %@ (build %@)
      ///
      /// Locales: en, nl
      static let verifierLaunchVersion = Rswift.StringResource(key: "verifier.launch.version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Begin opnieuw
      ///
      /// Locales: en, nl
      static let holderErrorstateNosessionAction = Rswift.StringResource(key: "holder.errorstate.nosession.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Begin van lijst.
      ///
      /// Locales: en, nl
      static let generalListAccessibilityStart = Rswift.StringResource(key: "general.list.accessibility.start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bekijk QR-code
      ///
      /// Locales: en, nl
      static let holderDashboardQrButtonViewQR = Rswift.StringResource(key: "holder.dashboard.qr.button.viewQR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bekijk QR-codes
      ///
      /// Locales: en, nl
      static let holderDashboardQrButtonViewQRs = Rswift.StringResource(key: "holder.dashboard.qr.button.viewQRs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bekijk de actuele storingen
      ///
      /// Locales: en, nl
      static let holderErrorstateMalfunctionsTitle = Rswift.StringResource(key: "holder.errorstate.malfunctions.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bekijk de details voor %@
      ///
      /// Locales: en, nl
      static let holder_identitySelection_accessibility_details = Rswift.StringResource(key: "holder_identitySelection_accessibility_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bekijk goed in de details welke vaccinaties of testuitslagen bij je keuze horen.
      ///
      /// Locales: en, nl
      static let holder_identitySelection_message = Rswift.StringResource(key: "holder_identitySelection_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ben je nog niet getest?
      ///
      /// Locales: en, nl
      static let holderLocationNotest = Rswift.StringResource(key: "holder.location.notest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ben je nog niet getest?
      ///
      /// Locales: en, nl
      static let holderNotestTitle = Rswift.StringResource(key: "holder.notest.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ben je vóór of op %@ getest?
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_title = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Beoordelingscode
      ///
      /// Locales: en, nl
      static let visitorpass_code_review_input = Rswift.StringResource(key: "visitorpass_code_review_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Beoordelingsdatum:
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_date = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Beoordelingsdatum: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_assessmentDate = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_assessmentDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bevestigen
      ///
      /// Locales: en, nl
      static let verifier_risksetting_confirmation_button = Rswift.StringResource(key: "verifier_risksetting_confirmation_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijs toevoegen
      ///
      /// Locales: en, nl
      static let holderDccListAction = Rswift.StringResource(key: "holder.dcc.list.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijs toevoegen
      ///
      /// Locales: en, nl
      static let holderMenuProof = Rswift.StringResource(key: "holder.menu.proof", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijs van vaccinatie, herstel of test
      ///
      /// Locales: en, nl
      static let holderOnboardingTitleYourqr = Rswift.StringResource(key: "holder.onboarding.title.yourqr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijs voor 1G-toegang
      ///
      /// Locales: en, nl
      static let holder_dashboard_domesticQRCard_1G_title = Rswift.StringResource(key: "holder_dashboard_domesticQRCard_1G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijs voor 3G-toegang
      ///
      /// Locales: en, nl
      static let holder_dashboard_domesticQRCard_3G_title = Rswift.StringResource(key: "holder_dashboard_domesticQRCard_3G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bewijzen voor 3G- en 1G-toegang
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_3Gand1G_title = Rswift.StringResource(key: "holder_newintheapp_content_3Gand1G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezig met laden
      ///
      /// Locales: en, nl
      static let generalLoading = Rswift.StringResource(key: "general.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Check vooraf of je een bewijs voor 3G- of 1G-toegang nodig hebt. De app maakt hier aparte bewijzen voor.
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Op dit moment wordt alleen 1G-toegang gegeven. Je kunt dan naar binnen met een bewijs van een negatieve test.
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_only1GAccess_message = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_only1GAccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Op dit moment wordt overal 3G-toegang gegeven. Je kunt dan naar binnen met een bewijs van vaccinatie, herstel, of een negatieve test.
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_only3GAccess_message = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_only3GAccess_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezoek je een plek in Nederland? Laat je Nederlandse QR-code en je identiteitsbewijs zien bij de ingang.
      ///
      /// Locales: en, nl
      static let holder_dashboard_intro_domestic_only3Gaccess = Rswift.StringResource(key: "holder_dashboard_intro_domestic_only3Gaccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bezoekersbewijs toevoegen
      ///
      /// Locales: en, nl
      static let holder_menu_visitorpass = Rswift.StringResource(key: "holder_menu_visitorpass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bij 1G-toegang mogen alleen bezoekers met een testbewijs naar binnen. Bij 3G-toegang mogen bezoekers met een test-, vaccinatie-, of herstelbewijs naar binnen.
      ///
      /// Locales: en, nl
      static let new_in_app_risksetting_subtitle = Rswift.StringResource(key: "new_in_app_risksetting_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bij al je vaccinaties en testuitslagen moet je naam op dezelfde manier zijn geschreven. Anders kun je jouw coronabewijs mogelijk niet gebruiken.
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_firstPage_body = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_firstPage_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bij het resetten worden alle gegevens en bewijzen uit de app verwijderd en ga je terug naar het startscherm.
      ///
      /// Locales: en, nl
      static let holderCleardataAlertSubtitle = Rswift.StringResource(key: "holder.cleardata.alert.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bij het verwijderen van deze gegevens worden er mogelijk ook bewijzen met QR-codes uit de app verwijderd.
      ///
      /// Locales: en, nl
      static let holder_storedEvent_alert_removeEvents_message = Rswift.StringResource(key: "holder_storedEvent_alert_removeEvents_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijgewerkte gegevens
      ///
      /// Locales: en, nl
      static let holder_identityRemoved_moreinfo_title = Rswift.StringResource(key: "holder_identityRemoved_moreinfo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. 123456
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowVerificationPlaceholder = Rswift.StringResource(key: "holder.tokenentry.regularflow.verification.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. 123456
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowVerificationPlaceholder = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.verification.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. BRB-YYYYYYYYYY-Z2
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowTokenPlaceholder = Rswift.StringResource(key: "holder.tokenentry.regularflow.token.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. BRB-YYYYYYYYYY-Z2
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowTokenPlaceholder = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.token.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. FLBRXQ
      ///
      /// Locales: en, nl
      static let holderDcctokenentryTokenFieldPlaceholder = Rswift.StringResource(key: "holder.dcctokenentry.tokenField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Bijv. VAC-YYYYYYYYY1-F2
      ///
      /// Locales: en, nl
      static let visitorpass_code_review_placeholder = Rswift.StringResource(key: "visitorpass_code_review_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Blijkt uit de test dat je geen corona hebt? Dan kun je van de testuitslag een bewijs maken. Geef aan waar je getest bent.
      ///
      /// Locales: en, nl
      static let holderLocationMessage = Rswift.StringResource(key: "holder.location.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Blijkt uit de test dat je geen corona hebt? Dan kun je van de testuitslag een bewijs maken. Geef aan waar je getest bent.
      ///
      /// Locales: en, nl
      static let holderProviderMessage = Rswift.StringResource(key: "holder.provider.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Boostervaccinatie toevoegen
      ///
      /// Locales: en, nl
      static let holder_expiredDomesticVaccinationModal_button_addBoosterVaccination = Rswift.StringResource(key: "holder_expiredDomesticVaccinationModal_button_addBoosterVaccination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Buitenlandse bewijzen toevoegen
      ///
      /// Locales: en, nl
      static let holder_newintheapp_foreignproofs_title = Rswift.StringResource(key: "holder_newintheapp_foreignproofs_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderDccRecoveryPathogenvalue = Rswift.StringResource(key: "holder.dcc.recovery.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderDccTestPathogenvalue = Rswift.StringResource(key: "holder.dcc.test.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderDccVaccinationPathogenvalue = Rswift.StringResource(key: "holder.dcc.vaccination.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationPathogenvalue = Rswift.StringResource(key: "holder.event.about.vaccination.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryPathogenvalue = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestPathogenvalue = Rswift.StringResource(key: "holder.showqr.eu.about.test.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationPathogenvalue = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.pathogenvalue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Camera is alleen te gebruiken in volledig scherm. Sluit je vensterweergave.
      ///
      /// Locales: en, nl
      static let holder_scanner_cameraBlockedDueToMultitasking = Rswift.StringResource(key: "holder_scanner_cameraBlockedDueToMultitasking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Check vooraf de toegangsregels
      ///
      /// Locales: en, nl
      static let holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title = Rswift.StringResource(key: "holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Code
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowTokenTitle = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Colofon
      ///
      /// Locales: en, nl
      static let holderMenuColophon = Rswift.StringResource(key: "holder.menu.colophon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Configuratie %@, %@
      ///
      /// Locales: en, nl
      static let generalMenuConfigVersion = Rswift.StringResource(key: "general.menu.configVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controle klaar
      ///
      /// Locales: en, nl
      static let verifier_result_access_title = Rswift.StringResource(key: "verifier_result_access_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer bij bezoekers vanaf 14 jaar altijd of de gegevens op jouw scherm hetzelfde zijn als die op het identiteitsbewijs van de bezoeker. Zo weet je zeker dat de QR-code van die bezoeker is.
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsCheckthedetailsMessage = Rswift.StringResource(key: "verifier.scaninstructions.checkthedetails.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer de tijd van je telefoon
      ///
      /// Locales: en, nl
      static let holderClockDeviationDetectedTitle = Rswift.StringResource(key: "holder.clockDeviationDetected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer de tijd van je telefoon
      ///
      /// Locales: en, nl
      static let verifierClockDeviationDetectedTitle = Rswift.StringResource(key: "verifier.clockDeviationDetected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer de tijd van je telefoon. Mogelijk staat deze niet goed ingesteld.
      ///
      /// Locales: en, nl
      static let holderDashboardClockDeviationDetectedMessage = Rswift.StringResource(key: "holder.dashboard.clockDeviationDetected.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer de tijd van je telefoon. Mogelijk staat deze niet goed ingesteld.
      ///
      /// Locales: en, nl
      static let verifierStartClockdeviationwarningMessage = Rswift.StringResource(key: "verifier.start.clockdeviationwarning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer het identiteitsbewijs
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsCheckthedetailsTitle = Rswift.StringResource(key: "verifier.scaninstructions.checkthedetails.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Controleer identiteitsbewijs
      ///
      /// Locales: en, nl
      static let verifierResultIdentityTitle = Rswift.StringResource(key: "verifier.result.identity.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: CoronaCheck problem report (%@ %@)
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_email_subject = Rswift.StringResource(key: "general_unrecoverableError_email_subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Coronabewijs inscannen
      ///
      /// Locales: en, nl
      static let holder_menu_paperproof_title = Rswift.StringResource(key: "holder_menu_paperproof_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: DEC
      ///
      /// Locales: en, nl
      static let holderTestresultsDecember = Rswift.StringResource(key: "holder.testresults.december", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dagen sinds vaccinatie / Days since vaccination:
      ///
      /// Locales: en, nl
      static let holder_showQR_euAboutVaccination_daysSince = Rswift.StringResource(key: "holder_showQR_euAboutVaccination_daysSince", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dank! Je gegevens zijn bijgewerkt
      ///
      /// Locales: en, nl
      static let holder_identitySelection_success_title = Rswift.StringResource(key: "holder_identitySelection_success_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dat komt door een technische fout (%@)
      ///
      /// Locales: en, nl
      static let generalErrorTechnicalCustom = Rswift.StringResource(key: "general.error.technical.custom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dat komt door een technische fout.
      ///
      /// Locales: en, nl
      static let generalErrorTechnicalText = Rswift.StringResource(key: "general.error.technical.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Datum of tijd aangepast
      ///
      /// Locales: en, nl
      static let scan_log_list_clock_skew_detected = Rswift.StringResource(key: "scan_log_list_clock_skew_detected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De App Store kan niet geopend worden.
      ///
      /// Locales: en, nl
      static let holder_updateApp_errorMessage = Rswift.StringResource(key: "holder_updateApp_errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De App Store kan niet geopend worden.
      ///
      /// Locales: en, nl
      static let verifier_updateApp_errorMessage = Rswift.StringResource(key: "verifier_updateApp_errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Er wordt 1G-toegang gegeven op alle plekken waar om een coronabewijs wordt gevraagd. Dit betekent dat je daar alleen naar binnen kunt met een testbewijs. Je kunt nog steeds een bewijs van vaccinatie of herstel toevoegen in de app, maar deze bewijzen kun je alleen gebruiken in het buitenland.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only1G_body = Rswift.StringResource(key: "holder_newintheapp_content_only1G_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Er zijn nu aparte bewijzen voor plekken die 3G-toegang en 1G-toegang geven.
      ///
      /// Locales: en, nl
      static let holder_dashboard_3Gand1GaccessBanner_title = Rswift.StringResource(key: "holder_dashboard_3Gand1GaccessBanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Op plekken waar 3G-toegang wordt gegeven kun je naar binnen met een bewijs van vaccinatie, herstel, of een negatieve test. Op plekken waar 1G-toegang wordt gegeven kun je alleen met een testbewijs naar binnen. De app maakt aparte bewijzen voor 3G-toegang en 1G-toegang.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_3Gand1G_body = Rswift.StringResource(key: "holder_newintheapp_content_3Gand1G_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De QR-code die je probeert te scannen wordt niet herkend als die van een coronabewijs. Controleer of je de goede QR-code voor de camera houdt.
      ///
      /// Locales: en, nl
      static let holder_scanner_error_message_unknown = Rswift.StringResource(key: "holder_scanner_error_message_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De QR-code heeft af en toe internet nodig. Zonder internetverbinding kan je jouw QR-code nog %@ dagen gebruiken. Ook daarna kun je de QR-code weer gebruiken wanneer je internet hebt.
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiringNointernetAlertMessage = Rswift.StringResource(key: "holder.dashboard.strippen.expiring.nointernet.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De QR-code op je bewijs kan worden gecheckt bij de ingang van plekken en activiteiten in het buitenland. Of aan de grens.
      ///
      /// Locales: en, nl
      static let holder_onboarding_content_onlyInternationalQR_0G_message = Rswift.StringResource(key: "holder_onboarding_content_onlyInternationalQR_0G_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De QR-code op je bewijs wordt gecheckt bij de ingang van plekken en activiteiten. Of aan de grens.
      ///
      /// Locales: en, nl
      static let holderOnboardingMessageValidity = Rswift.StringResource(key: "holder.onboarding.message.validity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app heeft af en toe verbinding met de server nodig om je QR-codes te vernieuwen. Dat is niet gelukt door een fout op de server. <a href="%@">Probeer opnieuw</a>
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredErrorfooterServerTryagain = Rswift.StringResource(key: "holder.dashboard.strippen.expired.errorfooter.server.tryagain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app heeft eenmalig internet nodig om de laatste gegevens op te halen.
      ///
      /// Locales: en, nl
      static let verifierStartOntimeinternet = Rswift.StringResource(key: "verifier.start.ontimeinternet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app maakt QR-codes voor in Nederland en het buitenland. Ga je de grens over? Gebruik dan je internationale QR-code.
      ///
      /// Locales: en, nl
      static let holderOnboardingMessagePrivacy = Rswift.StringResource(key: "holder.onboarding.message.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app wil toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static let holder_scanner_permission_message = Rswift.StringResource(key: "holder_scanner_permission_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De app wil toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static let verifierScanPermissionMessage = Rswift.StringResource(key: "verifier.scan.permission.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De gegevens die bij de naam horen die je hebt gekozen zijn bewaard (<b>%@</b>). Alle andere vaccinatie- en testgegevens zijn verwijderd. Mogelijk zijn hierdoor ook bewijzen weg.
      ///
      /// Locales: en, nl
      static let holder_identitySelection_success_body = Rswift.StringResource(key: "holder_identitySelection_success_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De gegevens hieronder staan opgeslagen op je telefoon en worden gebruikt door CoronaCheck om je coronabewijs te maken.
      ///
      /// Locales: en, nl
      static let holder_storedEvents_message = Rswift.StringResource(key: "holder_storedEvents_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De persoonsgegevens die je net hebt opgehaald zijn anders dan die in je huidige bewijs staan. Stop en laat eerst de gegevens aanpassen bij de organisatie die de gegevens voor je bewijs heeft geregistreerd, of vervang je bewijs. Je huidige bewijs wordt dan verwijderd.
      ///
      /// Locales: en, nl
      static let holderEventIdentityAlertMessage = Rswift.StringResource(key: "holder.event.identity.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowErrorUnknownprovider = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.error.unknownprovider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De vaccinatie kan niet worden gelezen. Neem contact op met de locatie waar je gevaccineerd bent en geef de foutcode (%@) door.
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorMessageCode = Rswift.StringResource(key: "holder.vaccination.error.message.code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De volgende gegevens staan in je bewijs:
      ///
      /// Locales: en, nl
      static let holder_dccDetails_subtitle = Rswift.StringResource(key: "holder_dccDetails_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De volgende gegevens van je vaccinatie zijn opgehaald bij %@:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationSubtitle = Rswift.StringResource(key: "holder.event.about.vaccination.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De volgende gegevens zijn opgehaald bij de testlocatie:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoverySubtitle = Rswift.StringResource(key: "holder.event.about.recovery.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De volgende gegevens zijn opgehaald bij de testlocatie:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestSubtitle = Rswift.StringResource(key: "holder.event.about.test.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De volgende gegevens zijn opgehaald:
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_subtitle = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De website kan niet geopend worden.
      ///
      /// Locales: en, nl
      static let holder_endOfLife_errorMessage = Rswift.StringResource(key: "holder_endOfLife_errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De website kan niet geopend worden.
      ///
      /// Locales: en, nl
      static let verifier_endOfLife_errorMessage = Rswift.StringResource(key: "verifier_endOfLife_errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: De zorgverlener waar je gevaccineerd of getest bent kan je verder helpen. Neem contact op en geef door dat de CoronaCheck-app geen BSN gevonden heeft.
      ///
      /// Locales: en, nl
      static let holderErrorstateNobsnMessage = Rswift.StringResource(key: "holder.errorstate.nobsn.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Demo QR-code gescand
      ///
      /// Locales: en, nl
      static let verifierResultAccessAccessibilityDemo = Rswift.StringResource(key: "verifier.result.access.accessibility.demo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Demo QR-code gescand
      ///
      /// Locales: en, nl
      static let verifierResultDemoTitle = Rswift.StringResource(key: "verifier.result.demo.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let general_details = Rswift.StringResource(key: "general_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderDccRecoveryDetailsTitle = Rswift.StringResource(key: "holder.dcc.recovery.details.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderDccTestDetailsTitle = Rswift.StringResource(key: "holder.dcc.test.details.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderDccVaccinationDetailsTitle = Rswift.StringResource(key: "holder.dcc.vaccination.details.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderEventAboutTitle = Rswift.StringResource(key: "holder.event.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderEventDetails = Rswift.StringResource(key: "holder.event.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details
      ///
      /// Locales: en, nl
      static let holderShowqrDetails = Rswift.StringResource(key: "holder.showqr.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details Nederlandse QR-code
      ///
      /// Locales: en, nl
      static let holder_showqr_domestic_accessibility_button_details = Rswift.StringResource(key: "holder_showqr_domestic_accessibility_button_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Details internationale QR-code
      ///
      /// Locales: en, nl
      static let holder_showqr_international_accessibility_button_details = Rswift.StringResource(key: "holder_showqr_international_accessibility_button_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze QR-code bevat geen coronabewijs
      ///
      /// Locales: en, nl
      static let verifierResultAlertUnknownTitle = Rswift.StringResource(key: "verifier.result.alert.unknown.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze QR-code heb je waarschijnlijk niet nodig, want je hebt een nieuwere dosis.
      ///
      /// Locales: en, nl
      static let holder_showQR_label_newerQRAvailable = Rswift.StringResource(key: "holder_showQR_label_newerQRAvailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze QR-code is niet meer geldig
      ///
      /// Locales: en, nl
      static let holder_showQR_label_expiredQR = Rswift.StringResource(key: "holder_showQR_label_expiredQR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze code is niet geldig. Een code ziet er bijvoorbeeld zo uit: BRB-YYYYYYYYY1-Z2.
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowErrorInvalidCode = Rswift.StringResource(key: "holder.tokenentry.regularflow.error.invalid.code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze code is niet geldig. Een code ziet er bijvoorbeeld zo uit: VAC-YYYYYYYYY1-F2.
      ///
      /// Locales: en, nl
      static let visitorpass_token_error_invalid_code = Rswift.StringResource(key: "visitorpass_token_error_invalid_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze e-mail is automatisch opgesteld met alle gegevens die wij nodig hebben. We vragen je geen extra informatie toe te voegen. Wij ontvangen bij verzending je e-mailadres, samen met informatie over het technische probleem. Deze gegevens zullen zo snel mogelijk worden verwijderd.  Dit bericht is bedoeld voor het CoronaCheck ontwikkelteam. Het probleem zal zo snel mogelijk opgelost worden.  Een onoplosbaar probleem heeft plaatsgevonden in CoronaCheck %@ %@ version %@ (%@).  ----------- Probleem details: 	Bericht: %@ 	Meer informatie: %@ -----------
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_email_body = Rswift.StringResource(key: "general_unrecoverableError_email_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze gegevens horen bij de naam <b>%@</b>
      ///
      /// Locales: en, nl
      static let holder_identitySelection_details_body = Rswift.StringResource(key: "holder_identitySelection_details_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze gegevens verwijderen?
      ///
      /// Locales: en, nl
      static let holder_storedEvent_alert_removeEvents_title = Rswift.StringResource(key: "holder_storedEvent_alert_removeEvents_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze lettercombinatie en QR-code horen niet bij elkaar.
      ///
      /// Locales: en, nl
      static let holderCheckdccRejectedMessage = Rswift.StringResource(key: "holder.checkdcc.rejected.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze lettercombinatie is niet geldig. Een combinatie ziet er bijvoorbeeld zo uit: FLBRXQ.
      ///
      /// Locales: en, nl
      static let holderDcctokenentryErrorInvalidcode = Rswift.StringResource(key: "holder.dcctokenentry.error.invalidcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowErrorUnknownprovider = Rswift.StringResource(key: "holder.tokenentry.regularflow.error.unknownprovider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static let visitorpass_token_error_unknown_provider = Rswift.StringResource(key: "visitorpass_token_error_unknown_provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze testuitslag is opgehaald bij de testlocatie. Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static let holderTestresultsResultsText = Rswift.StringResource(key: "holder.testresults.results.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze testuitslag is opgehaald bij de testlocatie. Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_negativeTest_message = Rswift.StringResource(key: "holder_listRemoteEvents_negativeTest_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Deze wordt verwijderd
      ///
      /// Locales: en, nl
      static let holder_identitySelection_error_willBeRemoved = Rswift.StringResource(key: "holder_identitySelection_error_willBeRemoved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: DigiD aanvragen
      ///
      /// Locales: en, nl
      static let holder_noDigiD_buttonTitle_requestDigiD = Rswift.StringResource(key: "holder_noDigiD_buttonTitle_requestDigiD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dit bewijs staat al in de app
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateDuplicate_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateDuplicate_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dit bewijs wordt nu niet gebruikt in Nederland
      ///
      /// Locales: en, nl
      static let holder_dashboard_domesticQRCard_3G_inactive_label = Rswift.StringResource(key: "holder_dashboard_domesticQRCard_3G_inactive_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dit papieren bewijs is verlopen
      ///
      /// Locales: en, nl
      static let holderCheckdccExpiredTitle = Rswift.StringResource(key: "holder.checkdcc.expired.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Doe ik later
      ///
      /// Locales: en, nl
      static let recommendedUpdateAppActionCancel = Rswift.StringResource(key: "recommended.updateApp.action.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Door een storing bij een van de partijen kunnen er gegevens ontbreken. Probeer het eventueel later nog een keer.
      ///
      /// Locales: en, nl
      static let holderFetcheventsWarningSomeresultsNetworkerrorMessage = Rswift.StringResource(key: "holder.fetchevents.warning.someresults.networkerror.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Door een storing bij een van de partijen kunnen er gegevens ontbreken. Probeer het later nog een keer.
      ///
      /// Locales: en, nl
      static let holderFetcheventsWarningSomeresultsNetworkwasbusyMessage = Rswift.StringResource(key: "holder.fetchevents.warning.someresults.networkwasbusy.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Door een storing of drukte zijn mogelijk niet al jouw gegevens opgehaald. Mist er een vaccinatie? Kom later terug en haal opnieuw je gegevens op.
      ///
      /// Locales: en, nl
      static let holderErrorstateSomeresultMessage = Rswift.StringResource(key: "holder.errorstate.someresult.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Doorgaan zonder DigiD
      ///
      /// Locales: en, nl
      static let holder_noDigiD_buttonTitle_continueWithoutDigiD = Rswift.StringResource(key: "holder_noDigiD_buttonTitle_continueWithoutDigiD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis %@ van %@ / Dose %@ of %@
      ///
      /// Locales: en, nl
      static let holderVaccinationAboutOffDcc = Rswift.StringResource(key: "holder.vaccination.about.off.dcc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis %@/%@
      ///
      /// Locales: en, nl
      static let holderDashboardQrEuVaccinecertificatedoses = Rswift.StringResource(key: "holder.dashboard.qr.eu.vaccinecertificatedoses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis %@/%@
      ///
      /// Locales: en, nl
      static let holderShowqrQrEuVaccinecertificatedoses = Rswift.StringResource(key: "holder.showqr.qr.eu.vaccinecertificatedoses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis / Number in series of doses:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationDosage = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.dosage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationDosage = Rswift.StringResource(key: "holder.dcc.vaccination.dosage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Dosis:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationDosage = Rswift.StringResource(key: "holder.event.about.vaccination.dosage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Download de laatste versie van de app om verder te gaan.
      ///
      /// Locales: en, nl
      static let holder_updateApp_content = Rswift.StringResource(key: "holder_updateApp_content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een Nederlands en internationaal tabblad
      ///
      /// Locales: en, nl
      static let holderUpdatepageTitleTab = Rswift.StringResource(key: "holder.updatepage.title.tab", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een QR-code maken
      ///
      /// Locales: en, nl
      static let holderAboutmakingaqrHeader = Rswift.StringResource(key: "holder.aboutmakingaqr.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een andere zorgverlener
      ///
      /// Locales: en, nl
      static let holder_chooseEventLocation_buttonTitle_other = Rswift.StringResource(key: "holder_chooseEventLocation_buttonTitle_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een bezoekersbewijs toevoegen
      ///
      /// Locales: en, nl
      static let visitorpass_start_title = Rswift.StringResource(key: "visitorpass_start_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een coronabewijs inscannen
      ///
      /// Locales: en, nl
      static let holder_paperproof_startscanning_title = Rswift.StringResource(key: "holder_paperproof_startscanning_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een schermafbeelding is geen geldig bewijs
      ///
      /// Locales: en, nl
      static let holderShowqrScreenshotwarningTitle = Rswift.StringResource(key: "holder.showqr.screenshotwarning.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een schermafbeelding is geen geldig toegangsbewijs
      ///
      /// Locales: en, nl
      static let holderEnlargedScreenshotTitle = Rswift.StringResource(key: "holder.enlarged.screenshot.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Een schermafbeelding zorgt voor problemen bij het scannen. Alleen de QR-code in de app is een geldig toegangsbewijs.
      ///
      /// Locales: en, nl
      static let holderEnlargedScreenshotMessage = Rswift.StringResource(key: "holder.enlarged.screenshot.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Eind van lijst.
      ///
      /// Locales: en, nl
      static let generalListAccessibilityEnd = Rswift.StringResource(key: "general.list.accessibility.end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er gaat iets mis. Sluit CoronaCheck helemaal af en start de app opnieuw op.
      ///
      /// Locales: en, nl
      static let holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen = Rswift.StringResource(key: "holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er is alleen een herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryOnly_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryOnly_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er is alleen een internationaal bewijs gemaakt
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateInternationalQROnly_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateInternationalQROnly_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er is een herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er is een technisch probleem met de laatste update van CoronaCheck. Rapporteer dit probleem zodat we het zo snel mogelijk kunnen oplossen.
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_sendCrashReport_message = Rswift.StringResource(key: "general_unrecoverableError_sendCrashReport_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er klopt iets niet
      ///
      /// Locales: en, nl
      static let verifierResultAccessReadmore = Rswift.StringResource(key: "verifier.result.access.readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er klopt iets niet
      ///
      /// Locales: en, nl
      static let verifierResultCheckTitle = Rswift.StringResource(key: "verifier.result.check.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er worden <b>geen locatiegegevens</b> gebruikt of bewaard
      ///
      /// Locales: en, nl
      static let holderConsentItem2 = Rswift.StringResource(key: "holder.consent.item.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er worden <b>geen locatiegegevens</b> gebruikt of bewaard
      ///
      /// Locales: en, nl
      static let verifierConsentItem1 = Rswift.StringResource(key: "verifier.consent.item.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn beveiligingsrisico’s gevonden
      ///
      /// Locales: en, nl
      static let holderDeviceAuthenticationWarningTitle = Rswift.StringResource(key: "holder.device.authentication.warning.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn beveiligingsrisico’s gevonden
      ///
      /// Locales: en, nl
      static let jailbrokenTitle = Rswift.StringResource(key: "jailbroken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn gegevens uit de app verwijderd.
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_banner_title = Rswift.StringResource(key: "holder_invaliddetailsremoved_banner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn nu veel bezoekers op de server van de GGD. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorMessageToobusy = Rswift.StringResource(key: "holder.vaccination.error.message.toobusy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn nu veel bezoekers op de server van de GGD. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorTitleToobusy = Rswift.StringResource(key: "holder.vaccination.error.title.toobusy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn ongeldige vaccinatie- of testgegevens van jou gevonden. Deze zijn uit de app verwijderd. Mogelijk zijn hierdoor ook bewijzen weggehaald.
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_alert_body = Rswift.StringResource(key: "holder_invaliddetailsremoved_alert_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Er zijn weer bewijzen voor in Nederland en het buitenland. Gebruik je Nederlandse bewijs voor toegang tot plekken en activiteiten in Nederland. Ga je de grens over of ben je in het buitenland? Gebruik dan je internationale bewijs.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_dutchAndInternationalCertificates_body = Rswift.StringResource(key: "holder_newintheapp_content_dutchAndInternationalCertificates_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: FEB
      ///
      /// Locales: en, nl
      static let holderTestresultsFebruary = Rswift.StringResource(key: "holder.testresults.february", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Facility approved by the State of The Netherlands
      ///
      /// Locales: en, nl
      static let holderDccListFacility = Rswift.StringResource(key: "holder.dcc.list.facility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Fout op de server
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredServererrorAlertTitle = Rswift.StringResource(key: "holder.dashboard.strippen.expired.servererror.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static let holderLocationGgdTitle = Rswift.StringResource(key: "holder.location.ggd.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static let holderProviderGgdTitle = Rswift.StringResource(key: "holder.provider.ggd.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static let holder_chooseEventLocation_buttonTitle_GGD = Rswift.StringResource(key: "holder_chooseEventLocation_buttonTitle_GGD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ga akkoord om verder te kunnen
      ///
      /// Locales: en, nl
      static let verifierConsentButtonError = Rswift.StringResource(key: "verifier.consent.button.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ga je naar een land waar een coronabewijs nodig is? Controleer altijd voor vertrek of je het goede bewijs hebt.
      ///
      /// Locales: en, nl
      static let holder_dashboard_filledState_international_0G_message = Rswift.StringResource(key: "holder_dashboard_filledState_international_0G_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ga je naar het buitenland? Controleer altijd voor vertrek of je een coronabewijs nodig hebt.
      ///
      /// Locales: en, nl
      static let holder_dashboard_emptyState_international_0G_message = Rswift.StringResource(key: "holder_dashboard_emptyState_international_0G_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedag
      ///
      /// Locales: en, nl
      static let verifierResultIdentityDayofbirth = Rswift.StringResource(key: "verifier.result.identity.dayofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryDateofbirth = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestDateofbirth = Rswift.StringResource(key: "holder.showqr.eu.about.test.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationDateofbirth = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryDateofbirth = Rswift.StringResource(key: "holder.dcc.recovery.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderDccTestDateofbirth = Rswift.StringResource(key: "holder.dcc.test.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationDateofbirth = Rswift.StringResource(key: "holder.dcc.vaccination.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryDateofbirth = Rswift.StringResource(key: "holder.event.about.recovery.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestDateofbirth = Rswift.StringResource(key: "holder.event.about.test.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationDateofbirth = Rswift.StringResource(key: "holder.event.about.vaccination.dateofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_date_of_birth = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_date_of_birth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortedatum: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_birthDate = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_birthDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geboortemaand
      ///
      /// Locales: en, nl
      static let verifierResultIdentityMonthofbirth = Rswift.StringResource(key: "verifier.result.identity.monthofbirth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gebruik de QR-code in de app
      ///
      /// Locales: en, nl
      static let holderShowqrScreenshotwarningSubtitle = Rswift.StringResource(key: "holder.showqr.screenshotwarning.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gebruikersvoorwaarden
      ///
      /// Locales: en, nl
      static let verifierMenuPrivacy = Rswift.StringResource(key: "verifier.menu.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geef aan waar je bent getest om een bewijs te maken van je positieve of negatieve testuitslag.
      ///
      /// Locales: en, nl
      static let holder_whereUserTested_body = Rswift.StringResource(key: "holder_whereUserTested_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geef aan wat je wilt toevoegen aan je bewijs.
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeMessage = Rswift.StringResource(key: "holder.chooseqrcodetype.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geef ons feedback
      ///
      /// Locales: en, nl
      static let holderMenuFeedback = Rswift.StringResource(key: "holder.menu.feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen BSN gevonden
      ///
      /// Locales: en, nl
      static let holderErrorstateNobsnTitle = Rswift.StringResource(key: "holder.errorstate.nobsn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen Nederlands herstelbewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenDomesticRecoveryTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.domestic.recovery.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen Nederlands testbewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenDomesticTestTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.domestic.test.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen Nederlands vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenDomesticVaccinationTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.domestic.vaccination.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen Nederlands vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let holderIncompletedutchvaccinationTitle = Rswift.StringResource(key: "holder.incompletedutchvaccination.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen bewijzen gescand
      ///
      /// Locales: en, nl
      static let scan_log_list_no_items = Rswift.StringResource(key: "scan_log_list_no_items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen gegevens opgeslagen
      ///
      /// Locales: en, nl
      static let holder_storedEvents_list_noEvents = Rswift.StringResource(key: "holder_storedEvents_list_noEvents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen geldig bewijs
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateNoValidCertificate_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateNoValidCertificate_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen geldige QR-code
      ///
      /// Locales: en, nl
      static let verifierResultDeniedTitle = Rswift.StringResource(key: "verifier.result.denied.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen geldige combinatie
      ///
      /// Locales: en, nl
      static let holderCheckdccRejectedTitle = Rswift.StringResource(key: "holder.checkdcc.rejected.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen geldige combinatie. Vul de 6-cijferige verificatiecode in.
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowErrorInvalidCombination = Rswift.StringResource(key: "holder.tokenentry.regularflow.error.invalid.combination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen geldige combinatie. Vul de 6-cijferige verificatiecode in.
      ///
      /// Locales: en, nl
      static let visitorpass_token_error_invalid_combination = Rswift.StringResource(key: "visitorpass_token_error_invalid_combination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen internationaal herstelbewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuRecoveryTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.recovery.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen internationaal testbewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuTestTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.test.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen internationaal vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let holderDashboardNotValidInThisRegionScreenEuVaccinationTitle = Rswift.StringResource(key: "holder.dashboard.notValidInThisRegionScreen.eu.vaccination.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen internetverbinding
      ///
      /// Locales: en, nl
      static let generalErrorNointernetTitle = Rswift.StringResource(key: "general.error.nointernet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen lettercombinatie?
      ///
      /// Locales: en, nl
      static let holderDcctokenentryButtonNotoken = Rswift.StringResource(key: "holder.dcctokenentry.button.notoken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen lettercombinatie?
      ///
      /// Locales: en, nl
      static let holderDcctokenentryinfoTitle = Rswift.StringResource(key: "holder.dcctokenentryinfo.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen positieve testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static let holderRecoveryNolistTitle = Rswift.StringResource(key: "holder.recovery.nolist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static let holderEventNolistTitle = Rswift.StringResource(key: "holder.event.nolist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static let holderTestNolistTitle = Rswift.StringResource(key: "holder.test.nolist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen toegang tot camera
      ///
      /// Locales: en, nl
      static let holder_scanner_permission_title = Rswift.StringResource(key: "holder_scanner_permission_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen vaccinatiebeoordeling beschikbaar
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_nolist_title = Rswift.StringResource(key: "holder_event_vaccination_assessment_nolist_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen vaccinaties beschikbaar
      ///
      /// Locales: en, nl
      static let holderVaccinationNolistTitle = Rswift.StringResource(key: "holder.vaccination.nolist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowConfirmresendverificationalertTitle = Rswift.StringResource(key: "holder.tokenentry.regularflow.confirmresendverificationalert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowRetryTitle = Rswift.StringResource(key: "holder.tokenentry.regularflow.retry.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowConfirmresendverificationalertTitle = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.confirmresendverificationalert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowRetryTitle = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.retry.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens bijwerken
      ///
      /// Locales: en, nl
      static let holder_identitySelection_loading_title = Rswift.StringResource(key: "holder_identitySelection_loading_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens kloppen
      ///
      /// Locales: en, nl
      static let verifierResultAccessIdentityverified = Rswift.StringResource(key: "verifier.result.access.identityverified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens kunnen wegvallen om de privacy van de bezoeker te beschermen. Je ziet dan een streepje (-) staan. Controleer in dat geval alleen de gegevens die je wel ziet.
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsCheckonlythevisibledataMessage = Rswift.StringResource(key: "verifier.scaninstructions.checkonlythevisibledata.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens mogelijk niet compleet
      ///
      /// Locales: en, nl
      static let holderFetcheventsWarningSomeresultsNetworkerrorTitle = Rswift.StringResource(key: "holder.fetchevents.warning.someresults.networkerror.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens mogelijk niet compleet
      ///
      /// Locales: en, nl
      static let holderFetcheventsWarningSomeresultsNetworkwasbusyTitle = Rswift.StringResource(key: "holder.fetchevents.warning.someresults.networkwasbusy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens opgehaald bij: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_retrievedFrom_single = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_retrievedFrom_single", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens opgehaald bij: %@ en %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_retrievedFrom_plural = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_retrievedFrom_plural", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens ophalen
      ///
      /// Locales: en, nl
      static let holder_fetchRemoteEvents_title = Rswift.StringResource(key: "holder_fetchRemoteEvents_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens van de bezoeker worden <b>nergens centraal opgeslagen</b> 
      ///
      /// Locales: en, nl
      static let verifierConsentItem3 = Rswift.StringResource(key: "verifier.consent.item.3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens van je herstel ophalen
      ///
      /// Locales: en, nl
      static let holderRecoveryStartTitle = Rswift.StringResource(key: "holder.recovery.start.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens van je test ophalen
      ///
      /// Locales: en, nl
      static let holder_negativetest_ggd_title = Rswift.StringResource(key: "holder_negativetest_ggd_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens van je vaccinatie ophalen
      ///
      /// Locales: en, nl
      static let holder_addVaccination_title = Rswift.StringResource(key: "holder_addVaccination_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gegevens verwijderen
      ///
      /// Locales: en, nl
      static let holder_storedEvents_eraseEvents_title = Rswift.StringResource(key: "holder_storedEvents_eraseEvents_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig tot / Valid to*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryValiduntil = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.validuntil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig tot:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryValiduntil = Rswift.StringResource(key: "holder.dcc.recovery.validuntil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig tot:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryValiduntil = Rswift.StringResource(key: "holder.event.about.recovery.validuntil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig vanaf / Valid from*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryValidfrom = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.validfrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig vanaf:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryValidfrom = Rswift.StringResource(key: "holder.dcc.recovery.validfrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldig vanaf:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryValidfrom = Rswift.StringResource(key: "holder.event.about.recovery.validfrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Geldige QR-code gescand
      ///
      /// Locales: en, nl
      static let verifierResultAccessAccessibilityVerified = Rswift.StringResource(key: "verifier.result.access.accessibility.verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gescande gegevens
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_paperflow_title = Rswift.StringResource(key: "holder_listRemoteEvents_paperflow_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in / Tested in:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryCountry = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in / Tested in:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestCountry = Rswift.StringResource(key: "holder.showqr.eu.about.test.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryCountry = Rswift.StringResource(key: "holder.dcc.recovery.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static let holderDccTestCountry = Rswift.StringResource(key: "holder.dcc.test.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static let holder_event_about_recovery_countrytestedin = Rswift.StringResource(key: "holder_event_about_recovery_countrytestedin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static let holder_event_about_test_countrytestedin = Rswift.StringResource(key: "holder_event_about_test_countrytestedin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gevaccineerd in (land):
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_country = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gevaccineerd in / Vaccinated in:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationCountry = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gevaccineerd in:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationCountry = Rswift.StringResource(key: "holder.dcc.vaccination.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Gevaccineerd in:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationCountry = Rswift.StringResource(key: "holder.event.about.vaccination.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een beoordelingscode invullen
      ///
      /// Locales: en, nl
      static let visitorpass_token_error_empty_token = Rswift.StringResource(key: "visitorpass_token_error_empty_token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een keuze maken
      ///
      /// Locales: en, nl
      static let holder_identitySelection_error_makeAChoice = Rswift.StringResource(key: "holder_identitySelection_error_makeAChoice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een lettercombinatie invullen
      ///
      /// Locales: en, nl
      static let holderDcctokenentryErrorEmptycode = Rswift.StringResource(key: "holder.dcctokenentry.error.emptycode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een ophaalcode invullen
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowErrorEmptytoken = Rswift.StringResource(key: "holder.tokenentry.regularflow.error.emptytoken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een ophaalcode invullen
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowErrorEmptytoken = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.error.emptytoken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een verificatiecode invullen
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowErrorEmptycode = Rswift.StringResource(key: "holder.tokenentry.regularflow.error.emptycode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Graag eerst een verificatiecode invullen
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowErrorEmptycode = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.error.emptycode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Groen scherm = toegang
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsGreenScreenIsAccessTitle = Rswift.StringResource(key: "verifier.scaninstructions.greenScreenIsAccess.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Haal ook mijn positieve testuitslag op
      ///
      /// Locales: en, nl
      static let holder_addVaccine_alsoCollectPositiveTestResults_checkbox = Rswift.StringResource(key: "holder_addVaccine_alsoCollectPositiveTestResults_checkbox", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je corona gehad? Dan kun je van de positieve testuitslag een herstelbewijs maken. Log in met DigiD om een testuitslag op te halen.
      ///
      /// Locales: en, nl
      static let holderRecoveryStartMessage = Rswift.StringResource(key: "holder.recovery.start.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je een coronabewijs met QR-code van een test of vaccinatie uit het buitenland? Dan kun je jouw bewijs nu toevoegen aan CoronaCheck. Kies in het menu voor “Coronabewijs inscannen”.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_foreignproofs_body = Rswift.StringResource(key: "holder_newintheapp_foreignproofs_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen DigiD?
      ///
      /// Locales: en, nl
      static let holderVaccinationStartNodigid = Rswift.StringResource(key: "holder.vaccination.start.nodigid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen beoordelingscode?
      ///
      /// Locales: en, nl
      static let visitorpass_code_review_button = Rswift.StringResource(key: "visitorpass_code_review_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen beoordelingscode?
      ///
      /// Locales: en, nl
      static let visitorpass_token_modal_notoken_title = Rswift.StringResource(key: "visitorpass_token_modal_notoken_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen lettercombinatie?
      ///
      /// Locales: en, nl
      static let holderPaperproofNotokenTitle = Rswift.StringResource(key: "holder.paperproof.notoken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen ophaalcode?
      ///
      /// Locales: en, nl
      static let holderTokenentryButtonNotoken = Rswift.StringResource(key: "holder.tokenentry.button.notoken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je geen ophaalcode?
      ///
      /// Locales: en, nl
      static let holderTokenentryModalNotokenTitle = Rswift.StringResource(key: "holder.tokenentry.modal.notoken.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Heb je wel een Nederlands burgerservicenummer (BSN)?
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_title = Rswift.StringResource(key: "holder_checkForBSN_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het bewijs dat je probeert toe te voegen staat al in de app. Je hoeft het niet nog een keer te scannen.
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateDuplicate_message = Rswift.StringResource(key: "holder_listRemoteEvents_endStateDuplicate_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is druk of er is een storing bij een aangesloten partij. Daardoor kunnen je gegevens nu niet worden opgehaald. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static let holderFetcheventsErrorNoresultsNetworkwasbusyMessage = Rswift.StringResource(key: "holder.fetchevents.error.noresults.networkwasbusy.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt de server te bereiken. Wil je controleren of je verbinding met het internet hebt?
      ///
      /// Locales: en, nl
      static let generalErrorServerUnreachable = Rswift.StringResource(key: "general.error.server.unreachable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt om de %@ op te halen. Probeer het nog eens.
      ///
      /// Locales: en, nl
      static let holderFetcheventsErrorNoresultsNetworkerrorMessage = Rswift.StringResource(key: "holder.fetchevents.error.noresults.networkerror.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt om de vaccinatie op te halen. Probeer het nog eens.
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorMessage = Rswift.StringResource(key: "holder.vaccination.error.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt om je testuitslag op te halen. Probeer opnieuw je bewijs te krijgen via de GGD.
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_portal_message_testFlow = Rswift.StringResource(key: "holder_authentication_popup_portal_message_testFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt om je vaccinatiegegevens op te halen. Probeer opnieuw je bewijs te regelen via de GGD.
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_portal_message_vaccinationFlow = Rswift.StringResource(key: "holder_authentication_popup_portal_message_vaccinationFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Het is niet gelukt omdat de opslag van je telefoon vol zit. Maak ruimte vrij op je telefoon en probeer het opnieuw.
      ///
      /// Locales: en, nl
      static let general_diskFull_body = Rswift.StringResource(key: "general_diskFull_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hier komt jouw Nederlandse bewijs
      ///
      /// Locales: en, nl
      static let holderDashboardEmptyDomesticTitle = Rswift.StringResource(key: "holder.dashboard.empty.domestic.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hier komt jouw internationale bewijs
      ///
      /// Locales: en, nl
      static let holderDashboardEmptyInternationalTitle = Rswift.StringResource(key: "holder.dashboard.empty.international.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je gegevens ophalen.
      ///
      /// Locales: en, nl
      static let holder_vaccination_alert_message = Rswift.StringResource(key: "holder_vaccination_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static let holderTestresultsAlertMessage = Rswift.StringResource(key: "holder.testresults.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static let holder_recovery_alert_message = Rswift.StringResource(key: "holder_recovery_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static let holder_test_alert_message = Rswift.StringResource(key: "holder_test_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hierdoor stop je het toevoegen van je vaccinatiebeoordeling en moet je later opnieuw je gegevens ophalen.
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_alert_message = Rswift.StringResource(key: "holder_event_vaccination_assessment_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hoe gaat CoronaCheck met gegevens om?
      ///
      /// Locales: en, nl
      static let holder_storedEvents_button_handleData = Rswift.StringResource(key: "holder_storedEvents_button_handleData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Hoe het werkt
      ///
      /// Locales: en, nl
      static let verifierMenuScaninstructions = Rswift.StringResource(key: "verifier.menu.scaninstructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Identificatiegegevens: %@
      ///
      /// Locales: en, nl
      static let holderTestresultsIdentity = Rswift.StringResource(key: "holder.testresults.identity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ik heb de gebruikersvoorwaarden gelezen en ga hiermee akkoord.
      ///
      /// Locales: en, nl
      static let verifierConsentButton = Rswift.StringResource(key: "verifier.consent.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ik heb de privacyverklaring gelezen en begrijp hoe de app met mijn gegevens omgaat.
      ///
      /// Locales: en, nl
      static let holderConsentButton = Rswift.StringResource(key: "holder.consent.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ik heb een (booster)vaccinatie gehad
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionVaccineSubtitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.vaccine.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ik heb geen DigiD
      ///
      /// Locales: en, nl
      static let holder_noDigiD_title = Rswift.StringResource(key: "holder_noDigiD_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ik heb geen code gekregen
      ///
      /// Locales: en, nl
      static let holderDcctokenentryRetryTitle = Rswift.StringResource(key: "holder.dcctokenentry.retry.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: In Nederland wordt het coronabewijs niet meer gebruikt. Daarom staan er alleen nog internationale bewijzen in de app.
      ///
      /// Locales: en, nl
      static let holder_dashboard_noDomesticCertificatesBanner_0G_title = Rswift.StringResource(key: "holder_dashboard_noDomesticCertificatesBanner_0G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: In Nederland wordt het coronatoegangsbewijs niet meer gebruikt. Nederlandse bewijzen zijn daarom uit de app gehaald. Voor reizen in het buitenland zijn gewoon nog internationale bewijzen te maken en te gebruiken.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_onlyInternationalCertificates_0G_body = Rswift.StringResource(key: "holder_newintheapp_content_onlyInternationalCertificates_0G_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryDescription = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestDescription = Rswift.StringResource(key: "holder.showqr.eu.about.test.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationDescription = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ingescand bewijs
      ///
      /// Locales: en, nl
      static let holder_identitySelection_details_scannedPaperProof = Rswift.StringResource(key: "holder_identitySelection_details_scannedPaperProof", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ingescand bewijs
      ///
      /// Locales: en, nl
      static let holder_storedEvents_listHeader_paperFlow = Rswift.StringResource(key: "holder_storedEvents_listHeader_paperFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Inloggen afgebroken
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_digid_title = Rswift.StringResource(key: "holder_authentication_popup_digid_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Installeer update
      ///
      /// Locales: en, nl
      static let holder_updateApp_button = Rswift.StringResource(key: "holder_updateApp_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Installeer update
      ///
      /// Locales: en, nl
      static let verifier_updateApp_button = Rswift.StringResource(key: "verifier_updateApp_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Instellen
      ///
      /// Locales: en, nl
      static let verifier_risksetting_setting_button = Rswift.StringResource(key: "verifier_risksetting_setting_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Instellingen
      ///
      /// Locales: en, nl
      static let holderMenuSettings = Rswift.StringResource(key: "holder.menu.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal
      ///
      /// Locales: en, nl
      static let generalEuropean = Rswift.StringResource(key: "general.european", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal
      ///
      /// Locales: en, nl
      static let generalEuropeanUnion = Rswift.StringResource(key: "general.europeanUnion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal bewijs
      ///
      /// Locales: en, nl
      static let verifierResultAccessDcc = Rswift.StringResource(key: "verifier.result.access.dcc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal herstelbewijs
      ///
      /// Locales: en, nl
      static let general_recoverycertificate_0G = Rswift.StringResource(key: "general_recoverycertificate_0G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal testbewijs
      ///
      /// Locales: en, nl
      static let general_testcertificate_0G = Rswift.StringResource(key: "general_testcertificate_0G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationaal vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let general_vaccinationcertificate_0G = Rswift.StringResource(key: "general_vaccinationcertificate_0G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Internationale QR
      ///
      /// Locales: en, nl
      static let holderShowqrEuTitle = Rswift.StringResource(key: "holder.showqr.eu.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Is dit de laatste dosis van je vaccinatie?
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationCompletionreason = Rswift.StringResource(key: "holder.event.about.vaccination.completionreason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Is een bewijs nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static let holder_dashboard_international_0G_action_certificateNeeded = Rswift.StringResource(key: "holder_dashboard_international_0G_action_certificateNeeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Is je uitslag bekend? Log in met DigiD om je testuitslag bij de GGD op te halen.
      ///
      /// Locales: en, nl
      static let holder_negativetest_ggd_message = Rswift.StringResource(key: "holder_negativetest_ggd_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: JAN
      ///
      /// Locales: en, nl
      static let holderTestresultsJanuary = Rswift.StringResource(key: "holder.testresults.january", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: JUL
      ///
      /// Locales: en, nl
      static let holderTestresultsJuly = Rswift.StringResource(key: "holder.testresults.july", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: JUN
      ///
      /// Locales: en, nl
      static let holderTestresultsJune = Rswift.StringResource(key: "holder.testresults.june", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, aanpassen
      ///
      /// Locales: en, nl
      static let verifier_risksetting_confirmation_dialog_positive_button = Rswift.StringResource(key: "verifier_risksetting_confirmation_dialog_positive_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, getest voor of op %@
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_yes_buttonTitle = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_yes_buttonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, ik heb een BSN
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_buttonTitle_doesHaveBSN = Rswift.StringResource(key: "holder_checkForBSN_buttonTitle_doesHaveBSN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, overslaan
      ///
      /// Locales: en, nl
      static let holder_identitySelection_skipAlert_action = Rswift.StringResource(key: "holder_identitySelection_skipAlert_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, terug
      ///
      /// Locales: en, nl
      static let holderTestresultsAlertOk = Rswift.StringResource(key: "holder.testresults.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ja, terug
      ///
      /// Locales: en, nl
      static let holderVaccinationAlertStop = Rswift.StringResource(key: "holder.vaccination.alert.stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je %@ is niet internationaal geldig. Je hebt wel een Nederlands bewijs.
      ///
      /// Locales: en, nl
      static let holderDashboardOriginNotValidInEUButIsInTheNetherlands = Rswift.StringResource(key: "holder.dashboard.originNotValidInEUButIsInTheNetherlands", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je Nederlandse QR-code wordt hier getoond
      ///
      /// Locales: en, nl
      static let holderShowqrDomesticQrTitle = Rswift.StringResource(key: "holder.showqr.domestic.qr.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je Nederlandse herstelbewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_domesticRecovery_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_domesticRecovery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je Nederlandse testbewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_domesticTest_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_domesticTest_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je Nederlandse vaccinatiebewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_domesticVaccine_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_domesticVaccine_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je QR-code komt terug in %@
      ///
      /// Locales: en, nl
      static let holderShowqrScreenshotwarningMessage = Rswift.StringResource(key: "holder.showqr.screenshotwarning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bent nu niet verbonden met het internet.
      ///
      /// Locales: en, nl
      static let generalErrorNointernetText = Rswift.StringResource(key: "general.error.nointernet.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bewijs heeft een QR-code
      ///
      /// Locales: en, nl
      static let holderOnboardingTitleValidity = Rswift.StringResource(key: "holder.onboarding.title.validity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bewijs heeft een QR-code
      ///
      /// Locales: en, nl
      static let holder_onboarding_content_onlyInternationalQR_0G_title = Rswift.StringResource(key: "holder_onboarding_content_onlyInternationalQR_0G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bewijs is verlopen.
      ///
      /// Locales: en, nl
      static let holderDashboardQrExpired = Rswift.StringResource(key: "holder.dashboard.qr.expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bezoekersbewijs is niet geldig buiten Nederland
      ///
      /// Locales: en, nl
      static let holder_dashboard_visitorPassInvalidOutsideNLBanner_title = Rswift.StringResource(key: "holder_dashboard_visitorPassInvalidOutsideNLBanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je bezoekersbewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_visitorPass_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_visitorPass_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je gegevens worden bijgewerkt
      ///
      /// Locales: en, nl
      static let holder_identitySelection_loading_accessibility = Rswift.StringResource(key: "holder_identitySelection_loading_accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je gegevens zijn bijgewerkt. Mogelijk zijn daardoor bewijzen weg.
      ///
      /// Locales: en, nl
      static let holder_identityRemoved_banner_title = Rswift.StringResource(key: "holder_identityRemoved_banner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt de laatste versie van de app nodig om verder te gaan.
      ///
      /// Locales: en, nl
      static let verifier_updateApp_content = Rswift.StringResource(key: "verifier_updateApp_content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt een internationale QR-code gescand. Gebruikers van CoronaCheck moeten in Nederland hun Nederlandse QR-code laten zien.
      ///
      /// Locales: en, nl
      static let verifierResultAlertDccMessage = Rswift.StringResource(key: "verifier.result.alert.dcc.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt geen Nederlands %@.
      ///
      /// Locales: en, nl
      static let holderDashboardOriginNotValidInNetherlandsButIsInEU = Rswift.StringResource(key: "holder.dashboard.originNotValidInNetherlandsButIsInEU", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt geen internetverbinding
      ///
      /// Locales: en, nl
      static let internetRequiredTitle = Rswift.StringResource(key: "internet.required.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt internet nodig om je QR-code te kunnen gebruiken.
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredErrorfooterNointernet = Rswift.StringResource(key: "holder.dashboard.strippen.expired.errorfooter.nointernet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt te lang gewacht. Voor de veiligheid ben je daarom uitgelogd. Log opnieuw in met DigiD om je gegevens op te halen.
      ///
      /// Locales: en, nl
      static let holderErrorstateNosessionMessage = Rswift.StringResource(key: "holder.errorstate.nosession.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hebt te vaak geprobeerd je code in te vullen. Probeer het over 5 minuten opnieuw.
      ///
      /// Locales: en, nl
      static let holder_inputRetrievalCode_error_blocked = Rswift.StringResource(key: "holder_inputRetrievalCode_error_blocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je hoeft je Nederlandse QR-code niet te scannen. Scan de QR-code op het internationale bewijs dat je van je zorgverlener of de overheid hebt gekregen. Hierin staan de gegevens die nodig zijn om je bewijs in de app te zetten. Je herkent dit bewijs aan de Europese vlag.
      ///
      /// Locales: en, nl
      static let holder_scanner_error_message_ctb = Rswift.StringResource(key: "holder_scanner_error_message_ctb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je internationale QR-code wordt automatisch geldig als de Europese regelgeving ingaat (vanaf %@).
      ///
      /// Locales: en, nl
      static let holderDashboardQrEulaunchcardfootermessage = Rswift.StringResource(key: "holder.dashboard.qr.eulaunchcardfootermessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je internationale QR-code wordt hier getoond
      ///
      /// Locales: en, nl
      static let holderShowqrEuQrTitle = Rswift.StringResource(key: "holder.showqr.eu.qr.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je internationale herstelbewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_internationalRecovery_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_internationalRecovery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je internationale testbewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_internationalTest_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_internationalTest_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je internationale vaccinatiebewijs is verlopen
      ///
      /// Locales: en, nl
      static let holder_dashboard_originExpiredBanner_internationalVaccine_title = Rswift.StringResource(key: "holder_dashboard_originExpiredBanner_internationalVaccine_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kan niet verder als je niet akkoord gaat
      ///
      /// Locales: en, nl
      static let newTermsErrorTitle = Rswift.StringResource(key: "new.terms.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je krijgt de verificatiecode via een sms of e-mail. Niks gekregen? Klik hieronder op ‘stuur opnieuw’ voor een nieuwe code.
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowConfirmresendverificationalertMessage = Rswift.StringResource(key: "holder.tokenentry.regularflow.confirmresendverificationalert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je krijgt de verificatiecode via een sms of e-mail. Niks gekregen? Klik hieronder op ‘stuur opnieuw’ voor een nieuwe code.
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowConfirmresendverificationalertMessage = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.confirmresendverificationalert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je krijgt een code via sms of e-mail
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowVerificationInfo = Rswift.StringResource(key: "holder.tokenentry.regularflow.verification.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je krijgt een code via sms of e-mail
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowVerificationInfo = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.verification.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt alleen toegang geven aan bezoekers met een testbewijs.
      ///
      /// Locales: en, nl
      static let verifier_risksetting_subtitle_1G = Rswift.StringResource(key: "verifier_risksetting_subtitle_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt de app al naar een nieuwere versie updaten
      ///
      /// Locales: en, nl
      static let recommended_update_card_description = Rswift.StringResource(key: "recommended_update_card_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt een bewijs voor 1G-toegang toevoegen wanneer je negatief getest bent
      ///
      /// Locales: en, nl
      static let holder_dashboard_only1GaccessBanner_title = Rswift.StringResource(key: "holder_dashboard_only1GaccessBanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt je QR-codes dan mogelijk niet gebruiken. De volgende keer dat je de app opstart vragen we opnieuw om een keuze te maken.
      ///
      /// Locales: en, nl
      static let holder_identitySelection_skipAlert_body = Rswift.StringResource(key: "holder_identitySelection_skipAlert_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt later opnieuw proberen deze QR-code in de app te zetten.
      ///
      /// Locales: en, nl
      static let holder_dcc_alert_message = Rswift.StringResource(key: "holder_dcc_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt nu makkelijker wisselen tussen je Nederlandse en internationale bewijs. Bovenin het scherm vind je een tabblad ‘Nederland’ en een tabblad ‘Internationaal’. Ga je de grens over? Gebruik dan de bewijzen onder ‘Internationaal’.
      ///
      /// Locales: en, nl
      static let holderUpdatepageContentTab = Rswift.StringResource(key: "holder.updatepage.content.tab", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt toegang geven aan bezoekers met een test-, vaccinatie- of herstelbewijs.
      ///
      /// Locales: en, nl
      static let verifier_risksetting_subtitle_3G = Rswift.StringResource(key: "verifier_risksetting_subtitle_3G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je kunt weer scannen over %@
      ///
      /// Locales: en, nl
      static let verifier_home_countdown_title = Rswift.StringResource(key: "verifier_home_countdown_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je mag gegevens van de bezoeker alleen gebruiken voor <b>controle van het bewijs</b>
      ///
      /// Locales: en, nl
      static let verifierConsentItem2 = Rswift.StringResource(key: "verifier.consent.item.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je moet %li minuten wachten omdat je tijdens het scannen jouw scan-instelling hebt aangepast.
      ///
      /// Locales: en, nl
      static let verifier_home_countdown_subtitle = Rswift.StringResource(key: "verifier_home_countdown_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je naam is niet hetzelfde geschreven
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_firstPage_title = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_firstPage_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je opslag is vol
      ///
      /// Locales: en, nl
      static let appstatus_diskfull_title = Rswift.StringResource(key: "appstatus_diskfull_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je opslag zit vol
      ///
      /// Locales: en, nl
      static let general_diskFull_title = Rswift.StringResource(key: "general_diskFull_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je sessie is gestopt
      ///
      /// Locales: en, nl
      static let holderErrorstateNosessionTitle = Rswift.StringResource(key: "holder.errorstate.nosession.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je vaccinatiebeoordeling is toegevoegd. Maak je bezoekersbewijs compleet met je negatieve coronatestuitslag
      ///
      /// Locales: en, nl
      static let holder_dashboard_visitorpassincompletebanner_title = Rswift.StringResource(key: "holder_dashboard_visitorpassincompletebanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Je vaccinaties worden opgehaald
      ///
      /// Locales: en, nl
      static let holderVaccinationLoadingTitle = Rswift.StringResource(key: "holder.vaccination.loading.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Jouw QR-code is gemaakt
      ///
      /// Locales: en, nl
      static let holderBannerNewqrTitle = Rswift.StringResource(key: "holder.banner.newqr.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Jouw gegevens worden <b>nergens centraal opgeslagen</b>
      ///
      /// Locales: en, nl
      static let holderConsentItem1 = Rswift.StringResource(key: "holder.consent.item.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Jouw gegevens: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_yourDetails = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_yourDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Jouw gezondheid en die van anderen is belangrijk. Laat daarom je coronabewijs zien om veilig toegang te krijgen tot plekken. Of als je op reis gaat.
      ///
      /// Locales: en, nl
      static let holderOnboardingMessageSafely = Rswift.StringResource(key: "holder.onboarding.message.safely", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Jouw locatie veilig open
      ///
      /// Locales: en, nl
      static let verifierOnboardingTitleSafely = Rswift.StringResource(key: "verifier.onboarding.title.safely", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kan je binnenkort verbinding maken met het internet?
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiringNointernetAlertTitle = Rswift.StringResource(key: "holder.dashboard.strippen.expiring.nointernet.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kenmerk %@ is %@
      ///
      /// Locales: en, nl
      static let verifierResultIdentityLabel = Rswift.StringResource(key: "verifier.result.identity.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Keuze opslaan
      ///
      /// Locales: en, nl
      static let holder_identitySelection_actionTitle = Rswift.StringResource(key: "holder_identitySelection_actionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kies %@
      ///
      /// Locales: en, nl
      static let holder_identitySelection_accessibility_select = Rswift.StringResource(key: "holder_identitySelection_accessibility_select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kies je scan-instelling
      ///
      /// Locales: en, nl
      static let verifier_risksetting_firsttimeuse_title = Rswift.StringResource(key: "verifier_risksetting_firsttimeuse_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kies straks één naam
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_secondPage_title = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_secondPage_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kies één manier waarop je naam is geschreven. Heb je vaccinaties of testuitslagen op andere namen staan? Dan worden die verwijderd.
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_secondPage_body = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_secondPage_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Klaar
      ///
      /// Locales: en, nl
      static let generalDone = Rswift.StringResource(key: "general.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kleurt je scherm groen met een vinkje? Dan is de QR-code geldig en kloppen de gegevens met het identiteitsbewijs. Je mag de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsGreenScreenIsAccessMessage = Rswift.StringResource(key: "verifier.scaninstructions.greenScreenIsAccess.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kleurt je scherm rood met een kruis? Dan krijg je uitleg om de bezoeker te helpen. Blijft het scherm rood? Dan mag je de bezoeker geen toegang geven.
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsRedscreennowwhatMessage = Rswift.StringResource(key: "verifier.scaninstructions.redscreennowwhat.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Kloppen de gegevens?
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_title = Rswift.StringResource(key: "holder_listRemoteEvents_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Klopt er iets niet?
      ///
      /// Locales: en, nl
      static let holderVaccinationListWrong = Rswift.StringResource(key: "holder.vaccination.list.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Klopt er iets niet?
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_somethingWrong_title = Rswift.StringResource(key: "holder_listRemoteEvents_somethingWrong_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Krijg je bewijs via de CoronaCheck helpdesk
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_buttonSubTitle_doesHaveBSN = Rswift.StringResource(key: "holder_checkForBSN_buttonSubTitle_doesHaveBSN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Krijg je bewijs via de GGD
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow = Rswift.StringResource(key: "holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Krijg je bewijs via je zorgverlener
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow = Rswift.StringResource(key: "holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Krijg toegang met je bewijs
      ///
      /// Locales: en, nl
      static let holderOnboardingTitleSafely = Rswift.StringResource(key: "holder.onboarding.title.safely", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Laat andere namen herschrijven
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_thirdPage_title = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_thirdPage_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Laat toch zien
      ///
      /// Locales: en, nl
      static let holderShowqrShowqr = Rswift.StringResource(key: "holder.showqr.showqr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Laatste %li minuten
      ///
      /// Locales: en, nl
      static let scan_log_list_header = Rswift.StringResource(key: "scan_log_list_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees <a href="https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app">hier</a> de volledige gebruikersvoorwaarden.
      ///
      /// Locales: en, nl
      static let newTermsDescription = Rswift.StringResource(key: "new.terms.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees hier de privacyverklaring
      ///
      /// Locales: en, nl
      static let holderAboutLink = Rswift.StringResource(key: "holder.about.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let general_readmore = Rswift.StringResource(key: "general_readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let holderDashboardConfigIsAlmostOutOfDateCardButton = Rswift.StringResource(key: "holder.dashboard.configIsAlmostOutOfDate.card.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid = Rswift.StringResource(key: "holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let holder_identityRemoved_banner_button_readmore = Rswift.StringResource(key: "holder_identityRemoved_banner_button_readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_banner_button_readmore = Rswift.StringResource(key: "holder_invaliddetailsremoved_banner_button_readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static let verifierStartClockdeviationwarningButton = Rswift.StringResource(key: "verifier.start.clockdeviationwarning.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer op CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let holder_qr_code_expired_explanation_action = Rswift.StringResource(key: "holder_qr_code_expired_explanation_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer op CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let holder_qr_code_hidden_explanation_action = Rswift.StringResource(key: "holder_qr_code_hidden_explanation_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lees meer:
      ///
      /// Locales: en, nl
      static let verifierAboutReadmore = Rswift.StringResource(key: "verifier.about.readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Let op!
      ///
      /// Locales: en, nl
      static let general_notification = Rswift.StringResource(key: "general_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Let op: identiteitscontrole is verplicht
      ///
      /// Locales: en, nl
      static let verifierResultAccessCheckidentity = Rswift.StringResource(key: "verifier.result.access.checkidentity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Let op: je apparaat is gejailbreakt. Je gegevens zijn mogelijk niet veilig.
      ///
      /// Locales: en, nl
      static let jailbrokenMessage = Rswift.StringResource(key: "jailbroken.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Let op: je iPhone is niet beveiligd met een pincode of met FaceID/Touch ID. Daardoor kunnen anderen je data inzien en zijn je gegevens mogelijk niet veilig.
      ///
      /// Locales: en, nl
      static let holderDeviceAuthenticationWarningMessage = Rswift.StringResource(key: "holder.device.authentication.warning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Lettercombinatie
      ///
      /// Locales: en, nl
      static let holderDcctokenentryTokenFieldTitle = Rswift.StringResource(key: "holder.dcctokenentry.tokenField.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Link
      ///
      /// Locales: en, nl
      static let generalUrlLink = Rswift.StringResource(key: "general.url.link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Log in met DigiD
      ///
      /// Locales: en, nl
      static let holderVaccinationStartAction = Rswift.StringResource(key: "holder.vaccination.start.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Log in met DigiD
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_yes_buttonSubtitle = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_yes_buttonSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Log in met je DigiD
      ///
      /// Locales: en, nl
      static let holderLocationGgdSubtitle = Rswift.StringResource(key: "holder.location.ggd.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Log in met je DigiD
      ///
      /// Locales: en, nl
      static let holderProviderGgdSubtitle = Rswift.StringResource(key: "holder.provider.ggd.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Logo Rijksoverheid
      ///
      /// Locales: en, nl
      static let generalGovernmentLogo = Rswift.StringResource(key: "general.government.logo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: MAA
      ///
      /// Locales: en, nl
      static let holderTestresultsMarch = Rswift.StringResource(key: "holder.testresults.march", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: MEI
      ///
      /// Locales: en, nl
      static let holderTestresultsMay = Rswift.StringResource(key: "holder.testresults.may", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak bewijs
      ///
      /// Locales: en, nl
      static let holderTestresultsResultsButton = Rswift.StringResource(key: "holder.testresults.results.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak bewijs
      ///
      /// Locales: en, nl
      static let holderVaccinationListAction = Rswift.StringResource(key: "holder.vaccination.list.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak bewijs compleet
      ///
      /// Locales: en, nl
      static let holder_dashboard_visitorpassincompletebanner_button_makecomplete = Rswift.StringResource(key: "holder_dashboard_visitorpassincompletebanner_button_makecomplete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak bewijs compleet
      ///
      /// Locales: en, nl
      static let holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete = Rswift.StringResource(key: "holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak binnenkort verbinding met het internet
      ///
      /// Locales: en, nl
      static let holderDashboardConfigIsAlmostOutOfDateCardMessage = Rswift.StringResource(key: "holder.dashboard.configIsAlmostOutOfDate.card.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static let holderAppointmentButtonTitle = Rswift.StringResource(key: "holder.appointment.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static let holderNotestActionTitle = Rswift.StringResource(key: "holder.notest.action.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static let holderNotestButtonTitle = Rswift.StringResource(key: "holder.notest.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak een keuze om door te gaan
      ///
      /// Locales: en, nl
      static let verification_policy_selection_error_message = Rswift.StringResource(key: "verification_policy_selection_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak je bezoekersbewijs compleet
      ///
      /// Locales: en, nl
      static let holder_completecertificate_title = Rswift.StringResource(key: "holder_completecertificate_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak verbinding met het internet
      ///
      /// Locales: en, nl
      static let holderDashboardConfigIsAlmostOutOfDatePageTitle = Rswift.StringResource(key: "holder.dashboard.configIsAlmostOutOfDate.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Maak verbinding met het internet
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredNointernetAlertTitle = Rswift.StringResource(key: "holder.dashboard.strippen.expired.nointernet.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Meer informatie
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_alert_button_moreinfo = Rswift.StringResource(key: "holder_invaliddetailsremoved_alert_button_moreinfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Meer informatie over testresultaten
      ///
      /// Locales: en, nl
      static let holderTestresultsDisclaimerAccessibility = Rswift.StringResource(key: "holder.testresults.disclaimer.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Meer:
      ///
      /// Locales: en, nl
      static let holderAboutReadmore = Rswift.StringResource(key: "holder.about.readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Meestgestelde vragen
      ///
      /// Locales: en, nl
      static let holderMenuFaq = Rswift.StringResource(key: "holder.menu.faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Menu 
      ///
      /// Locales: en, nl
      static let general_menu = Rswift.StringResource(key: "general_menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Met deze app controleer je het coronabewijs van je bezoekers. Zo kun je jouw locatie veilig open houden.
      ///
      /// Locales: en, nl
      static let verifierOnboardingMessageSafely = Rswift.StringResource(key: "verifier.onboarding.message.safely", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Met je BSN kun je jouw bewijs aanvragen bij de CoronaCheck helpdesk. Heb je geen BSN? Dan kun je een bewijs krijgen via je test- of vaccinatielocatie.
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_message = Rswift.StringResource(key: "holder_checkForBSN_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Mijn bewijs
      ///
      /// Locales: en, nl
      static let holderDashboardQrTitle = Rswift.StringResource(key: "holder.dashboard.qr.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Mijn bewijzen
      ///
      /// Locales: en, nl
      static let holderDashboardTitle = Rswift.StringResource(key: "holder.dashboard.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Mijn bewijzen
      ///
      /// Locales: en, nl
      static let holderMenuDashboard = Rswift.StringResource(key: "holder.menu.dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Mijn opgeslagen gegevens
      ///
      /// Locales: en, nl
      static let holder_storedEvents_title = Rswift.StringResource(key: "holder_storedEvents_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ministerie van VWS
      ///
      /// Locales: en, nl
      static let holderDccListIssuer = Rswift.StringResource(key: "holder.dcc.list.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ministerie van VWS / Ministry of Health, Welfare and Sport
      ///
      /// Locales: en, nl
      static let holderVaccinationAboutIssuer = Rswift.StringResource(key: "holder.vaccination.about.issuer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: NOV
      ///
      /// Locales: en, nl
      static let holderTestresultsNovember = Rswift.StringResource(key: "holder.testresults.november", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryName = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestName = Rswift.StringResource(key: "holder.showqr.eu.about.test.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationName = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryName = Rswift.StringResource(key: "holder.dcc.recovery.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderDccTestName = Rswift.StringResource(key: "holder.dcc.test.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationName = Rswift.StringResource(key: "holder.dcc.vaccination.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryName = Rswift.StringResource(key: "holder.event.about.recovery.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestName = Rswift.StringResource(key: "holder.event.about.test.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationName = Rswift.StringResource(key: "holder.event.about.vaccination.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_name = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naam: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_name = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let holder_endOfLife_button = Rswift.StringResource(key: "holder_endOfLife_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let verifier_endOfLife_button = Rswift.StringResource(key: "verifier_endOfLife_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar instellingen
      ///
      /// Locales: en, nl
      static let holder_scanner_permission_settings = Rswift.StringResource(key: "holder_scanner_permission_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar instellingen
      ///
      /// Locales: en, nl
      static let verifierScanPermissionSettings = Rswift.StringResource(key: "verifier.scan.permission.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar mijn bewijzen
      ///
      /// Locales: en, nl
      static let general_toMyOverview = Rswift.StringResource(key: "general_toMyOverview", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Naar mijn bewijzen
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates = Rswift.StringResource(key: "holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nederland
      ///
      /// Locales: en, nl
      static let generalNetherlands = Rswift.StringResource(key: "general.netherlands", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nederland / The Netherlands
      ///
      /// Locales: en, nl
      static let holderVaccinationAboutCountry = Rswift.StringResource(key: "holder.vaccination.about.country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nederlandse
      ///
      /// Locales: en, nl
      static let generalDutch = Rswift.StringResource(key: "general.dutch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nederlandse QR
      ///
      /// Locales: en, nl
      static let holder_showQR_domestic_title = Rswift.StringResource(key: "holder_showQR_domestic_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nederlandse en internationale bewijzen
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_dutchAndInternationalCertificates_title = Rswift.StringResource(key: "holder_newintheapp_content_dutchAndInternationalCertificates_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nee
      ///
      /// Locales: en, nl
      static let holderTestresultsAlertCancel = Rswift.StringResource(key: "holder.testresults.alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nee
      ///
      /// Locales: en, nl
      static let holderVaccinationAlertContinue = Rswift.StringResource(key: "holder.vaccination.alert.continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nee, erna getest
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_no_buttonTitle = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_no_buttonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nee, ik heb geen BSN
      ///
      /// Locales: en, nl
      static let holder_checkForBSN_buttonTitle_doesNotHaveBSN = Rswift.StringResource(key: "holder_checkForBSN_buttonTitle_doesNotHaveBSN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nee, terug
      ///
      /// Locales: en, nl
      static let verifier_risksetting_confirmation_dialog_negative_button = Rswift.StringResource(key: "verifier_risksetting_confirmation_dialog_negative_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Neem contact op met de helpdesk van CoronaCheck en geef de foutcode (%@) door.
      ///
      /// Locales: en, nl
      static let generalErrorCryptolibMessage = Rswift.StringResource(key: "general.error.cryptolib.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Neem contact op met de zorgverlener waar je bent gevaccineerd. Hier kun je jouw coronabewijs aanvragen op papier of als pdf-bestand.
      ///
      /// Locales: en, nl
      static let holder_contactProviderHelpdesk_message_ggdPortalEnabled = Rswift.StringResource(key: "holder_contactProviderHelpdesk_message_ggdPortalEnabled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Negatieve test
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionNegativetestTitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.negativetest.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Negatieve testuitslag
      ///
      /// Locales: en, nl
      static let general_negativeTest = Rswift.StringResource(key: "general_negativeTest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Negatieve testuitslag
      ///
      /// Locales: en, nl
      static let holderTestresultsNegative = Rswift.StringResource(key: "holder.testresults.negative", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Negatieve testuitslag toegevoegd
      ///
      /// Locales: en, nl
      static let holder_event_negativeTestEndstate_addVaccinationAssessment_title = Rswift.StringResource(key: "holder_event_negativeTestEndstate_addVaccinationAssessment_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Niet akkoord
      ///
      /// Locales: en, nl
      static let newTermsDisagree = Rswift.StringResource(key: "new.terms.disagree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static let general_newintheapp = Rswift.StringResource(key: "general_newintheapp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static let holderUpdatepageTagline = Rswift.StringResource(key: "holder.updatepage.tagline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static let new_in_app_subtitle = Rswift.StringResource(key: "new_in_app_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuwe regels
      ///
      /// Locales: en, nl
      static let general_newpolicy = Rswift.StringResource(key: "general_newpolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuwe regels
      ///
      /// Locales: en, nl
      static let new_policy_subtitle = Rswift.StringResource(key: "new_policy_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nieuwe vaccinatie of test toevoegen
      ///
      /// Locales: en, nl
      static let holder_dashboard_addCard_title = Rswift.StringResource(key: "holder_dashboard_addCard_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Notificatie
      ///
      /// Locales: en, nl
      static let holder_dashboard_accessibility_notification = Rswift.StringResource(key: "holder_dashboard_accessibility_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nu updaten
      ///
      /// Locales: en, nl
      static let recommendedUpdateAppActionOk = Rswift.StringResource(key: "recommended.updateApp.action.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Nu updaten
      ///
      /// Locales: en, nl
      static let recommended_update_card_action = Rswift.StringResource(key: "recommended_update_card_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: OKT
      ///
      /// Locales: en, nl
      static let holderTestresultsOctober = Rswift.StringResource(key: "holder.testresults.october", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Oke
      ///
      /// Locales: en, nl
      static let generalOk = Rswift.StringResource(key: "general.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Om de app op te starten heb je internet nodig.
      ///
      /// Locales: en, nl
      static let internetRequiredText = Rswift.StringResource(key: "internet.required.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Om toegang tot je QR-codes te houden heb je internet nodig. Maak nu verbinding.
      ///
      /// Locales: en, nl
      static let holderDashboardStrippenExpiredNointernetAlertMessage = Rswift.StringResource(key: "holder.dashboard.strippen.expired.nointernet.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Omdat de opslag van je telefoon vol is werkt CoronaCheck niet. Maak ruimte vrij op je telefoon en open CoronaCheck opnieuw.
      ///
      /// Locales: en, nl
      static let appstatus_diskfull_body = Rswift.StringResource(key: "appstatus_diskfull_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ongeldige gegevens verwijderd
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_alert_title = Rswift.StringResource(key: "holder_invaliddetailsremoved_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Onze voorwaarden zijn vernieuwd
      ///
      /// Locales: en, nl
      static let newTermsTitle = Rswift.StringResource(key: "new.terms.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Op dit moment geeft een Nederlands bewijs 3G-toegang. Dit betekent dat een bewijs overal geldig is waar om een coronabewijs wordt gevraagd.
      ///
      /// Locales: en, nl
      static let holder_dashboard_only3GaccessBanner_title = Rswift.StringResource(key: "holder_dashboard_only3GaccessBanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Op dit moment is de app niet in gebruik. Ga voor meer informatie naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let holder_endOfLife_description = Rswift.StringResource(key: "holder_endOfLife_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Op dit moment is de app niet in gebruik. Ga voor meer informatie naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static let verifier_endOfLife_description = Rswift.StringResource(key: "verifier_endOfLife_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Op dit moment wordt 3G-toegang gegeven op alle plekken waar om een coronabewijs wordt gevraagd. Dit betekent dat je overal naar binnen kunt met een bewijs van vaccinatie, herstel, of een negatieve test.
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only3G_body = Rswift.StringResource(key: "holder_newintheapp_content_only3G_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Op plekken waar het coronatoegangsbewijs gebruikt wordt, krijgen alleen bezoekers met een testbewijs toegang (1G-toegang). De CoronaCheck scanner geeft alleen een scherm met vinkje bij het scannen van een testbewijs.
      ///
      /// Locales: en, nl
      static let new_policy_1G_subtitle = Rswift.StringResource(key: "new_policy_1G_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Open menu
      ///
      /// Locales: en, nl
      static let generalMenuOpen = Rswift.StringResource(key: "general.menu.open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Open scanner
      ///
      /// Locales: en, nl
      static let holderMenuVerifierdeeplink = Rswift.StringResource(key: "holder.menu.verifierdeeplink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Opgehaald bij %@
      ///
      /// Locales: en, nl
      static let holder_identitySelection_details_fetchedFromProvider = Rswift.StringResource(key: "holder_identitySelection_details_fetchedFromProvider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Opgehaald bij %@
      ///
      /// Locales: en, nl
      static let holder_storedEvents_listHeader_fetchedFromProvider = Rswift.StringResource(key: "holder_storedEvents_listHeader_fetchedFromProvider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Opgeslagen gegevens
      ///
      /// Locales: en, nl
      static let holder_menu_storedEvents = Rswift.StringResource(key: "holder_menu_storedEvents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ophaalcode
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowTokenTitle = Rswift.StringResource(key: "holder.tokenentry.regularflow.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ophalen geannuleerd
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_portal_title = Rswift.StringResource(key: "holder_authentication_popup_portal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Opnieuw scannen
      ///
      /// Locales: en, nl
      static let holder_scanner_error_action = Rswift.StringResource(key: "holder_scanner_error_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static let holderAboutTitle = Rswift.StringResource(key: "holder.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static let holderMenuAbout = Rswift.StringResource(key: "holder.menu.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static let verifierAboutTitle = Rswift.StringResource(key: "verifier.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static let verifierMenuAbout = Rswift.StringResource(key: "verifier.menu.about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over je bezoekersbewijs
      ///
      /// Locales: en, nl
      static let holder_notvalidinthisregionmodal_visitorpass_international_title = Rswift.StringResource(key: "holder_notvalidinthisregionmodal_visitorpass_international_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over jouw vaccinatie
      ///
      /// Locales: en, nl
      static let holderVaccinationAboutText = Rswift.StringResource(key: "holder.vaccination.about.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over mijn Nederlandse QR-code
      ///
      /// Locales: en, nl
      static let holderShowqrDomesticAboutTitle = Rswift.StringResource(key: "holder.showqr.domestic.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over mijn dosis %@/%@
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationTitle = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over mijn internationale QR-code
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTitle = Rswift.StringResource(key: "holder.showqr.eu.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Over scannen
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsNavigationTitle = Rswift.StringResource(key: "verifier.scaninstructions.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Overgebleven tijd:
      ///
      /// Locales: en, nl
      static let holderShowqrScreenshotwarningCountdownAccessibilityLabel = Rswift.StringResource(key: "holder.showqr.screenshotwarning.countdownAccessibilityLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Overslaan
      ///
      /// Locales: en, nl
      static let general_skip = Rswift.StringResource(key: "general_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Pagina %d van %d
      ///
      /// Locales: en, nl
      static let general_pagecontrol_accessibility_value = Rswift.StringResource(key: "general_pagecontrol_accessibility_value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Positieve test
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionRecoveryTitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.recovery.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Positieve testuitslag
      ///
      /// Locales: en, nl
      static let general_positiveTest = Rswift.StringResource(key: "general_positiveTest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Positieve testuitslag
      ///
      /// Locales: en, nl
      static let holderTestresultsPositive = Rswift.StringResource(key: "holder.testresults.positive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Positieve testuitslag niet meer geldig
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateRecoveryTooOld_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateRecoveryTooOld_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Privacyverklaring
      ///
      /// Locales: en, nl
      static let holderMenuPrivacy = Rswift.StringResource(key: "holder.menu.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer het op een later moment nog eens.
      ///
      /// Locales: en, nl
      static let generalNetworkwasbusyText = Rswift.StringResource(key: "general.networkwasbusy.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static let generalErrorCryptolibRetry = Rswift.StringResource(key: "general.error.cryptolib.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static let generalRetry = Rswift.StringResource(key: "general.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static let holderCheckdccRejectedActionTitle = Rswift.StringResource(key: "holder.checkdcc.rejected.actionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorAgain = Rswift.StringResource(key: "holder.vaccination.error.again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static let internetRequiredButton = Rswift.StringResource(key: "internet.required.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probleem met de app
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_sendCrashReport_title = Rswift.StringResource(key: "general_unrecoverableError_sendCrashReport_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Probleem rapporteren
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_sendCrashReport_action = Rswift.StringResource(key: "general_unrecoverableError_sendCrashReport_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Producent / Vaccine manufacturer:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationManufacturer = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Productnaam:
      ///
      /// Locales: en, nl
      static let holder_event_aboutVaccination_productName = Rswift.StringResource(key: "holder_event_aboutVaccination_productName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-code is verborgen
      ///
      /// Locales: en, nl
      static let holderShowqrQrhidden = Rswift.StringResource(key: "holder.showqr.qrhidden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-code is verlopen
      ///
      /// Locales: en, nl
      static let holder_qr_code_expired_overlay_title = Rswift.StringResource(key: "holder_qr_code_expired_overlay_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-code maken
      ///
      /// Locales: en, nl
      static let holderAboutmakingaqrTitle = Rswift.StringResource(key: "holder.aboutmakingaqr.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-code maken
      ///
      /// Locales: en, nl
      static let holderProviderTitle = Rswift.StringResource(key: "holder.provider.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-code wordt niet herkend
      ///
      /// Locales: en, nl
      static let holder_scanner_error_title_unknown = Rswift.StringResource(key: "holder_scanner_error_title_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: QR-codes voor Nederland en internationaal
      ///
      /// Locales: en, nl
      static let holderOnboardingTitlePrivacy = Rswift.StringResource(key: "holder.onboarding.title.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Regel je bewijs via bijvoorbeeld je huisarts of zorginstelling
      ///
      /// Locales: en, nl
      static let holder_chooseEventLocation_buttonSubTitle_other = Rswift.StringResource(key: "holder_chooseEventLocation_buttonSubTitle_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Regel je bewijs via de GGD
      ///
      /// Locales: en, nl
      static let holder_chooseEventLocation_buttonSubTitle_GGD = Rswift.StringResource(key: "holder_chooseEventLocation_buttonSubTitle_GGD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Reis je naar een land waar om een coronabewijs wordt gevraagd? Dan kun je met deze app je bewijs maken.
      ///
      /// Locales: en, nl
      static let holder_onboarding_content_TravelSafe_0G_message = Rswift.StringResource(key: "holder_onboarding_content_TravelSafe_0G_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Reset app
      ///
      /// Locales: en, nl
      static let holderCleardataAlertRemove = Rswift.StringResource(key: "holder.cleardata.alert.remove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Reset app
      ///
      /// Locales: en, nl
      static let holderCleardataMenuTitle = Rswift.StringResource(key: "holder.cleardata.menu.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Richt je telefoon op de QR-code
      ///
      /// Locales: en, nl
      static let holder_scanner_message = Rswift.StringResource(key: "holder_scanner_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Rijksoverheid
      ///
      /// Locales: en, nl
      static let generalGovernment = Rswift.StringResource(key: "general.government", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Rood scherm, wat nu?
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsRedscreennowwhatTitle = Rswift.StringResource(key: "verifier.scaninstructions.redscreennowwhat.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: SEP
      ///
      /// Locales: en, nl
      static let holderTestresultsSeptember = Rswift.StringResource(key: "holder.testresults.september", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan QR-code
      ///
      /// Locales: en, nl
      static let holder_scanner_title = Rswift.StringResource(key: "holder_scanner_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan QR-code
      ///
      /// Locales: en, nl
      static let verifierScanTitle = Rswift.StringResource(key: "verifier.scan.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan QR-codes
      ///
      /// Locales: en, nl
      static let verifierMenuDashboard = Rswift.StringResource(key: "verifier.menu.dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan QR-codes
      ///
      /// Locales: en, nl
      static let verifierStartTitle = Rswift.StringResource(key: "verifier.start.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan de QR-code
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsScanQRTitle = Rswift.StringResource(key: "verifier.scaninstructions.scanQR.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan de QR-codes van je bezoekers
      ///
      /// Locales: en, nl
      static let verifierStartHeader = Rswift.StringResource(key: "verifier.start.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan de QR-codes van je bezoekers. Is de QR-code geldig en zijn de gegevens hetzelfde als op het identiteitsbewijs? Dan mag je de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static let verifierStartMessage = Rswift.StringResource(key: "verifier.start.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan de QR-codes van je bezoekers. Is de QR-code geldig op jouw locatie en zijn de gegevens hetzelfde als op het identiteitsbewijs? Dan mag je de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static let scan_qr_description_1G = Rswift.StringResource(key: "scan_qr_description_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan de internationale QR-code
      ///
      /// Locales: en, nl
      static let holder_scanner_error_title_ctb = Rswift.StringResource(key: "holder_scanner_error_title_ctb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan met de camera van je telefoon de QR-codes van bezoekers in de CoronaCheck-app of op papier. Toeristen kunnen een QR-code in een buitenlandse app of op papier tonen.
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsScanQRContent = Rswift.StringResource(key: "verifier.scaninstructions.scanQR.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan volgende
      ///
      /// Locales: en, nl
      static let verifierResultCheckButton = Rswift.StringResource(key: "verifier.result.check.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan volgende
      ///
      /// Locales: en, nl
      static let verifierResultNext = Rswift.StringResource(key: "verifier.result.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan-instelling
      ///
      /// Locales: en, nl
      static let verifier_menu_risksetting = Rswift.StringResource(key: "verifier_menu_risksetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan-instelling
      ///
      /// Locales: en, nl
      static let verifier_risksetting_start_title = Rswift.StringResource(key: "verifier_risksetting_start_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan-instelling aanpassen
      ///
      /// Locales: en, nl
      static let verifier_risksetting_active_title = Rswift.StringResource(key: "verifier_risksetting_active_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan-instelling log
      ///
      /// Locales: en, nl
      static let scan_log_title = Rswift.StringResource(key: "scan_log_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scan-instelling log
      ///
      /// Locales: en, nl
      static let verifier_about_this_app_scan_log = Rswift.StringResource(key: "verifier_about_this_app_scan_log", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Scanner wil toegang tot de camera
      ///
      /// Locales: en, nl
      static let verifierScanPermissionTitle = Rswift.StringResource(key: "verifier.scan.permission.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sla over
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsNavigationSkipbuttonTitle = Rswift.StringResource(key: "verifier.scaninstructions.navigation.skipbutton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluit CoronaCheck
      ///
      /// Locales: en, nl
      static let appstatus_diskfull_button = Rswift.StringResource(key: "appstatus_diskfull_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static let generalClose = Rswift.StringResource(key: "general.close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowConfirmresendverificationalertCancelbutton = Rswift.StringResource(key: "holder.tokenentry.regularflow.confirmresendverificationalert.cancelbutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowConfirmresendverificationalertCancelbutton = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.confirmresendverificationalert.cancelbutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static let holderVaccinationErrorClose = Rswift.StringResource(key: "holder.vaccination.error.close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_alert_button_close = Rswift.StringResource(key: "holder_invaliddetailsremoved_alert_button_close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Soms vallen gegevens weg
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsCheckonlythevisibledataTitle = Rswift.StringResource(key: "verifier.scaninstructions.checkonlythevisibledata.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static let generalErrorCryptolibTitle = Rswift.StringResource(key: "general.error.cryptolib.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static let holderErrorstateTitle = Rswift.StringResource(key: "holder.errorstate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static let holderFetcheventsErrorNoresultsNetworkerrorTitle = Rswift.StringResource(key: "holder.fetchevents.error.noresults.networkerror.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, er ging iets mis
      ///
      /// Locales: en, nl
      static let generalErrorTitle = Rswift.StringResource(key: "general.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, het is erg druk
      ///
      /// Locales: en, nl
      static let generalNetworkwasbusyTitle = Rswift.StringResource(key: "general.networkwasbusy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Sorry, het is erg druk
      ///
      /// Locales: en, nl
      static let holderFetcheventsErrorNoresultsNetworkwasbusyTitle = Rswift.StringResource(key: "holder.fetchevents.error.noresults.networkwasbusy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stap %@
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsStepTitle = Rswift.StringResource(key: "verifier.scaninstructions.step.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Start CoronaCheck opnieuw op. Nog steeds een probleem? Verwijder de app en installeer deze opnieuw.
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_restartTheApp_message = Rswift.StringResource(key: "general_unrecoverableError_restartTheApp_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Start de app opnieuw op
      ///
      /// Locales: en, nl
      static let general_unrecoverableError_restartTheApp_title = Rswift.StringResource(key: "general_unrecoverableError_restartTheApp_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static let holder_paperproof_startscanning_button_startScanning = Rswift.StringResource(key: "holder_paperproof_startscanning_button_startScanning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static let verifierScaninstructionsButtonStartscanning = Rswift.StringResource(key: "verifier.scaninstructions.button.startscanning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static let verifierStartButtonTitle = Rswift.StringResource(key: "verifier.start.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stel voor jouw locatie in of je 1G- of 3G-toegang gaat geven. Controleer voordat je gaat scannen welk soort toegang je mag geven.
      ///
      /// Locales: en, nl
      static let verifier_risksetting_firsttimeuse_header = Rswift.StringResource(key: "verifier_risksetting_firsttimeuse_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stel voor jouw locatie in of je 1G- of 3G-toegang gaat geven. Controleer voordat je gaat scannen welk soort toegang je mag geven.
      ///
      /// Locales: en, nl
      static let verifier_risksetting_start_header = Rswift.StringResource(key: "verifier_risksetting_start_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stoppen
      ///
      /// Locales: en, nl
      static let holderEventIdentityAlertCancel = Rswift.StringResource(key: "holder.event.identity.alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stuur opnieuw
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowConfirmresendverificationalertOkaybutton = Rswift.StringResource(key: "holder.tokenentry.regularflow.confirmresendverificationalert.okaybutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Stuur opnieuw
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowConfirmresendverificationalertOkaybutton = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.confirmresendverificationalert.okaybutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Support
      ///
      /// Locales: en, nl
      static let verifierMenuSupport = Rswift.StringResource(key: "verifier.menu.support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Te vaak geprobeerd
      ///
      /// Locales: en, nl
      static let holderCheckdccBlockedTitle = Rswift.StringResource(key: "holder.checkdcc.blocked.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Terug
      ///
      /// Locales: en, nl
      static let generalBack = Rswift.StringResource(key: "general.back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Terug naar de %@
      ///
      /// Locales: en, nl
      static let holderDashboardQrBackToThirdPartyApp = Rswift.StringResource(key: "holder.dashboard.qr.backToThirdPartyApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Terug naar start
      ///
      /// Locales: en, nl
      static let verifier_scan_instructions_back_to_start = Rswift.StringResource(key: "verifier_scan_instructions_back_to_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Test type:
      ///
      /// Locales: en, nl
      static let holderDccTestType = Rswift.StringResource(key: "holder.dcc.test.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testafspraak maken
      ///
      /// Locales: en, nl
      static let holderAppointmentHeader = Rswift.StringResource(key: "holder.appointment.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testafspraak maken
      ///
      /// Locales: en, nl
      static let holderAppointmentTitle = Rswift.StringResource(key: "holder.appointment.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum
      ///
      /// Locales: en, nl
      static let generalTestdate = Rswift.StringResource(key: "general.testdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum / Test date*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryDate = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum / Test date:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestDate = Rswift.StringResource(key: "holder.showqr.eu.about.test.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryDate = Rswift.StringResource(key: "holder.dcc.recovery.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static let holderDccTestDate = Rswift.StringResource(key: "holder.dcc.test.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryDate = Rswift.StringResource(key: "holder.event.about.recovery.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestDate = Rswift.StringResource(key: "holder.event.about.test.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testdatum: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_testDate = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_testDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testlocatie / Test location:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestFacility = Rswift.StringResource(key: "holder.showqr.eu.about.test.facility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testlocatie:
      ///
      /// Locales: en, nl
      static let holderDccTestFacility = Rswift.StringResource(key: "holder.dcc.test.facility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testlocatie:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestFacility = Rswift.StringResource(key: "holder.event.about.test.facility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testnaam / Test name:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestTestname = Rswift.StringResource(key: "holder.showqr.eu.about.test.testname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testnaam:
      ///
      /// Locales: en, nl
      static let holderDccTestTestname = Rswift.StringResource(key: "holder.dcc.test.testname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testnaam:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestTestname = Rswift.StringResource(key: "holder.event.about.test.testname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testproducent / Test manufacturer:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestManufacturer = Rswift.StringResource(key: "holder.showqr.eu.about.test.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testproducent:
      ///
      /// Locales: en, nl
      static let holderDccTestManufacturer = Rswift.StringResource(key: "holder.dcc.test.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testproducent:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestManufacturer = Rswift.StringResource(key: "holder.event.about.test.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag / Test result:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestResult = Rswift.StringResource(key: "holder.showqr.eu.about.test.result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag is al opgehaald
      ///
      /// Locales: en, nl
      static let holderTestresultsAlreadyTitle = Rswift.StringResource(key: "holder.testresults.already.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag nog niet bekend
      ///
      /// Locales: en, nl
      static let holderTestresultsPendingTitle = Rswift.StringResource(key: "holder.testresults.pending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static let holderTestListTitle = Rswift.StringResource(key: "holder.test.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowTitle = Rswift.StringResource(key: "holder.tokenentry.regularflow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowTitle = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static let holder_completecertificate_button_fetchnegativetest = Rswift.StringResource(key: "holder_completecertificate_button_fetchnegativetest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag:
      ///
      /// Locales: en, nl
      static let holderDccTestResult = Rswift.StringResource(key: "holder.dcc.test.result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Testuitslag:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestResult = Rswift.StringResource(key: "holder.event.about.test.result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Tijd voor een update
      ///
      /// Locales: en, nl
      static let holder_updateApp_title = Rswift.StringResource(key: "holder_updateApp_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Tijd voor een update
      ///
      /// Locales: en, nl
      static let verifier_updateApp_title = Rswift.StringResource(key: "verifier_updateApp_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Toegangsbewijs
      ///
      /// Locales: en, nl
      static let holder_dashboard_accessibility_access = Rswift.StringResource(key: "holder_dashboard_accessibility_access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Toegankelijkheid
      ///
      /// Locales: en, nl
      static let holderMenuAccessibility = Rswift.StringResource(key: "holder.menu.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Toegankelijkheid
      ///
      /// Locales: en, nl
      static let verifierMenuAccessibility = Rswift.StringResource(key: "verifier.menu.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Toevoegen
      ///
      /// Locales: en, nl
      static let generalAdd = Rswift.StringResource(key: "general.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Toevoegen
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_action_title = Rswift.StringResource(key: "holder_event_vaccination_assessment_action_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type test
      ///
      /// Locales: en, nl
      static let generalTesttype = Rswift.StringResource(key: "general.testtype", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type test / Type of test:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestType = Rswift.StringResource(key: "holder.showqr.eu.about.test.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type test:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestType = Rswift.StringResource(key: "holder.event.about.test.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type vaccin / Vaccine type:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationType = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type vaccin:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationType = Rswift.StringResource(key: "holder.dcc.vaccination.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Type vaccin:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationType = Rswift.StringResource(key: "holder.event.about.vaccination.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uit de app verwijderen
      ///
      /// Locales: en, nl
      static let holder_storedEvents_button_removeEvents = Rswift.StringResource(key: "holder_storedEvents_button_removeEvents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uit de test blijkt dat ik corona heb gehad
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionRecoverySubtitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.recovery.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uit de test blijkt dat ik geen corona heb
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionNegativetestSubtitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.negativetest.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek beoordelingsnummer:
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_about_unique_identifier = Rswift.StringResource(key: "holder_event_vaccination_assessment_about_unique_identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryIdentifier = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestIdentifier = Rswift.StringResource(key: "holder.showqr.eu.about.test.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationIdentifier = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryIdentifier = Rswift.StringResource(key: "holder.dcc.recovery.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static let holderDccTestIdentifier = Rswift.StringResource(key: "holder.dcc.test.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static let holderEventAboutRecoveryIdentifier = Rswift.StringResource(key: "holder.event.about.recovery.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static let holderEventAboutTestIdentifier = Rswift.StringResource(key: "holder.event.about.test.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek vaccinatienummer:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationIdentifier = Rswift.StringResource(key: "holder.dcc.vaccination.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Uniek vaccinatienummer:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationIdentifier = Rswift.StringResource(key: "holder.event.about.vaccination.identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Update alvast je app
      ///
      /// Locales: en, nl
      static let recommendedUpdateAppTitle = Rswift.StringResource(key: "recommended.updateApp.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccin / Vaccine:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationBrand = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.brand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccin:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationBrand = Rswift.StringResource(key: "holder.dcc.vaccination.brand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccin:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationBrand = Rswift.StringResource(key: "holder.event.about.vaccination.brand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatie
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeOptionVaccineTitle = Rswift.StringResource(key: "holder.chooseqrcodetype.option.vaccine.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatie
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_title_vaccination = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_title_vaccination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatie %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_vaccination_title = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_vaccination_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatie of test toevoegen
      ///
      /// Locales: en, nl
      static let holder_menu_listItem_addVaccinationOrTest_title = Rswift.StringResource(key: "holder_menu_listItem_addVaccinationOrTest_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiebeoordeling
      ///
      /// Locales: en, nl
      static let holder_event_vaccination_assessment_element_title = Rswift.StringResource(key: "holder_event_vaccination_assessment_element_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiebeoordeling ophalen
      ///
      /// Locales: en, nl
      static let visitorpass_code_title = Rswift.StringResource(key: "visitorpass_code_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiebewijs dosis %@/%@
      ///
      /// Locales: en, nl
      static let holderDccVaccinationListTitle = Rswift.StringResource(key: "holder.dcc.vaccination.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiebewijs en herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiebewijs en herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateVaccinationsAndRecovery_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateVaccinationsAndRecovery_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiedatum
      ///
      /// Locales: en, nl
      static let generalVaccinationdate = Rswift.StringResource(key: "general.vaccinationdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiedatum / Vaccination date*:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationDate = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiedatum:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationDate = Rswift.StringResource(key: "holder.dcc.vaccination.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiedatum:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationDate = Rswift.StringResource(key: "holder.event.about.vaccination.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinatiedatum: %@
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_listElement_vaccinationDate = Rswift.StringResource(key: "holder_listRemoteEvents_listElement_vaccinationDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinproducent:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationManufacturer = Rswift.StringResource(key: "holder.dcc.vaccination.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vaccinproducent:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationManufacturer = Rswift.StringResource(key: "holder.event.about.vaccination.manufacturer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Veilig op reis met je bewijs
      ///
      /// Locales: en, nl
      static let holder_onboarding_content_TravelSafe_0G_title = Rswift.StringResource(key: "holder_onboarding_content_TravelSafe_0G_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verandert de beweging van richting
      ///
      /// Locales: en, nl
      static let holder_showqr_animation_voiceover_hint = Rswift.StringResource(key: "holder_showqr_animation_voiceover_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verborgen QR-code
      ///
      /// Locales: en, nl
      static let holder_qr_code_hidden_explanation_title = Rswift.StringResource(key: "holder_qr_code_hidden_explanation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verificatiecode
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowVerificationTitle = Rswift.StringResource(key: "holder.tokenentry.regularflow.verification.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verificatiecode
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowVerificationTitle = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.verification.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verloopt over
      ///
      /// Locales: en, nl
      static let holderDashboardQrExpiryDatePrefixExpiresIn = Rswift.StringResource(key: "holder.dashboard.qr.expiryDate.prefix.expiresIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verlopen QR-code
      ///
      /// Locales: en, nl
      static let holder_qr_code_expired_explanation_title = Rswift.StringResource(key: "holder_qr_code_expired_explanation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verlopen bezoekersbewijs
      ///
      /// Locales: en, nl
      static let holder_dashboard_visitorpassexpired_title = Rswift.StringResource(key: "holder_dashboard_visitorpassexpired_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verlopen vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let holder_expiredDomesticVaccinationModal_title = Rswift.StringResource(key: "holder_expiredDomesticVaccinationModal_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vernieuwd vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let holderEuvaccinationswereupgradedTitle = Rswift.StringResource(key: "holder.euvaccinationswereupgraded.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vervang
      ///
      /// Locales: en, nl
      static let holderEventIdentityAlertOk = Rswift.StringResource(key: "holder.event.identity.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verwijderde gegevens
      ///
      /// Locales: en, nl
      static let holder_invaliddetailsremoved_moreinfo_title = Rswift.StringResource(key: "holder_invaliddetailsremoved_moreinfo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Verwijderen
      ///
      /// Locales: en, nl
      static let general_delete = Rswift.StringResource(key: "general_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vinkje = toegang
      ///
      /// Locales: en, nl
      static let scan_instructions_4_title_1G = Rswift.StringResource(key: "scan_instructions_4_title_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Voeg bewijs toe via DigiD
      ///
      /// Locales: en, nl
      static let holderPaperproofNotokenAction = Rswift.StringResource(key: "holder.paperproof.notoken.action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let generalNext = Rswift.StringResource(key: "general.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holderDcctokenentryNext = Rswift.StringResource(key: "holder.dcctokenentry.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowNext = Rswift.StringResource(key: "holder.tokenentry.regularflow.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowNext = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_thirdPage_action = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_thirdPage_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_3Gand1G_button_next = Rswift.StringResource(key: "holder_newintheapp_content_3Gand1G_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only1G_button_next = Rswift.StringResource(key: "holder_newintheapp_content_only1G_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let holder_newintheapp_content_only3G_button_next = Rswift.StringResource(key: "holder_newintheapp_content_only3G_button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let visitorpass_start_action = Rswift.StringResource(key: "visitorpass_start_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static let visitorpass_token_next = Rswift.StringResource(key: "visitorpass_token_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Volgende QR-code
      ///
      /// Locales: en, nl
      static let holderShowqrNextbutton = Rswift.StringResource(key: "holder.showqr.nextbutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Voor handhaving:
      ///
      /// Locales: en, nl
      static let verifier_about_this_app_law_enforcement = Rswift.StringResource(key: "verifier_about_this_app_law_enforcement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Voorkomen dat je moet updaten als je ergens naar binnen wilt of de grens over gaat? Update nu al naar een nieuwere versie.
      ///
      /// Locales: en, nl
      static let recommendedUpdateAppSubtitle = Rswift.StringResource(key: "recommended.updateApp.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Voornaam
      ///
      /// Locales: en, nl
      static let verifierResultIdentityFirstname = Rswift.StringResource(key: "verifier.result.identity.firstname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Voorwaarden voor gebruik
      ///
      /// Locales: en, nl
      static let verifierConsentTitle = Rswift.StringResource(key: "verifier.consent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vorige QR-code
      ///
      /// Locales: en, nl
      static let holderShowqrPreviousbutton = Rswift.StringResource(key: "holder.showqr.previousbutton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vraag de bezoeker een QR-code van een coronabewijs te laten zien.
      ///
      /// Locales: en, nl
      static let verifierResultAlertUnknownMessage = Rswift.StringResource(key: "verifier.result.alert.unknown.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vraag je coronabewijs aan bij je zorgverlener
      ///
      /// Locales: en, nl
      static let holder_contactProviderHelpdesk_vaccinationFlow_title = Rswift.StringResource(key: "holder_contactProviderHelpdesk_vaccinationFlow_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vraag je coronabewijs aan via de GGD
      ///
      /// Locales: en, nl
      static let holder_contactProviderHelpdesk_testFlow_title = Rswift.StringResource(key: "holder_contactProviderHelpdesk_testFlow_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vraag je coronabewijs aan via de helpdesk
      ///
      /// Locales: en, nl
      static let holder_contactCoronaCheckHelpdesk_title = Rswift.StringResource(key: "holder_contactCoronaCheckHelpdesk_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vraag naar de Nederlandse QR-code
      ///
      /// Locales: en, nl
      static let verifierResultAlertDccTitle = Rswift.StringResource(key: "verifier.result.alert.dcc.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul de lettercombinatie in die je samen met het papieren bewijs hebt gekregen.
      ///
      /// Locales: en, nl
      static let holderDcctokenentryHeader = Rswift.StringResource(key: "holder.dcctokenentry.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul hier je beoordelingscode in
      ///
      /// Locales: en, nl
      static let visitorpass_code_review_placeholder_screenreader = Rswift.StringResource(key: "visitorpass_code_review_placeholder_screenreader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul hier je lettercombinatie in
      ///
      /// Locales: en, nl
      static let holderDcctokenentryTokenFieldPlaceholderScreenreader = Rswift.StringResource(key: "holder.dcctokenentry.tokenField.placeholder.screenreader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul hier je ophaalcode in
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowTokenPlaceholderScreenreader = Rswift.StringResource(key: "holder.tokenentry.regularflow.token.placeholder.screenreader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul hier je ophaalcode in
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowTokenPlaceholderScreenreader = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.token.placeholder.screenreader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul je beoordelingscode in. Deze heb je van de balie gekregen waar jouw vaccinatie werd beoordeeld.
      ///
      /// Locales: en, nl
      static let visitorpass_code_description = Rswift.StringResource(key: "visitorpass_code_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul je lettercombinatie in
      ///
      /// Locales: en, nl
      static let holderDcctokenentryTitle = Rswift.StringResource(key: "holder.dcctokenentry.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul je ophaalcode in
      ///
      /// Locales: en, nl
      static let holder_wasUserTestedAtGGD_no_buttonSubtitle = Rswift.StringResource(key: "holder_wasUserTestedAtGGD_no_buttonSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul je verificatiecode in. Deze krijg je via sms of e-mail.
      ///
      /// Locales: en, nl
      static let visitorpass_code_description_deeplink = Rswift.StringResource(key: "visitorpass_code_description_deeplink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul jouw ophaalcode in. Deze heb je van je testlocatie gekregen.
      ///
      /// Locales: en, nl
      static let holderTokenentryRegularflowText = Rswift.StringResource(key: "holder.tokenentry.regularflow.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Vul jouw verificatiecode in om je negatieve testuitslag op te halen.
      ///
      /// Locales: en, nl
      static let holderTokenentryUniversallinkflowText = Rswift.StringResource(key: "holder.tokenentry.universallinkflow.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static let holderLocationTitle = Rswift.StringResource(key: "holder.location.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static let holderProviderHeader = Rswift.StringResource(key: "holder.provider.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static let holder_whereUserTested_title = Rswift.StringResource(key: "holder_whereUserTested_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar ben je gevaccineerd?
      ///
      /// Locales: en, nl
      static let holder_chooseEventLocation_title = Rswift.StringResource(key: "holder_chooseEventLocation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar moet ik op letten?
      ///
      /// Locales: en, nl
      static let verifierScanButtonMoreInformation = Rswift.StringResource(key: "verifier.scan.button.moreInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waar moet ik op letten?
      ///
      /// Locales: en, nl
      static let verifierStartButtonShowinstructions = Rswift.StringResource(key: "verifier.start.button.showinstructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waarom moet ik kiezen?
      ///
      /// Locales: en, nl
      static let holder_identitySelection_why = Rswift.StringResource(key: "holder_identitySelection_why", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Waarom moet ik één naam kiezen?
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_why_title = Rswift.StringResource(key: "holder_fuzzyMatching_why_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wat betekent dit?
      ///
      /// Locales: en, nl
      static let holder_qr_code_hidden_explanation_button = Rswift.StringResource(key: "holder_qr_code_hidden_explanation_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wat kan ik doen?
      ///
      /// Locales: en, nl
      static let verifierDeniedTitle = Rswift.StringResource(key: "verifier.denied.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wat kan ik doen?
      ///
      /// Locales: en, nl
      static let verifierResultDeniedReadmore = Rswift.StringResource(key: "verifier.result.denied.readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wat wil je toevoegen?
      ///
      /// Locales: en, nl
      static let holderChooseqrcodetypeTitle = Rswift.StringResource(key: "holder.chooseqrcodetype.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: We konden geen herstelbewijs maken
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: We kunnen geen bewijs maken
      ///
      /// Locales: en, nl
      static let holder_listRemoteEvents_endStateCantCreateCertificate_title = Rswift.StringResource(key: "holder_listRemoteEvents_endStateCantCreateCertificate_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: We starten de app voor je op...
      ///
      /// Locales: en, nl
      static let holderLaunchText = Rswift.StringResource(key: "holder.launch.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: We starten de app voor je op...
      ///
      /// Locales: en, nl
      static let verifierLaunchText = Rswift.StringResource(key: "verifier.launch.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Weet je zeker dat je de instelling wilt aanpassen?
      ///
      /// Locales: en, nl
      static let verifier_risksetting_confirmation_dialog_title = Rswift.StringResource(key: "verifier_risksetting_confirmation_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Weet je zeker dat je terug wilt?
      ///
      /// Locales: en, nl
      static let holderTestresultsAlertTitle = Rswift.StringResource(key: "holder.testresults.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Weet je zeker dat je terug wilt?
      ///
      /// Locales: en, nl
      static let holderVaccinationAlertTitle = Rswift.StringResource(key: "holder.vaccination.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Weet je zeker dat je wilt overslaan?
      ///
      /// Locales: en, nl
      static let holder_identitySelection_skipAlert_title = Rswift.StringResource(key: "holder_identitySelection_skipAlert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welk bewijs is nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static let holderDashboardEmptyInternationalButton = Rswift.StringResource(key: "holder.dashboard.empty.international.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welk bewijs is nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static let holderDashboardIntroInternationalButton = Rswift.StringResource(key: "holder.dashboard.intro.international.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welk soort toegang mag ik geven?
      ///
      /// Locales: en, nl
      static let verifier_risksetting_readmore = Rswift.StringResource(key: "verifier_risksetting_readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welk soort toegang mag ik geven?
      ///
      /// Locales: en, nl
      static let verifier_risksetting_start_readmore = Rswift.StringResource(key: "verifier_risksetting_start_readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welke bewijzen kan ik inscannen?
      ///
      /// Locales: en, nl
      static let holder_paperproof_startscanning_button_whichProofs = Rswift.StringResource(key: "holder_paperproof_startscanning_button_whichProofs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welke bewijzen kan ik inscannen?
      ///
      /// Locales: en, nl
      static let holder_paperproof_whichProofsCanBeUsed_title = Rswift.StringResource(key: "holder_paperproof_whichProofsCanBeUsed_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Welke naam kies je?
      ///
      /// Locales: en, nl
      static let holder_identitySelection_title = Rswift.StringResource(key: "holder_identitySelection_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wil je de app resetten?
      ///
      /// Locales: en, nl
      static let holderCleardataAlertTitle = Rswift.StringResource(key: "holder.cleardata.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wil je je bewijs vervangen?
      ///
      /// Locales: en, nl
      static let holderEventIdentityAlertTitle = Rswift.StringResource(key: "holder.event.identity.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wil je jouw testuitslag ophalen? Log dan opnieuw in met DigiD.
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_digid_message_testFlow = Rswift.StringResource(key: "holder_authentication_popup_digid_message_testFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wil je jouw vaccinatiegegevens ophalen? Log dan opnieuw in met DigiD.
      ///
      /// Locales: en, nl
      static let holder_authentication_popup_digid_message_vaccinationFlow = Rswift.StringResource(key: "holder_authentication_popup_digid_message_vaccinationFlow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wil je verwijderde vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad.
      ///
      /// Locales: en, nl
      static let holder_fuzzyMatching_onboarding_thirdPage_body = Rswift.StringResource(key: "holder_fuzzyMatching_onboarding_thirdPage_body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Woon je in Nederland en heb je een Nederlands identiteitsbewijs? Dan kun je een DigiD aanvragen om je testuitslag of vaccinatiegegevens op te halen.
      ///
      /// Locales: en, nl
      static let holder_noDigiD_message = Rswift.StringResource(key: "holder_noDigiD_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Wordt automatisch geldig
      ///
      /// Locales: en, nl
      static let holderDashboardQrValidityDateAutomaticallyBecomesValidOn = Rswift.StringResource(key: "holder.dashboard.qr.validityDate.automaticallyBecomesValidOn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zet de zaklamp aan.
      ///
      /// Locales: en, nl
      static let holderTokenscanTorchEnable = Rswift.StringResource(key: "holder.tokenscan.torch.enable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zet de zaklamp aan.
      ///
      /// Locales: en, nl
      static let verifierScanTorchEnable = Rswift.StringResource(key: "verifier.scan.torch.enable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zet de zaklamp uit.
      ///
      /// Locales: en, nl
      static let holderTokenscanTorchDisable = Rswift.StringResource(key: "holder.tokenscan.torch.disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zet de zaklamp uit.
      ///
      /// Locales: en, nl
      static let verifierScanTorchDisable = Rswift.StringResource(key: "verifier.scan.torch.disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zie je een vinkje op je scherm? Dan is de QR-code geldig en kloppen de gegevens met het identiteitsbewijs. Je mag de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static let scan_instructions_4_description_1G = Rswift.StringResource(key: "scan_instructions_4_description_1G", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekte waarvan hersteld / Disease recovered from:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutRecoveryPathogen = Rswift.StringResource(key: "holder.showqr.eu.about.recovery.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekte waarvan hersteld:
      ///
      /// Locales: en, nl
      static let holderDccRecoveryPathogen = Rswift.StringResource(key: "holder.dcc.recovery.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekteverwekker / Disease targeted:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestPathogen = Rswift.StringResource(key: "holder.showqr.eu.about.test.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekteverwekker / Disease targeted:
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutVaccinationPathogen = Rswift.StringResource(key: "holder.showqr.eu.about.vaccination.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static let holderDccTestPathogen = Rswift.StringResource(key: "holder.dcc.test.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static let holderDccVaccinationPathogen = Rswift.StringResource(key: "holder.dcc.vaccination.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static let holderEventAboutVaccinationPathogen = Rswift.StringResource(key: "holder.event.about.vaccination.pathogen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zijn dit al je vaccinaties?
      ///
      /// Locales: en, nl
      static let holderErrorstateSomeresultTitle = Rswift.StringResource(key: "holder.errorstate.someresult.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zo gebruikt de app jouw gegevens
      ///
      /// Locales: en, nl
      static let holderConsentTitle = Rswift.StringResource(key: "holder.consent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: Zonder akkoord met de bijgewerkte voorwaarden heb je geen toegang tot de CoronaCheck-app.
      ///
      /// Locales: en, nl
      static let newTermsErrorMessage = Rswift.StringResource(key: "new.terms.error.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: bezoekersbewijs
      ///
      /// Locales: en, nl
      static let general_visitorPass = Rswift.StringResource(key: "general_visitorPass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: doses
      ///
      /// Locales: en, nl
      static let generalDoses = Rswift.StringResource(key: "general.doses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: dosis
      ///
      /// Locales: en, nl
      static let generalDose = Rswift.StringResource(key: "general.dose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: en
      ///
      /// Locales: en, nl
      static let general_and = Rswift.StringResource(key: "general_and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: geldig tot
      ///
      /// Locales: en, nl
      static let holderDashboardQrExpiryDatePrefixValidUptoAndIncluding = Rswift.StringResource(key: "holder.dashboard.qr.expiryDate.prefix.validUptoAndIncluding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: geldig vanaf
      ///
      /// Locales: en, nl
      static let holderDashboardQrValidityDatePrefixValidFrom = Rswift.StringResource(key: "holder.dashboard.qr.validityDate.prefix.validFrom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: gescande QR-code
      ///
      /// Locales: en, nl
      static let general_scannedQRCode = Rswift.StringResource(key: "general_scannedQRCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: herstelbewijs
      ///
      /// Locales: en, nl
      static let general_recoverycertificate = Rswift.StringResource(key: "general_recoverycertificate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: hersteldatum
      ///
      /// Locales: en, nl
      static let generalRecoverydate = Rswift.StringResource(key: "general.recoverydate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/alleen-internationaal
      ///
      /// Locales: en, nl
      static let holder_dashboard_noDomesticCertificatesBanner_url = Rswift.StringResource(key: "holder_dashboard_noDomesticCertificatesBanner_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/app/niet-in-gebruik
      ///
      /// Locales: en, nl
      static let holder_deactivation_url = Rswift.StringResource(key: "holder_deactivation_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/accessibility-in-app
      ///
      /// Locales: en, nl
      static let holderUrlAccessibility = Rswift.StringResource(key: "holder.url.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/accessibility-in-app
      ///
      /// Locales: en, nl
      static let verifierUrlAccessibility = Rswift.StringResource(key: "verifier.url.accessibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/colofon-in-app.html
      ///
      /// Locales: en, nl
      static let holderUrlColophon = Rswift.StringResource(key: "holder.url.colophon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/faq-in-app
      ///
      /// Locales: en, nl
      static let holderUrlFaq = Rswift.StringResource(key: "holder.url.faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/faq-scanner-in-app
      ///
      /// Locales: en, nl
      static let verifierUrlFaq = Rswift.StringResource(key: "verifier.url.faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/faq/1-11-mijn-qr-code-is-verborgen-wat-betekent-dit/
      ///
      /// Locales: en, nl
      static let holder_qr_code_hidden_explanation_url = Rswift.StringResource(key: "holder_qr_code_hidden_explanation_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app
      ///
      /// Locales: en, nl
      static let verifierUrlPrivacy = Rswift.StringResource(key: "verifier.url.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/privacy
      ///
      /// Locales: en, nl
      static let holder_storedEvents_url = Rswift.StringResource(key: "holder_storedEvents_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/privacy-in-app
      ///
      /// Locales: en, nl
      static let holderUrlPrivacy = Rswift.StringResource(key: "holder.url.privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/nl/testafspraak-in-app
      ///
      /// Locales: en, nl
      static let holderUrlAppointment = Rswift.StringResource(key: "holder.url.appointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/scanner/niet-in-gebruik
      ///
      /// Locales: en, nl
      static let verifier_deactivation_url = Rswift.StringResource(key: "verifier_deactivation_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/toegangsregels/1g-bewijs
      ///
      /// Locales: en, nl
      static let holder_dashboard_only1GaccessBanner_link = Rswift.StringResource(key: "holder_dashboard_only1GaccessBanner_link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/toegangsregels/3g-1g-bewijs
      ///
      /// Locales: en, nl
      static let holder_dashboard_3Gand1GaccessBanner_link = Rswift.StringResource(key: "holder_dashboard_3Gand1GaccessBanner_link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/toegangsregels/3g-bewijs
      ///
      /// Locales: en, nl
      static let holder_dashboard_only3GaccessBanner_link = Rswift.StringResource(key: "holder_dashboard_only3GaccessBanner_link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://coronacheck.nl/welketoegang-cc
      ///
      /// Locales: en, nl
      static let verifier_risksetting_start_readmore_url = Rswift.StringResource(key: "verifier_risksetting_start_readmore_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://status.coronacheck.nl/
      ///
      /// Locales: en, nl
      static let holderErrorstateMalfunctionsUrl = Rswift.StringResource(key: "holder.errorstate.malfunctions.url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://www.coronacheck.nl/nl/faq/1-12-de-qr-code-van-mijn-vaccinatie-is-verlopen-wat-moet-ik-doen/
      ///
      /// Locales: en, nl
      static let holder_qr_code_expired_explanation_url = Rswift.StringResource(key: "holder_qr_code_expired_explanation_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://www.digid.nl/digid-aanvragen-activeren#hoe-vraag-ik-digid-aan
      ///
      /// Locales: en, nl
      static let holder_noDigiD_url = Rswift.StringResource(key: "holder_noDigiD_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://www.nederlandwereldwijd.nl/reizen/reisadviezen
      ///
      /// Locales: en, nl
      static let holderDashboardEmptyInternationalUrl = Rswift.StringResource(key: "holder.dashboard.empty.international.url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://www.nederlandwereldwijd.nl/reizen/reisadviezen
      ///
      /// Locales: en, nl
      static let holderDashboardIntroInternationalUrl = Rswift.StringResource(key: "holder.dashboard.intro.international.url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: https://www.rijksoverheid.nl/welketoegang-cc
      ///
      /// Locales: en, nl
      static let verifier_risksetting_readmore_url = Rswift.StringResource(key: "verifier_risksetting_readmore_url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: ja
      ///
      /// Locales: en, nl
      static let holder_eventdetails_vaccinationStatus_complete = Rswift.StringResource(key: "holder_eventdetails_vaccinationStatus_complete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: ja (eerder corona gehad)
      ///
      /// Locales: en, nl
      static let holder_eventdetails_vaccinationStatus_recovery = Rswift.StringResource(key: "holder_eventdetails_vaccinationStatus_recovery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: ja (ergens anders gevaccineerd)
      ///
      /// Locales: en, nl
      static let holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere = Rswift.StringResource(key: "holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: min
      ///
      /// Locales: en, nl
      static let holderDashboardQrMinute = Rswift.StringResource(key: "holder.dashboard.qr.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: minuten
      ///
      /// Locales: en, nl
      static let holderDashboardQrMinutesLong = Rswift.StringResource(key: "holder.dashboard.qr.minutes.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: minuut
      ///
      /// Locales: en, nl
      static let holderDashboardQrMinuteLong = Rswift.StringResource(key: "holder.dashboard.qr.minute.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: negatief (geen coronavirus vastgesteld)
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestNegativeSingleLanguage = Rswift.StringResource(key: "holder.showqr.eu.about.test.negative.singleLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: negatief (geen coronavirus vastgesteld) / negative (no coronavirus detected)
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestNegative = Rswift.StringResource(key: "holder.showqr.eu.about.test.negative", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: nu
      ///
      /// Locales: en, nl
      static let scan_log_list_now = Rswift.StringResource(key: "scan_log_list_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: opgehaalde gegevens
      ///
      /// Locales: en, nl
      static let general_retrievedDetails = Rswift.StringResource(key: "general_retrievedDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: papieren bewijs
      ///
      /// Locales: en, nl
      static let generalPaperflow = Rswift.StringResource(key: "general.paperflow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: positief (coronavirus vastgesteld)
      ///
      /// Locales: en, nl
      static let holderShowqrEuAboutTestPostive = Rswift.StringResource(key: "holder.showqr.eu.about.test.postive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: positieve test
      ///
      /// Locales: en, nl
      static let generalPositiveTest = Rswift.StringResource(key: "general.positiveTest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: testbewijs
      ///
      /// Locales: en, nl
      static let general_testcertificate = Rswift.StringResource(key: "general_testcertificate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: testuitslag
      ///
      /// Locales: en, nl
      static let general_testresult = Rswift.StringResource(key: "general_testresult", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: tot
      ///
      /// Locales: en, nl
      static let generalUptoandincluding = Rswift.StringResource(key: "general.uptoandincluding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: uur
      ///
      /// Locales: en, nl
      static let holderDashboardQrHour = Rswift.StringResource(key: "holder.dashboard.qr.hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: vaccinatie
      ///
      /// Locales: en, nl
      static let general_vaccination = Rswift.StringResource(key: "general_vaccination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: vaccinatiebeoordeling
      ///
      /// Locales: en, nl
      static let general_vaccinationAssessment = Rswift.StringResource(key: "general_vaccinationAssessment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: vaccinatiebewijs
      ///
      /// Locales: en, nl
      static let general_vaccinationcertificate = Rswift.StringResource(key: "general_vaccinationcertificate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// nl translation: wordt automatisch geldig over
      ///
      /// Locales: en, nl
      static let holderDashboardQrValidityDatePrefixAutomaticallyBecomesValidOn = Rswift.StringResource(key: "holder.dashboard.qr.validityDate.prefix.automaticallyBecomesValidOn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static func general_testresults(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_testresults", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_testresults"
        }

        let format = NSLocalizedString("general_testresults", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static func general_vaccinationAssessments(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_vaccinationAssessments", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccinationAssessments"
        }

        let format = NSLocalizedString("general_vaccinationAssessments", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %#@format@
      ///
      /// Locales: en, nl
      static func general_vaccinations(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_vaccinations", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccinations"
        }

        let format = NSLocalizedString("general_vaccinations", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %1$li tot %2$li bewijzen gescand
      ///
      /// Locales: en, nl
      static func scan_log_list_entry(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scan_log_list_entry", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_list_entry"
        }

        let format = NSLocalizedString("scan_log_list_entry", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: %@ van %@
      ///
      /// Locales: en, nl
      static func holderVaccinationAboutOff(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.vaccination.about.off", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.about.off"
        }

        let format = NSLocalizedString("holder.vaccination.about.off", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: %@ van %@.
      ///
      /// Locales: en, nl
      static func generalListAccessibility(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.list.accessibility", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.list.accessibility"
        }

        let format = NSLocalizedString("general.list.accessibility", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: %@-controle klaar
      ///
      /// Locales: en, nl
      static func verifier_result_access_title_policy(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_result_access_title_policy", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_result_access_title_policy"
        }

        let format = NSLocalizedString("verifier_result_access_title_policy", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %@-toegang
      ///
      /// Locales: en, nl
      static func verifier_risksetting_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_risksetting_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_title"
        }

        let format = NSLocalizedString("verifier_risksetting_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %@-toegang
      ///
      /// Locales: en, nl
      static func verifier_scanner_policy_indication(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_scanner_policy_indication", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_scanner_policy_indication"
        }

        let format = NSLocalizedString("verifier_scanner_policy_indication", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: %@-toegang ingesteld
      ///
      /// Locales: en, nl
      static func verifier_risksetting_changeselection(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_risksetting_changeselection", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_changeselection"
        }

        let format = NSLocalizedString("verifier_risksetting_changeselection", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: 's middags
      ///
      /// Locales: en, nl
      static func holderDashboardQrPm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.pm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.pm"
        }

        return NSLocalizedString("holder.dashboard.qr.pm", bundle: bundle, comment: "")
      }

      /// nl translation: 's morgens
      ///
      /// Locales: en, nl
      static func holderDashboardQrAm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.am", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.am"
        }

        return NSLocalizedString("holder.dashboard.qr.am", bundle: bundle, comment: "")
      }

      /// nl translation: (Papieren) bewijs toevoegen
      ///
      /// Locales: en, nl
      static func holder_menu_paperproof_subTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_paperproof_subTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_paperproof_subTitle"
        }

        return NSLocalizedString("holder_menu_paperproof_subTitle", bundle: bundle, comment: "")
      }

      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryDateinformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.dateinformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.dateinformation"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.dateinformation", bundle: bundle, comment: "")
      }

      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestDateinformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.dateinformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.dateinformation"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.dateinformation", bundle: bundle, comment: "")
      }

      /// nl translation: *Datum weergegeven in dag-maand-jaar / Date noted in day-month-year
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationDateinformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.dateinformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.dateinformation"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.dateinformation", bundle: bundle, comment: "")
      }

      /// nl translation: 1G
      ///
      /// Locales: en, nl
      static func holder_dashboard_domesticQRCard_1G_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_domesticQRCard_1G_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_domesticQRCard_1G_label"
        }

        return NSLocalizedString("holder_dashboard_domesticQRCard_1G_label", bundle: bundle, comment: "")
      }

      /// nl translation: 1G- of 3G-toegang
      ///
      /// Locales: en, nl
      static func new_in_app_risksetting_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_in_app_risksetting_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_in_app_risksetting_title"
        }

        return NSLocalizedString("new_in_app_risksetting_title", bundle: bundle, comment: "")
      }

      /// nl translation: 1G-toegang
      ///
      /// Locales: en, nl
      static func holder_showQR_domestic_title_1g(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_domestic_title_1g", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_domestic_title_1g"
        }

        return NSLocalizedString("holder_showQR_domestic_title_1g", bundle: bundle, comment: "")
      }

      /// nl translation: 1G-toegang
      ///
      /// Locales: en, nl
      static func new_policy_1G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_policy_1G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_policy_1G_title"
        }

        return NSLocalizedString("new_policy_1G_title", bundle: bundle, comment: "")
      }

      /// nl translation: 3G
      ///
      /// Locales: en, nl
      static func holder_dashboard_domesticQRCard_3G_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_domesticQRCard_3G_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_domesticQRCard_3G_label"
        }

        return NSLocalizedString("holder_dashboard_domesticQRCard_3G_label", bundle: bundle, comment: "")
      }

      /// nl translation: 3G-toegang
      ///
      /// Locales: en, nl
      static func holder_showQR_domestic_title_3g(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_domestic_title_3g", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_domestic_title_3g"
        }

        return NSLocalizedString("holder_showQR_domestic_title_3g", bundle: bundle, comment: "")
      }

      /// nl translation: 3G-toegang in Nederland
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only3G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only3G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only3G_title"
        }

        return NSLocalizedString("holder_newintheapp_content_only3G_title", bundle: bundle, comment: "")
      }

      /// nl translation: 3G-toegang in Nederland
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_only3GAccess_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only3GAccess_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_only3GAccess_title"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only3GAccess_title", bundle: bundle, comment: "")
      }

      /// nl translation: <a href="https://coronacheck.nl/nl/dosis">Lees meer over de dosis</a>
      ///
      /// Locales: en, nl
      static func holder_showqr_eu_about_vaccination_dosage_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_eu_about_vaccination_dosage_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_eu_about_vaccination_dosage_message"
        }

        return NSLocalizedString("holder_showqr_eu_about_vaccination_dosage_message", bundle: bundle, comment: "")
      }

      /// nl translation: <a href="https://coronacheck.nl/nl/faq-in-app">Lees hier</a> welke informatie in de QR-code staat.
      ///
      /// Locales: en, nl
      static func holderBannerNewqrMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.banner.newqr.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.banner.newqr.message"
        }

        return NSLocalizedString("holder.banner.newqr.message", bundle: bundle, comment: "")
      }

      /// nl translation: <b>%@</b>-toegang ingesteld
      ///
      /// Locales: en, nl
      static func verifier_start_scan_qr_policy_indication(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_start_scan_qr_policy_indication", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_start_scan_qr_policy_indication"
        }

        let format = NSLocalizedString("verifier_start_scan_qr_policy_indication", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <b>Dit is veranderd</b><ul><li>Beschrijving van gebruiksregels</li><li>Uitleg over gebruik van de app</li><li>Toestemming voor gebruik camera</li></ul>
      ///
      /// Locales: en, nl
      static func newTermsHighlights(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.highlights", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.highlights"
        }

        return NSLocalizedString("new.terms.highlights", bundle: bundle, comment: "")
      }

      /// nl translation: <b>Dit kun je doen:</b>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageTwo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.two", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.two"
        }

        return NSLocalizedString("verifier.denied.message.two", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Blijft het scherm rood?</b></p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageFour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.four", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.four"
        }

        return NSLocalizedString("verifier.denied.message.four", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Heb je corona gehad?</b><br />Dan heb je soms een prik minder nodig om volledig gevaccineerd te zijn. Haal ook je oudste positieve testuitslag op om die mogelijk mee te laten tellen in je vaccinatiebewijs.</p>
      ///
      /// Locales: en, nl
      static func holder_addVaccination_alsoCollectPositiveTestResults_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_addVaccination_alsoCollectPositiveTestResults_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_addVaccination_alsoCollectPositiveTestResults_message"
        }

        return NSLocalizedString("holder_addVaccination_alsoCollectPositiveTestResults_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Check in het land waar je getest of gevaccineerd bent hoe je jouw gegevens kunt aanpassen.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_foreignDCC_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_foreignDCC_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_foreignDCC_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_foreignDCC_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holderDccRecoveryFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.footer"
        }

        return NSLocalizedString("holder.dcc.recovery.footer", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holderDccTestFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.footer"
        }

        return NSLocalizedString("holder.dcc.test.footer", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Kloppen er gegevens niet?</b><br />Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holderDccVaccinationFooter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.footer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.footer"
        }

        return NSLocalizedString("holder.dcc.vaccination.footer", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Let op:</b> Als je tijdens het scannen wisselt van scan-instelling moet je %li minuten wachten voordat je weer kunt scannen.</p>
      ///
      /// Locales: en, nl
      static func verifier_risksetting_active_lock_warning_header(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_risksetting_active_lock_warning_header", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_active_lock_warning_header"
        }

        let format = NSLocalizedString("verifier_risksetting_active_lock_warning_header", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p><b>Let op:</b> zonder groen scherm met vinkje mag de bezoeker niet toegelaten worden.</p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageSix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.six", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.six"
        }

        return NSLocalizedString("verifier.denied.message.six", bundle: bundle, comment: "")
      }

      /// nl translation: <p><b>Let op:</b> zonder scherm met vinkje mag de bezoeker niet toegelaten worden.</p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageSix_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.six_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.six_1G"
        }

        return NSLocalizedString("verifier.denied.message.six_1G", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Alleen vaccinatie- en testgegevens die bij de naam horen die je hebt gekozen zijn bewaard (<b>%@</b>).</p><p>De onderstaande gegevens zijn verwijderd uit de app:</p>%@<p>Wil je vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad. Voeg ze daarna zelf opnieuw toe aan de app.</p>
      ///
      /// Locales: en, nl
      static func holder_identityRemoved_moreinfo_body(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identityRemoved_moreinfo_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identityRemoved_moreinfo_body"
        }

        let format = NSLocalizedString("holder_identityRemoved_moreinfo_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: <p>Als de QR-code van je vaccinatie verborgen is, dan heb je deze waarschijnlijk niet nodig. Dit komt omdat je ook QR-codes van nieuwere vaccinaties in de app hebt staan.</p><p>Verborgen QR-codes kun je gewoon nog laten zien en gebruiken als dat nodig is.</p>
      ///
      /// Locales: en, nl
      static func holder_qr_code_hidden_explanation_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_hidden_explanation_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_hidden_explanation_description"
        }

        return NSLocalizedString("holder_qr_code_hidden_explanation_description", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Als je QR-code is verlopen betekent dit dat je vaccinatie nog geldig is, maar het bewijs dat je hebt toegevoegd niet meer. Je kunt een nieuw bewijs met QR-code aanvragen en deze opnieuw toevoegen aan de app.</p><p>Heb je een nieuwere vaccinatie in de app staan? Dan kun je ook die QR-code gebruiken.</p>
      ///
      /// Locales: en, nl
      static func holder_qr_code_expired_explanation_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_expired_explanation_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_expired_explanation_description"
        }

        return NSLocalizedString("holder_qr_code_expired_explanation_description", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Ben je buiten de Europese Unie gevaccineerd en op bezoek in Nederland? Dan kun je van jouw vaccinatiebeoordeling en een negatieve testuitslag een bezoekersbewijs maken.</p><p>Met je bezoekersbewijs krijg je toegang tot plekken en activiteiten in Nederland die vragen om een coronatoegangsbewijs.</p><p>Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func visitorpass_start_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_start_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_start_message"
        }

        return NSLocalizedString("visitorpass_start_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Ben je in het buitenland of ga je de grens over? Gebruik dan altijd de internationale QR-code hieronder. Controleer voor vertrek welk bewijs je nodig hebt.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardIntroInternational(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.intro.international", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.intro.international"
        }

        return NSLocalizedString("holder.dashboard.intro.international", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Ben je in het buitenland of ga je de grens over? Gebruik dan altijd jouw internationale bewijs. Controleer voor vertrek welk bewijs je nodig hebt.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardEmptyInternationalMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.empty.international.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.empty.international.message"
        }

        return NSLocalizedString("holder.dashboard.empty.international.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Ben je net getest? Het kan een paar uur duren voordat jouw positieve testuitslag beschikbaar is. Probeer het later nog eens.</p><p>Al even geleden getest? Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holderRecoveryNolistMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.recovery.nolist.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.recovery.nolist.message"
        }

        return NSLocalizedString("holder.recovery.nolist.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Bezoek je een plek in Nederland? Check vooraf of je een bewijs voor <a href="https://coronacheck.nl/toegangsregels/3g-1g-toegang">3G- of 1G toegang</a> nodig hebt.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_empty_domestic_3Gand1Gaccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_empty_domestic_3Gand1Gaccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_empty_domestic_3Gand1Gaccess_message"
        }

        return NSLocalizedString("holder_dashboard_empty_domestic_3Gand1Gaccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Check vooraf of je een bewijs voor <a href="https://coronacheck.nl/toegangsregels/3g-1g-toegang">3G- of 1G toegang</a> nodig hebt. Laat ook je identiteitsbewijs zien.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_intro_domestic_3Gand1Gaccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_intro_domestic_3Gand1Gaccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_intro_domestic_3Gand1Gaccess"
        }

        return NSLocalizedString("holder_dashboard_intro_domestic_3Gand1Gaccess", bundle: bundle, comment: "")
      }

      /// nl translation: <p>CoronaCheck Scanner is ontwikkeld zodat bepaalde plekken en activiteiten veilig hun deuren kunnen openen.</p><p> Bezoekers maken een coronabewijs met een QR-code van hun vaccinatie, negatieve testuitslag, of herstel van corona. Met behulp van deze app krijgen alleen bezoekers met zo’n coronabewijs toegang. Zo kunnen steeds meer plekken veilig bezocht worden.</p>
      ///
      /// Locales: en, nl
      static func verifierAboutText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.about.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.about.text"
        }

        return NSLocalizedString("verifier.about.text", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Dan is het niet mogelijk om jouw bewijs op deze manier aan de app toe te voegen.</p><p>Je hebt alleen een lettercombinatie gekregen als je jouw papieren coronabewijs hebt aangevraagd bij je zorgverlener, of opgestuurd hebt gekregen per post.</p><p><b>Zelf jouw bewijs geprint?</b><br />Voeg je bewijs dan toe in de app via het menu. Ga naar ‘Bewijs toevoegen’ en log in met DigiD.</p>
      ///
      /// Locales: en, nl
      static func holderDcctokenentryinfoBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentryinfo.body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentryinfo.body"
        }

        return NSLocalizedString("holder.dcctokenentryinfo.body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>De CoronaCheck-app heeft af en toe internet nodig om te blijven werken. Zonder internetverbinding werkt jouw app nog tot %@. Open de app zodra je internet hebt. Dan doet deze het gewoon weer.</p><p>Maak regelmatig verbinding om problemen te voorkomen.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardConfigIsAlmostOutOfDatePageMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.page.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.configIsAlmostOutOfDate.page.message"
        }

        let format = NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.page.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>De app maakt in 3 stappen een QR-code. De QR-code is jouw bewijs.</p><b>1. Kies het soort bewijs</b><p>Je kan een vaccinatiebewijs, een testbewijs of een herstelbewijs maken.</p><b>2. Automatisch gegevens ophalen</b><p>De app haalt direct de gegevens van je vaccinatie, testuitslag of herstel op.</p><b>3. QR-codes staan klaar</b><p>De app maakt twee QR-codes: een QR-code voor Nederland en een internationale.</p>
      ///
      /// Locales: en, nl
      static func holderAboutmakingaqrBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.aboutmakingaqr.body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.aboutmakingaqr.body"
        }

        return NSLocalizedString("holder.aboutmakingaqr.body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>De scan-instelling log houdt bij welk soort toegang is gebruikt tijdens het scannen. Een BOA kan vragen om deze log te bekijken.</p><p>Om privacyredenen worden alleen de scan-instellingen van de laatste %li minuten opgeslagen op deze telefoon. Er worden geen persoonsgegevens opgeslagen. Lees meer in de <a href="https://coronacheck.nl/nl/faq-scanner-in-app">meestgestelde vragen</a>.</p>
      ///
      /// Locales: en, nl
      static func scan_log_message(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scan_log_message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_message"
        }

        let format = NSLocalizedString("scan_log_message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Dit bewijs is ongeldig verklaard. Daarom kun je het niet aan de app toevoegen.</p><p>Probeer een geldig bewijs toe te voegen, of bel de CoronaCheck helpdesk op <a href="tel:08001421">0800-1421</a> en geef onderstaande foutcode door.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateNoValidCertificate_body(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_endStateNoValidCertificate_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateNoValidCertificate_body"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_endStateNoValidCertificate_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Dit papieren bewijs is niet meer geldig. Dit kan verschillende oorzaken hebben:</p><ul><li>Je vaccinatie of herstel is nog geldig, maar het papieren bewijs niet. Vraag dan opnieuw je papieren bewijs aan.</li><li>Je vaccinatie of herstel is verlopen.</li></ul>
      ///
      /// Locales: en, nl
      static func holderCheckdccExpiredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.expired.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.expired.message"
        }

        return NSLocalizedString("holder.checkdcc.expired.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Een bezoekersbewijs is geldig tot %li dagen na de beoordeling van je vaccinatie. Blijf je langer in Nederland? Dan kun je opnieuw een bezoekersbewijs aanvragen. Ga voor meer informatie naar <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_visitorpassexpired_body(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_dashboard_visitorpassexpired_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_visitorpassexpired_body"
        }

        let format = NSLocalizedString("holder_dashboard_visitorpassexpired_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Een rood scherm met kruis betekent dat de QR-code niet aan Nederlandse eisen voldoet, of niet geldig is op jouw locatie.</p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageOne_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.one_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.one_1G"
        }

        return NSLocalizedString("verifier.denied.message.one_1G", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Een rood scherm met kruis betekent dat de QR-code niet aan Nederlandse eisen voldoet.</p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.one", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.one"
        }

        return NSLocalizedString("verifier.denied.message.one", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Er gaat iets mis bij de testlocatie. Daardoor kunnen jouw gegevens niet worden opgehaald.</p><p><b>Wat nu?</b><br />Neem contact op met je testlocatie en geef de volgende foutcode door:</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateTestMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.test.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.test.message"
        }

        let format = NSLocalizedString("holder.errorstate.test.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Er gaat iets mis bij het maken van je bewijs. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateClientMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.client.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.client.message"
        }

        let format = NSLocalizedString("holder.errorstate.client.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Er gaat iets mis bij het ophalen van je gegevens. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateFetchMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.fetch.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.fetch.message"
        }

        let format = NSLocalizedString("holder.errorstate.fetch.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Er gaat iets mis bij het ophalen van je gegevens. Wil je het later nog eens proberen?</p><p><b>Foutcodes:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateFetchMessages(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.fetch.messages", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.fetch.messages"
        }

        let format = NSLocalizedString("holder.errorstate.fetch.messages", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Er zijn geen gegevens over je testuitslag beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Heb je al een testuitslag van de GGD gekregen? Dan kan het nog een paar uur duren voordat je de uitslag hier kunt ophalen. Probeer het later opnieuw.</p>
      ///
      /// Locales: en, nl
      static func holderTestNolistMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.test.nolist.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.test.nolist.message"
        }

        return NSLocalizedString("holder.test.nolist.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Er zijn geen gegevens over je testuitslag beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Heb je al een testuitslag van de GGD gekregen? Het kan een paar uur duren voordat je de uitslag hier kunt ophalen. Probeer het later opnieuw.</p>
      ///
      /// Locales: en, nl
      static func holderEventNolistMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.nolist.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.nolist.message"
        }

        return NSLocalizedString("holder.event.nolist.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Er zijn geen gegevens over je vaccinatie(s) beschikbaar. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Ben je kortgeleden gevaccineerd? Het kan een paar uur duren tot de gegevens beschikbaar zijn.</p>
      ///
      /// Locales: en, nl
      static func holderVaccinationNolistMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.nolist.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.nolist.message"
        }

        return NSLocalizedString("holder.vaccination.nolist.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Er zijn geen gegevens over je vaccinatiebeoordeling beschikbaar. Ga terug naar de balie waar jouw vaccinatie is beoordeeld.</p><p>Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_nolist_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_nolist_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_nolist_message"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_nolist_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Er zijn gegevens van jou ongeldig verklaard. Daarom zijn deze uit de app verwijderd. Het gaat om de volgende gegevens:</p>%@<p>Mogelijk zijn hierdoor ook bewijzen uit de app verwijderd. Voeg een geldige vaccinatie of test toe om bewijzen weer terug te halen.</p><p>Heb je vragen? Bel de CoronaCheck helpdesk op <a href="tel:08001421">0800-1421</a> en geef onderstaande foutcode door.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_moreinfo_body(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_invaliddetailsremoved_moreinfo_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_moreinfo_body"
        }

        let format = NSLocalizedString("holder_invaliddetailsremoved_moreinfo_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: <p>Ga terug naar de balie waar jouw vaccinatie is beoordeeld. Zij kunnen opnieuw je gegevens invoeren. Je krijgt dan ook een nieuwe beoordelingscode. Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccinationAssessment_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Haal een negatieve testuitslag op om je bezoekersbewijs compleet te maken.</p><p>Heb je nog geen coronatest gedaan? Maak een afspraak op <a href="https://www.testenvoortoegang.org">www.testenvoortoegang.org</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_completecertificate_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_completecertificate_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_completecertificate_body"
        }

        return NSLocalizedString("holder_completecertificate_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Heb je al een coronabewijs gekregen en wil je deze aan de app toevoegen? Dat kan door de QR-code op je bewijs te scannen met de camera van je telefoon.</p>
      ///
      /// Locales: en, nl
      static func holder_paperproof_startscanning_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_startscanning_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_startscanning_body"
        }

        return NSLocalizedString("holder_paperproof_startscanning_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Heb je een (booster)vaccinatie gehad? Log in met DigiD om al je vaccinatiegegevens op te halen.</p>
      ///
      /// Locales: en, nl
      static func holder_addVaccination_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_addVaccination_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_addVaccination_message"
        }

        return NSLocalizedString("holder_addVaccination_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Het is niet gelukt de server te bereiken. Wil je controleren of je verbinding met het internet hebt?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func generalErrorServerUnreachableErrorCode(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.error.server.unreachable.errorCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.server.unreachable.errorCode"
        }

        let format = NSLocalizedString("general.error.server.unreachable.errorCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Het is te lang geleden dat je positief getest bent op corona. Daardoor is je testuitslag niet meer geldig om een herstelbewijs van te maken.</p><p>Je positieve test kon wel meegeteld worden in je vaccinatiebewijs. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Het is te lang geleden dat je positief getest bent op corona. Daarom is je testuitslag niet meer geldig. Je kunt helaas geen herstelbewijs maken.</p><p>Kijk voor meer informatie op de <a href="https://www.coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryTooOld_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryTooOld_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryTooOld_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryTooOld_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>In Nederland krijg je alleen toegang met een testbewijs op plekken waar om een coronabewijs wordt gevraagd <a href="https://coronacheck.nl/toegangsregels/1g-toegang">(1G-toegang)</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_empty_domestic_only1Gaccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_empty_domestic_only1Gaccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_empty_domestic_only1Gaccess_message"
        }

        return NSLocalizedString("holder_dashboard_empty_domestic_only1Gaccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>In de <a href="https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app">gebruikersvoorwaarden</a> staat hoe CoronaCheck Scanner werkt en wat je rechten zijn.</p>
      ///
      /// Locales: en, nl
      static func verifierConsentMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.message"
        }

        return NSLocalizedString("verifier.consent.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>In de <a href="https://coronacheck.nl/nl/privacy-in-app">privacyverklaring</a> staat hoe CoronaCheck omgaat met jouw gegevens. Dit zijn de belangrijkste punten:</p>
      ///
      /// Locales: en, nl
      static func holderConsentMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.message"
        }

        return NSLocalizedString("holder.consent.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>In jouw Nederlandse QR-code staan minimale gegevens. Er staat wel dat je een geldig bewijs hebt, maar niet of je een test hebt gedaan, hersteld of gevaccineerd bent.</p><p>In de QR-code staat ook de eerste letter van je voornaam en van je achternaam, je geboortedag en geboortemaand. Dit is om zeker te zijn dat de QR-code bij jou hoort.</p><p>Jouw gegevens*: <b>%@</b></p><p></p><p>* Soms vallen gegevens weg om je privacy te beschermen. Je ziet dan een streepje (_).</p>
      ///
      /// Locales: en, nl
      static func holderShowqrDomesticAboutMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.showqr.domestic.about.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.domestic.about.message"
        }

        let format = NSLocalizedString("holder.showqr.domestic.about.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>In jouw Nederlandse QR-code staat dat je een geldig bewijs hebt voor 1G-toegang en er zijn minimale gegevens zichtbaar.</p><p>De controleur ziet alleen de eerste letter van je voornaam en van je achternaam, je geboortedag en geboortemaand. Dit is om zeker te zijn dat de QR-code bij jou hoort.</p><p>Jouw gegevens*: <b>%@</b></p><p></p><p>* Soms vallen gegevens weg om je privacy te beschermen. Je ziet dan een streepje (_).</p>
      ///
      /// Locales: en, nl
      static func holder_qr_explanation_description_domestic_1G(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_qr_explanation_description_domestic_1G", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_explanation_description_domestic_1G"
        }

        let format = NSLocalizedString("holder_qr_explanation_description_domestic_1G", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Je bezoekersbewijs is alleen in Nederland geldig. Wil je naar een ander land? Check de regels van het land dat je wilt bezoeken.</p> <p><b>Meer weten?</b><br />Lees meer op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_notvalidinthisregionmodal_visitorpass_international_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_notvalidinthisregionmodal_visitorpass_international_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_notvalidinthisregionmodal_visitorpass_international_body"
        }

        return NSLocalizedString("holder_notvalidinthisregionmodal_visitorpass_international_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je hebt alleen een lettercombinatie als je jouw bewijs opgestuurd hebt gekregen van je zorgverlener, of de Nederlandse overheid.</p><p>Heb je geen lettercombinatie of ben je deze kwijt? Dan is het niet mogelijk om je bewijs nu toe te voegen. Vraag eerst een nieuw bewijs met bijbehorende lettercombinatie aan.</p><p><b>Heb je zelf je bewijs geprint?</b><br />Je kunt dan alleen via DigiD je bewijzen toevoegen aan de app.</p>
      ///
      /// Locales: en, nl
      static func holderPaperproofNotokenMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.paperproof.notoken.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.paperproof.notoken.message"
        }

        return NSLocalizedString("holder.paperproof.notoken.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je herstelbewijs is niet geldig in Nederland. Je hebt wel een internationaal bewijs.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenDomesticRecoveryMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.recovery.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.domestic.recovery.message"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.recovery.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je herstelbewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen doordat je type test niet voldoet, of doordat deze niet meer geldig is in het buitenland. Alleen van een PCR-test die minder dan 180 dagen oud is kan een internationaal herstelbewijs gemaakt worden. Lees meer over de mogelijke oorzaken op de <a href="https://coronacheck.nl/wegwijzer"> Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuRecoveryMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.recovery.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.recovery.message"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.recovery.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je krijgt een beoordelingscode van de balie waar je vaccinatie is beoordeeld. Deze code heb je geprint gekregen. Heb je geen beoordelingscode? Ga dan terug naar de balie waar je bent geweest.</p><p>Nog niet langs een balie geweest om je vaccinatie te laten beoordelen? Kijk voor meer informatie op <a href="https://www.rijksoverheid.nl/ctb-bezoekers-cc">www.rijksoverheid.nl/ctb-bezoekers</a>.</p>
      ///
      /// Locales: en, nl
      static func visitorpass_token_modal_notoken_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_modal_notoken_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_modal_notoken_details"
        }

        return NSLocalizedString("visitorpass_token_modal_notoken_details", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je krijgt van de testlocatie een ophaalcode met cijfers en letters.</p><p>Heb je geen code gekregen? Of ben je deze kwijtgeraakt? Neem dan contact op met je testlocatie.</p>
      ///
      /// Locales: en, nl
      static func holderTokenentryModalNotokenDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.modal.notoken.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.modal.notoken.details"
        }

        return NSLocalizedString("holder.tokenentry.modal.notoken.details", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je kunt de volgende bewijzen inscannen en toevoegen aan de app:</p><ul><li>Een papieren bewijs gekregen van je zorgverlener of de overheid. Heb je een bewijs voor in Nederland en voor internationaal gebruik? Scan dan de <b>internationale QR-code</b>.</li><li>Een coronabewijs met QR-code van je test of vaccinatie uit het buitenland. Je hebt je QR-code op papier of in een buitenlandse corona-app staan.</li></ul>
      ///
      /// Locales: en, nl
      static func holder_paperproof_whichProofsCanBeUsed_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_whichProofsCanBeUsed_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_whichProofsCanBeUsed_body"
        }

        return NSLocalizedString("holder_paperproof_whichProofsCanBeUsed_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je kunt een bewijs maken als je:</p><ul><li>Gevaccineerd bent</li><li>Positief getest bent en hersteld van corona</li><li>Negatief getest bent en geen corona hebt</li></ul>
      ///
      /// Locales: en, nl
      static func holderOnboardingMessageYourqr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.message.yourqr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.message.yourqr"
        }

        return NSLocalizedString("holder.onboarding.message.yourqr", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je kunt een bewijs toevoegen als je bent gevaccineerd of hersteld. Of als je bent getest bij een <a href="https://coronacheck.nl/nl/testafspraak-in-app">aangesloten testlocatie</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_empty_domestic_only3Gaccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_empty_domestic_only3Gaccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_empty_domestic_only3Gaccess_message"
        }

        return NSLocalizedString("holder_dashboard_empty_domestic_only3Gaccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je kunt een bewijs toevoegen als je bent gevaccineerd of hersteld. Of als je bent getest bij een <a href="https://coronacheck.nl/nl/testafspraak-in-app">aangesloten testlocatie</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_incompleteVisitorPass_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_incompleteVisitorPass_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_incompleteVisitorPass_message"
        }

        return NSLocalizedString("holder_dashboard_incompleteVisitorPass_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je mag de bezoeker geen toegang geven als de gegevens op jouw scherm anders zijn dan op het identiteitsbewijs.</p><p><b>Let op: soms vallen gegevens weg</b><br />Om de privacy van de bezoeker te beschermen zie je soms niet alle gegevens op jouw scherm. Dan staat er een streepje (-) in het vak. Controleer in dat geval alleen de gegevens die je wel ziet.</p>
      ///
      /// Locales: en, nl
      static func verifierResultCheckText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.check.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.check.text"
        }

        return NSLocalizedString("verifier.result.check.text", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je moet je eerst laten testen voordat je een QR-code maakt. Alleen van een negatieve testuitslag kan je een QR-code maken.</p>
      ///
      /// Locales: en, nl
      static func holderAppointmentBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.appointment.body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.appointment.body"
        }

        return NSLocalizedString("holder.appointment.body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je naam moet bij alle vaccinaties, testuitslagen en bewijzen in de app op dezelfde manier zijn geschreven. Anders ziet CoronaCheck het als van verschillende personen. Kies daarom één naam.</p><p>Alleen de vaccinaties en testuitslagen bij de naam die je kiest blijven bewaard. De rest wordt verwijderd. Wil je die vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad.</p><p>Als je naam is aangepast, kun je zelf de vaccinaties en testuitslagen opnieuw toevoegen aan de app.</p>
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_why_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_why_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_why_body"
        }

        return NSLocalizedString("holder_fuzzyMatching_why_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je negatieve testuitslag is succesvol toegevoegd. Maak je bezoekersbewijs compleet met je vaccinatiebeoordeling.</p><p>Hiervoor heb je een beoordelingscode gekregen van de balie waar je vaccinatie is beoordeeld. Deze code heb je geprint gekregen.</p>
      ///
      /// Locales: en, nl
      static func holder_event_negativeTestEndstate_addVaccinationAssessment_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_negativeTestEndstate_addVaccinationAssessment_body"
        }

        return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Je testuitslag is al opgehaald en omgezet in een QR-code.</p><p>Klopt dit niet? Neem dan contact op met de testlocatie.</p>
      ///
      /// Locales: en, nl
      static func holderTestresultsAlreadyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.already.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.already.text"
        }

        return NSLocalizedString("holder.testresults.already.text", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Jouw testbewijs is niet geldig in Nederland. Je hebt wel een internationaal bewijs.</p><p>Dit kan komen doordat de geldigheidsduur in Nederland korter is dan in andere landen. Laat je opnieuw testen voor een bewijs dat ook in Nederland geldig is.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenDomesticTestMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.test.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.domestic.test.message"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.test.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Jouw testbewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen door je type test niet geaccepteerd wordt in andere landen. Laat je opnieuw testen voor een bewijs dat ook internationaal geldig is.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuTestMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.test.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.test.message"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.test.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Jouw vaccinatiebewijs is niet internationaal geldig. Je hebt wel een Nederlands bewijs.</p><p>Dit kan bijvoorbeeld komen doordat jouw type vaccin niet geaccepteerd wordt in het buitenland.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuVaccinationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.vaccination.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.vaccination.message"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.vaccination.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Laat in Nederland een bewijs voor <a href="https://coronacheck.nl/toegangsregels/1g-toegang">1G-toegang</a> zien als om een coronabewijs wordt gevraagd. Laat ook je identiteitsbewijs zien.</p>
      ///
      /// Locales: en, nl
      static func holder_dashboard_intro_domestic_only1Gaccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_intro_domestic_only1Gaccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_intro_domestic_only1Gaccess"
        }

        return NSLocalizedString("holder_dashboard_intro_domestic_only1Gaccess", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Met de CoronaCheck app kun je aantonen dat je gevaccineerd, negatief getest, of hersteld van corona bent. Je kunt een digitaal coronabewijs maken van je vaccinatie(s), maar ook van een positieve of negatieve testuitslag.</p><p>Je bewijs heeft een QR-code. Die kan gescand worden voor toegang tot plekken of activiteiten, of om mee te reizen.</p>
      ///
      /// Locales: en, nl
      static func holderAboutText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.about.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.about.text"
        }

        return NSLocalizedString("holder.about.text", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Met de vaccinatie(s) die je nu in de app hebt toegevoegd, krijg je geen Nederlands vaccinatiebewijs.</p><p>Voeg een nieuwe (booster)vaccinatie of test toe om een Nederlands bewijs te krijgen.</p><p>Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_incompletedutchvaccination_paragraph_secondvaccine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_incompletedutchvaccination_paragraph_secondvaccine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_incompletedutchvaccination_paragraph_secondvaccine"
        }

        return NSLocalizedString("holder_incompletedutchvaccination_paragraph_secondvaccine", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Neem contact op met de zorgverlener waar je bent gevaccineerd of getest. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccinationAndPositiveTest_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Neem contact op met de zorgverlener waar je bent gevaccineerd. Dat kan de GGD, je huisarts of arts van een zorginstelling zijn. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_vaccination_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccination_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_vaccination_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_vaccination_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Neem contact op met je testlocatie. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_recovery_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_recovery_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_recovery_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_recovery_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Neem contact op met je testlocatie. Zij kunnen je helpen je gegevens aan te passen.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_test_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_test_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_test_body"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_test_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Om de CoronaCheck Scanner-app goed te kunnen gebruiken, is het belangrijk dat de tijd op je telefoon goed staat ingesteld. Loopt je telefoon bijvoorbeeld een paar minuten voor? Dan kan er een fout ontstaan tijdens de controle van een coronabewijs.</p><p><a href="%@">Ga naar de instellingen</a> van je telefoon en zet de datum en tijd op 'automatisch instellen'.</p>
      ///
      /// Locales: en, nl
      static func verifierClockDeviationDetectedMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier.clockDeviationDetected.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.clockDeviationDetected.message"
        }

        let format = NSLocalizedString("verifier.clockDeviationDetected.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Om de CoronaCheck-app goed te kunnen gebruiken, is het belangrijk dat de tijd op je telefoon goed staat ingesteld. Loopt je telefoon bijvoorbeeld een paar minuten voor? Dan kan er een fout ontstaan tijdens de controle van je coronabewijs.</p><p><a href="%@">Ga naar de instellingen van je telefoon</a> en zet de datum en tijd op 'automatisch instellen'.</p>
      ///
      /// Locales: en, nl
      static func holderClockDeviationDetectedMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.clockDeviationDetected.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.clockDeviationDetected.message"
        }

        let format = NSLocalizedString("holder.clockDeviationDetected.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Om je vaccinatiebewijs te verlengen heb je en boostervaccinatie nodig. Kijk voor meer informatie over boostervaccinaties op <a href="https://www.coronavaccinatie.nl/booster-cc">www.coronavaccinatie.nl/booster</a>.</p><p>Heb je en boostervaccinatie gehad? Haal opnieuw je gegevens op om deze aan je bewijs toe te voegen.</p>
      ///
      /// Locales: en, nl
      static func holder_expiredDomesticVaccinationModal_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_expiredDomesticVaccinationModal_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_expiredDomesticVaccinationModal_body"
        }

        return NSLocalizedString("holder_expiredDomesticVaccinationModal_body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Op dit moment kunnen we geen bewijs maken van je %@. Dit kan verschillende oorzaken hebben. Kijk voor meer informatie op de <a href="https://www.coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateCantCreateCertificate_message(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_endStateCantCreateCertificate_message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateCantCreateCertificate_message"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_endStateCantCreateCertificate_message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: <p>Probeer het later nog eens.</p><p>Neem voor vragen contact op met jouw testlocatie.</p>
      ///
      /// Locales: en, nl
      static func holderTestresultsPendingText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.pending.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.pending.text"
        }

        return NSLocalizedString("holder.testresults.pending.text", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Probeer het op een later moment nog eens.</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func generalNetworkwasbusyErrorcode(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.networkwasbusy.errorcode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.networkwasbusy.errorcode"
        }

        let format = NSLocalizedString("general.networkwasbusy.errorcode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>Sorry, het is niet gelukt de QR-code te vernieuwen. Open de app opnieuw over 10 minuten.<br /><br />Helpt dat niet? Bel dan de helpdesk op <a href="tel:08001421">0800-1421</a> (gratis) en geef de foutcode (i 075) door.</p>
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredErrorfooterServerHelpdesk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.server.helpdesk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.errorfooter.server.helpdesk"
        }

        return NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.server.helpdesk", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Van je opgehaalde gegevens is een herstelbewijs gemaakt.</p><p>Je positieve test kon ook meegeteld worden in je vaccinatiebewijs. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Van je opgehaalde gegevens kon alleen een herstelbewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryOnly_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryOnly_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryOnly_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryOnly_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Van je opgehaalde gegevens kon alleen een internationaal vaccinatiebewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateInternationalQROnly_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateInternationalQROnly_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateInternationalQROnly_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateInternationalQROnly_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Van je opgehaalde vaccinaties is een vaccinatiebewijs gemaakt.</p><p>Van je positieve testuitslag kon ook een herstelbewijs worden gemaakt.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateVaccinationsAndRecovery_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateVaccinationsAndRecovery_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateVaccinationsAndRecovery_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateVaccinationsAndRecovery_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Van je opgehaalde vaccinaties kon alleen een internationaal vaccinatiebewijs worden gemaakt. Kijk voor meer informatie op de <a href="https://coronacheck.nl/wegwijzer">Wegwijzer</a>.</p><p>Van je positieve testuitslag kon ook een herstelbewijs gemaakt worden.</p>
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Voor de veiligheid kun je deze QR-code tijdelijk niet meer in de app zetten.</p><p>Je kunt het over 24 uur weer proberen.</p>
      ///
      /// Locales: en, nl
      static func holderCheckdccBlockedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.blocked.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.blocked.message"
        }

        return NSLocalizedString("holder.checkdcc.blocked.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Voor een testbewijs moet je eerst een test doen bij een aangesloten testlocatie. Blijkt uit de test dat je geen corona hebt? Dan kun je een bewijs maken.</p>
      ///
      /// Locales: en, nl
      static func holderNotestBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.notest.body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.notest.body"
        }

        return NSLocalizedString("holder.notest.body", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Vraag de bezoeker contact op te nemen met de helpdesk van CoronaCheck.</p>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageFive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.five", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.five"
        }

        return NSLocalizedString("verifier.denied.message.five", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Vraag een papieren coronabewijs aan door te bellen met de GGD op <a href="tel:0888-5090">0800 - 5090</a>.</p><p>Je bewijs met QR-code wordt per post opgestuurd.</p>
      ///
      /// Locales: en, nl
      static func holder_contactProviderHelpdesk_testFlow_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactProviderHelpdesk_testFlow_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactProviderHelpdesk_testFlow_message"
        }

        return NSLocalizedString("holder_contactProviderHelpdesk_testFlow_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Vraag je bewijs aan bij de CoronaCheck helpdesk. Die kun je elke dag tussen 08.00 en 20.00 uur bellen op: <a href="tel:0800-1421">0800-1421</a> (gratis).</p> <p>Of als je vanuit het buitenland belt: <a href="tel:+31707503720">+31 70 750 37 20</a>. Kies in het keuzemenu voor “een bewijs aanvragen”.</p>Geef het volgende door:<ul><li>je burgerservicenummer (BSN)</li><li>je postcode</li></ul><p>Je bewijs met QR-code wordt per post opgestuurd. Dit kan maximaal 7 werkdagen duren.</p>
      ///
      /// Locales: en, nl
      static func holder_contactCoronaCheckHelpdesk_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactCoronaCheckHelpdesk_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactCoronaCheckHelpdesk_message"
        }

        return NSLocalizedString("holder_contactCoronaCheckHelpdesk_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>Waar je jouw coronabewijs kunt aanvragen hangt af van waar je gevaccineerd bent. </p><ul><li>Was dit bij de GGD? Bel de GGD op <a href="tel:0888-5090">0800 - 5090</a> om je bewijs aan te vragen.</li><li>Was dit ergens anders? Bijvoorbeeld bij je huisarts of een andere zorgverlener? Neem direct contact op met hen.</li></ul><p>Je kunt je coronabewijs aanvragen op papier of als pdf-bestand.</p>
      ///
      /// Locales: en, nl
      static func holder_contactProviderHelpdesk_vaccinationFlow_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactProviderHelpdesk_vaccinationFlow_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactProviderHelpdesk_vaccinationFlow_message"
        }

        return NSLocalizedString("holder_contactProviderHelpdesk_vaccinationFlow_message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>We hebben voor iedereen het vaccinatiebewijs vernieuwd. Je hebt nu ook toegang tot QR-codes van eerdere prikken.</p><p>Dat is bijvoorbeeld handig voor mensen die ergens heen willen waar hun laatste prik nog niet geldig is.</p><p><a href="https://coronacheck.nl/nl/faq/3-5-waarom-heb-ik-voor-elke-prik-een-internationale-QR-code/">Lees hier meer over je vernieuwde vaccinatiebewijs</a>.</p>
      ///
      /// Locales: en, nl
      static func holderEuvaccinationswereupgradedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.euvaccinationswereupgraded.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.euvaccinationswereupgraded.message"
        }

        return NSLocalizedString("holder.euvaccinationswereupgraded.message", bundle: bundle, comment: "")
      }

      /// nl translation: <p>We zijn bezig met een oplossing. Wil je het later nog eens proberen?</p><p><b>Foutcode:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateServerMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.server.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.server.message"
        }

        let format = NSLocalizedString("holder.errorstate.server.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <p>We zijn bezig met een oplossing. Wil je het later nog eens proberen?</p><p><b>Foutcodes:</b><br />%@</p>
      ///
      /// Locales: en, nl
      static func holderErrorstateServerMessages(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.errorstate.server.messages", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.server.messages"
        }

        let format = NSLocalizedString("holder.errorstate.server.messages", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: <ul><li>Controleer of de tijd goed staat ingesteld op de telefoon van de bezoeker en die van jou. Zorg dat de datum en tijd op ‘automatisch instellen’ staan.</li><li>Controleer of de bezoeker een origineel bewijs laat zien. Een screenshot van een bewijs kan voor problemen zorgen.</li><li>Vraag de bezoeker om de app volledig af te sluiten en opnieuw op te starten. Scan daarna opnieuw de QR-code.</li></ul>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageThree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.three", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.three"
        }

        return NSLocalizedString("verifier.denied.message.three", bundle: bundle, comment: "")
      }

      /// nl translation: <ul><li>Laat de bezoeker weten welk soort toegang jouw locatie mag geven. Let op dat bij 1G-toegang alleen bezoekers met een testbewijs naar binnen mogen.</li><li>Controleer of de tijd goed staat ingesteld op de telefoon van de bezoeker en die van jou. Zorg dat de datum en tijd op ‘automatisch instellen’ staan.</li><li>Controleer of de bezoeker een origineel bewijs laat zien. Een screenshot van een bewijs kan voor problemen zorgen.</li><li>Vraag de bezoeker om de app volledig af te sluiten en opnieuw op te starten. Scan daarna opnieuw de QR-code.</li></ul>
      ///
      /// Locales: en, nl
      static func verifierDeniedMessageThree_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.message.three_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.message.three_1G"
        }

        return NSLocalizedString("verifier.denied.message.three_1G", bundle: bundle, comment: "")
      }

      /// nl translation: APR
      ///
      /// Locales: en, nl
      static func holderTestresultsApril(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.april", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.april"
        }

        return NSLocalizedString("holder.testresults.april", bundle: bundle, comment: "")
      }

      /// nl translation: AUG
      ///
      /// Locales: en, nl
      static func holderTestresultsAugust(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.august", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.august"
        }

        return NSLocalizedString("holder.testresults.august", bundle: bundle, comment: "")
      }

      /// nl translation: Aan de slag
      ///
      /// Locales: en, nl
      static func holderConsentAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.action"
        }

        return NSLocalizedString("holder.consent.action", bundle: bundle, comment: "")
      }

      /// nl translation: Aan de slag
      ///
      /// Locales: en, nl
      static func verifierConsentAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.action"
        }

        return NSLocalizedString("verifier.consent.action", bundle: bundle, comment: "")
      }

      /// nl translation: Aanpassen
      ///
      /// Locales: en, nl
      static func verifier_risksetting_changeselection_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_changeselection_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_changeselection_button"
        }

        return NSLocalizedString("verifier_risksetting_changeselection_button", bundle: bundle, comment: "")
      }

      /// nl translation: Achternaam
      ///
      /// Locales: en, nl
      static func verifierResultIdentityLastname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.identity.lastname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.lastname"
        }

        return NSLocalizedString("verifier.result.identity.lastname", bundle: bundle, comment: "")
      }

      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.issuer"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.issuer", bundle: bundle, comment: "")
      }

      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.issuer"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.issuer", bundle: bundle, comment: "")
      }

      /// nl translation: Afgever certificaat / Certificate issuer:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.issuer"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.issuer", bundle: bundle, comment: "")
      }

      /// nl translation: Afgever certificaat:
      ///
      /// Locales: en, nl
      static func holder_dcc_issuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dcc_issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dcc_issuer"
        }

        return NSLocalizedString("holder_dcc_issuer", bundle: bundle, comment: "")
      }

      /// nl translation: Akkoord
      ///
      /// Locales: en, nl
      static func newTermsAgree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.agree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.agree"
        }

        return NSLocalizedString("new.terms.agree", bundle: bundle, comment: "")
      }

      /// nl translation: Alleen 1G-toegang
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only1G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only1G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only1G_title"
        }

        return NSLocalizedString("holder_newintheapp_content_only1G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Alleen 1G-toegang in Nederland
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_only1GAccess_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only1GAccess_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_only1GAccess_title"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only1GAccess_title", bundle: bundle, comment: "")
      }

      /// nl translation: Alleen internationale bewijzen
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_onlyInternationalCertificates_0G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_onlyInternationalCertificates_0G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_onlyInternationalCertificates_0G_title"
        }

        return NSLocalizedString("holder_newintheapp_content_onlyInternationalCertificates_0G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_vaccination_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_vaccination_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_vaccination_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_vaccination_message", bundle: bundle, comment: "")
      }

      /// nl translation: Als de gegevens kloppen kun je jouw vaccinatiebeoordeling toevoegen aan de app.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_vaccinationAssessment_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_vaccinationAssessment_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_vaccinationAssessment_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_vaccinationAssessment_message", bundle: bundle, comment: "")
      }

      /// nl translation: Als de gegevens van je test kloppen kun je een herstelbewijs maken.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_recovery_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_recovery_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_recovery_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_recovery_message", bundle: bundle, comment: "")
      }

      /// nl translation: Als je geen DigiD kunt of wilt aanvragen
      ///
      /// Locales: en, nl
      static func holder_noDigiD_buttonSubTitle_continueWithoutDigiD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_buttonSubTitle_continueWithoutDigiD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_buttonSubTitle_continueWithoutDigiD"
        }

        return NSLocalizedString("holder_noDigiD_buttonSubTitle_continueWithoutDigiD", bundle: bundle, comment: "")
      }

      /// nl translation: Als je voor of op %@ getest bent kun je de testuitslag ophalen via DigiD. Ben je erna getest? Gebruik de ophaalcode die je van de testlocatie hebt gekregen.
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_body(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_wasUserTestedAtGGD_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_body"
        }

        let format = NSLocalizedString("holder_wasUserTestedAtGGD_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Als je wisselt van scan-instelling moet je %li minuten wachten voordat je weer kunt scannen.
      ///
      /// Locales: en, nl
      static func verifier_risksetting_confirmation_dialog_message(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_risksetting_confirmation_dialog_message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_confirmation_dialog_message"
        }

        let format = NSLocalizedString("verifier_risksetting_confirmation_dialog_message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Als onderstaande gegevens kloppen kun je jouw bewijs toevoegen aan de app.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_paperflow_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_paperflow_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_paperflow_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_paperflow_message", bundle: bundle, comment: "")
      }

      /// nl translation: Andere testlocatie
      ///
      /// Locales: en, nl
      static func holderLocationOtherTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.other.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.other.title"
        }

        return NSLocalizedString("holder.location.other.title", bundle: bundle, comment: "")
      }

      /// nl translation: Andere testlocatie
      ///
      /// Locales: en, nl
      static func holderProviderCommercialTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.commercial.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.commercial.title"
        }

        return NSLocalizedString("holder.provider.commercial.title", bundle: bundle, comment: "")
      }

      /// nl translation: Animatie van mensen op een fiets en skateboard
      ///
      /// Locales: en, nl
      static func holder_showqr_animation_summerctb_voiceover_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_animation_summerctb_voiceover_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_animation_summerctb_voiceover_label"
        }

        return NSLocalizedString("holder_showqr_animation_summerctb_voiceover_label", bundle: bundle, comment: "")
      }

      /// nl translation: Animatie van mensen op een slee en schaatsen
      ///
      /// Locales: en, nl
      static func holder_showqr_animation_winterctb_voiceover_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_animation_winterctb_voiceover_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_animation_winterctb_voiceover_label"
        }

        return NSLocalizedString("holder_showqr_animation_winterctb_voiceover_label", bundle: bundle, comment: "")
      }

      /// nl translation: Animatie van reizigers op een loopband
      ///
      /// Locales: en, nl
      static func holder_showqr_animation_summerdcc_voiceover_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_animation_summerdcc_voiceover_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_animation_summerdcc_voiceover_label"
        }

        return NSLocalizedString("holder_showqr_animation_summerdcc_voiceover_label", bundle: bundle, comment: "")
      }

      /// nl translation: Animatie van reizigers op een loopband
      ///
      /// Locales: en, nl
      static func holder_showqr_animation_winterdcc_voiceover_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_animation_winterdcc_voiceover_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_animation_winterdcc_voiceover_label"
        }

        return NSLocalizedString("holder_showqr_animation_winterdcc_voiceover_label", bundle: bundle, comment: "")
      }

      /// nl translation: Annuleer
      ///
      /// Locales: en, nl
      static func general_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_cancel"
        }

        return NSLocalizedString("general_cancel", bundle: bundle, comment: "")
      }

      /// nl translation: App in gebruik sinds %@
      ///
      /// Locales: en, nl
      static func scan_log_footer_in_use(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scan_log_footer_in_use", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_footer_in_use"
        }

        let format = NSLocalizedString("scan_log_footer_in_use", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: App langer dan een maand in gebruik
      ///
      /// Locales: en, nl
      static func scan_log_footer_long_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_log_footer_long_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_footer_long_time"
        }

        return NSLocalizedString("scan_log_footer_long_time", bundle: bundle, comment: "")
      }

      /// nl translation: App niet in gebruik
      ///
      /// Locales: en, nl
      static func holder_endOfLife_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_endOfLife_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_endOfLife_title"
        }

        return NSLocalizedString("holder_endOfLife_title", bundle: bundle, comment: "")
      }

      /// nl translation: App niet in gebruik
      ///
      /// Locales: en, nl
      static func verifier_endOfLife_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_endOfLife_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_endOfLife_title"
        }

        return NSLocalizedString("verifier_endOfLife_title", bundle: bundle, comment: "")
      }

      /// nl translation: App resetten
      ///
      /// Locales: en, nl
      static func holder_menu_resetApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_resetApp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_resetApp"
        }

        return NSLocalizedString("holder_menu_resetApp", bundle: bundle, comment: "")
      }

      /// nl translation: App versie %@ (%@)
      ///
      /// Locales: en, nl
      static func generalMenuVersion(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.menu.version", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.menu.version"
        }

        let format = NSLocalizedString("general.menu.version", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: App versie %@ (build %@)
      ///
      /// Locales: en, nl
      static func holderLaunchVersion(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.launch.version", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.launch.version"
        }

        let format = NSLocalizedString("holder.launch.version", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: App versie %@ (build %@)
      ///
      /// Locales: en, nl
      static func verifierLaunchVersion(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier.launch.version", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.launch.version"
        }

        let format = NSLocalizedString("verifier.launch.version", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Begin opnieuw
      ///
      /// Locales: en, nl
      static func holderErrorstateNosessionAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.nosession.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.nosession.action"
        }

        return NSLocalizedString("holder.errorstate.nosession.action", bundle: bundle, comment: "")
      }

      /// nl translation: Begin van lijst.
      ///
      /// Locales: en, nl
      static func generalListAccessibilityStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.list.accessibility.start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.list.accessibility.start"
        }

        return NSLocalizedString("general.list.accessibility.start", bundle: bundle, comment: "")
      }

      /// nl translation: Bekijk QR-code
      ///
      /// Locales: en, nl
      static func holderDashboardQrButtonViewQR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.button.viewQR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.button.viewQR"
        }

        return NSLocalizedString("holder.dashboard.qr.button.viewQR", bundle: bundle, comment: "")
      }

      /// nl translation: Bekijk QR-codes
      ///
      /// Locales: en, nl
      static func holderDashboardQrButtonViewQRs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.button.viewQRs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.button.viewQRs"
        }

        return NSLocalizedString("holder.dashboard.qr.button.viewQRs", bundle: bundle, comment: "")
      }

      /// nl translation: Bekijk de actuele storingen
      ///
      /// Locales: en, nl
      static func holderErrorstateMalfunctionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.malfunctions.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.malfunctions.title"
        }

        return NSLocalizedString("holder.errorstate.malfunctions.title", bundle: bundle, comment: "")
      }

      /// nl translation: Bekijk de details voor %@
      ///
      /// Locales: en, nl
      static func holder_identitySelection_accessibility_details(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identitySelection_accessibility_details", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_accessibility_details"
        }

        let format = NSLocalizedString("holder_identitySelection_accessibility_details", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Bekijk goed in de details welke vaccinaties of testuitslagen bij je keuze horen.
      ///
      /// Locales: en, nl
      static func holder_identitySelection_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_message"
        }

        return NSLocalizedString("holder_identitySelection_message", bundle: bundle, comment: "")
      }

      /// nl translation: Ben je nog niet getest?
      ///
      /// Locales: en, nl
      static func holderLocationNotest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.notest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.notest"
        }

        return NSLocalizedString("holder.location.notest", bundle: bundle, comment: "")
      }

      /// nl translation: Ben je nog niet getest?
      ///
      /// Locales: en, nl
      static func holderNotestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.notest.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.notest.title"
        }

        return NSLocalizedString("holder.notest.title", bundle: bundle, comment: "")
      }

      /// nl translation: Ben je vóór of op %@ getest?
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_wasUserTestedAtGGD_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_title"
        }

        let format = NSLocalizedString("holder_wasUserTestedAtGGD_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Beoordelingscode
      ///
      /// Locales: en, nl
      static func visitorpass_code_review_input(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_review_input", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_review_input"
        }

        return NSLocalizedString("visitorpass_code_review_input", bundle: bundle, comment: "")
      }

      /// nl translation: Beoordelingsdatum:
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_date"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_date", bundle: bundle, comment: "")
      }

      /// nl translation: Beoordelingsdatum: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_assessmentDate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_assessmentDate", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_assessmentDate"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_assessmentDate", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Bevestigen
      ///
      /// Locales: en, nl
      static func verifier_risksetting_confirmation_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_confirmation_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_confirmation_button"
        }

        return NSLocalizedString("verifier_risksetting_confirmation_button", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijs toevoegen
      ///
      /// Locales: en, nl
      static func holderDccListAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.list.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.list.action"
        }

        return NSLocalizedString("holder.dcc.list.action", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijs toevoegen
      ///
      /// Locales: en, nl
      static func holderMenuProof(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.proof", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.proof"
        }

        return NSLocalizedString("holder.menu.proof", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijs van vaccinatie, herstel of test
      ///
      /// Locales: en, nl
      static func holderOnboardingTitleYourqr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.title.yourqr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.title.yourqr"
        }

        return NSLocalizedString("holder.onboarding.title.yourqr", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijs voor 1G-toegang
      ///
      /// Locales: en, nl
      static func holder_dashboard_domesticQRCard_1G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_domesticQRCard_1G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_domesticQRCard_1G_title"
        }

        return NSLocalizedString("holder_dashboard_domesticQRCard_1G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijs voor 3G-toegang
      ///
      /// Locales: en, nl
      static func holder_dashboard_domesticQRCard_3G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_domesticQRCard_3G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_domesticQRCard_3G_title"
        }

        return NSLocalizedString("holder_dashboard_domesticQRCard_3G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Bewijzen voor 3G- en 1G-toegang
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_3Gand1G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_3Gand1G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_3Gand1G_title"
        }

        return NSLocalizedString("holder_newintheapp_content_3Gand1G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Bezig met laden
      ///
      /// Locales: en, nl
      static func generalLoading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.loading"
        }

        return NSLocalizedString("general.loading", bundle: bundle, comment: "")
      }

      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Check vooraf of je een bewijs voor 3G- of 1G-toegang nodig hebt. De app maakt hier aparte bewijzen voor.
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Op dit moment wordt alleen 1G-toegang gegeven. Je kunt dan naar binnen met een bewijs van een negatieve test.
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_only1GAccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only1GAccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_only1GAccess_message"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only1GAccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: Bezoek je een plek in Nederland waar een coronabewijs nodig is? Op dit moment wordt overal 3G-toegang gegeven. Je kunt dan naar binnen met een bewijs van vaccinatie, herstel, of een negatieve test.
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_only3GAccess_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only3GAccess_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_only3GAccess_message"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_only3GAccess_message", bundle: bundle, comment: "")
      }

      /// nl translation: Bezoek je een plek in Nederland? Laat je Nederlandse QR-code en je identiteitsbewijs zien bij de ingang.
      ///
      /// Locales: en, nl
      static func holder_dashboard_intro_domestic_only3Gaccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_intro_domestic_only3Gaccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_intro_domestic_only3Gaccess"
        }

        return NSLocalizedString("holder_dashboard_intro_domestic_only3Gaccess", bundle: bundle, comment: "")
      }

      /// nl translation: Bezoekersbewijs toevoegen
      ///
      /// Locales: en, nl
      static func holder_menu_visitorpass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_visitorpass", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_visitorpass"
        }

        return NSLocalizedString("holder_menu_visitorpass", bundle: bundle, comment: "")
      }

      /// nl translation: Bij 1G-toegang mogen alleen bezoekers met een testbewijs naar binnen. Bij 3G-toegang mogen bezoekers met een test-, vaccinatie-, of herstelbewijs naar binnen.
      ///
      /// Locales: en, nl
      static func new_in_app_risksetting_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_in_app_risksetting_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_in_app_risksetting_subtitle"
        }

        return NSLocalizedString("new_in_app_risksetting_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Bij al je vaccinaties en testuitslagen moet je naam op dezelfde manier zijn geschreven. Anders kun je jouw coronabewijs mogelijk niet gebruiken.
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_firstPage_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_firstPage_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_firstPage_body"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_firstPage_body", bundle: bundle, comment: "")
      }

      /// nl translation: Bij het resetten worden alle gegevens en bewijzen uit de app verwijderd en ga je terug naar het startscherm.
      ///
      /// Locales: en, nl
      static func holderCleardataAlertSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.cleardata.alert.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.cleardata.alert.subtitle"
        }

        return NSLocalizedString("holder.cleardata.alert.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Bij het verwijderen van deze gegevens worden er mogelijk ook bewijzen met QR-codes uit de app verwijderd.
      ///
      /// Locales: en, nl
      static func holder_storedEvent_alert_removeEvents_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvent_alert_removeEvents_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvent_alert_removeEvents_message"
        }

        return NSLocalizedString("holder_storedEvent_alert_removeEvents_message", bundle: bundle, comment: "")
      }

      /// nl translation: Bijgewerkte gegevens
      ///
      /// Locales: en, nl
      static func holder_identityRemoved_moreinfo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identityRemoved_moreinfo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identityRemoved_moreinfo_title"
        }

        return NSLocalizedString("holder_identityRemoved_moreinfo_title", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. 123456
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowVerificationPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.verification.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.verification.placeholder"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.verification.placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. 123456
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowVerificationPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.verification.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.verification.placeholder"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.verification.placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. BRB-YYYYYYYYYY-Z2
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowTokenPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.token.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.token.placeholder"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.token.placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. BRB-YYYYYYYYYY-Z2
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowTokenPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.token.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.token.placeholder"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.token.placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. FLBRXQ
      ///
      /// Locales: en, nl
      static func holderDcctokenentryTokenFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.tokenField.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.tokenField.placeholder"
        }

        return NSLocalizedString("holder.dcctokenentry.tokenField.placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Bijv. VAC-YYYYYYYYY1-F2
      ///
      /// Locales: en, nl
      static func visitorpass_code_review_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_review_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_review_placeholder"
        }

        return NSLocalizedString("visitorpass_code_review_placeholder", bundle: bundle, comment: "")
      }

      /// nl translation: Blijkt uit de test dat je geen corona hebt? Dan kun je van de testuitslag een bewijs maken. Geef aan waar je getest bent.
      ///
      /// Locales: en, nl
      static func holderLocationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.message"
        }

        return NSLocalizedString("holder.location.message", bundle: bundle, comment: "")
      }

      /// nl translation: Blijkt uit de test dat je geen corona hebt? Dan kun je van de testuitslag een bewijs maken. Geef aan waar je getest bent.
      ///
      /// Locales: en, nl
      static func holderProviderMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.message"
        }

        return NSLocalizedString("holder.provider.message", bundle: bundle, comment: "")
      }

      /// nl translation: Boostervaccinatie toevoegen
      ///
      /// Locales: en, nl
      static func holder_expiredDomesticVaccinationModal_button_addBoosterVaccination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_expiredDomesticVaccinationModal_button_addBoosterVaccination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_expiredDomesticVaccinationModal_button_addBoosterVaccination"
        }

        return NSLocalizedString("holder_expiredDomesticVaccinationModal_button_addBoosterVaccination", bundle: bundle, comment: "")
      }

      /// nl translation: Buitenlandse bewijzen toevoegen
      ///
      /// Locales: en, nl
      static func holder_newintheapp_foreignproofs_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_foreignproofs_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_foreignproofs_title"
        }

        return NSLocalizedString("holder_newintheapp_foreignproofs_title", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderDccRecoveryPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.pathogenvalue"
        }

        return NSLocalizedString("holder.dcc.recovery.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderDccTestPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.pathogenvalue"
        }

        return NSLocalizedString("holder.dcc.test.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderDccVaccinationPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.pathogenvalue"
        }

        return NSLocalizedString("holder.dcc.vaccination.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.pathogenvalue"
        }

        return NSLocalizedString("holder.event.about.vaccination.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.pathogenvalue"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.pathogenvalue"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: COVID-19
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationPathogenvalue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.pathogenvalue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.pathogenvalue"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.pathogenvalue", bundle: bundle, comment: "")
      }

      /// nl translation: Camera is alleen te gebruiken in volledig scherm. Sluit je vensterweergave.
      ///
      /// Locales: en, nl
      static func holder_scanner_cameraBlockedDueToMultitasking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_cameraBlockedDueToMultitasking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_cameraBlockedDueToMultitasking"
        }

        return NSLocalizedString("holder_scanner_cameraBlockedDueToMultitasking", bundle: bundle, comment: "")
      }

      /// nl translation: Check vooraf de toegangsregels
      ///
      /// Locales: en, nl
      static func holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title"
        }

        return NSLocalizedString("holder_onboarding_disclosurePolicyChanged_3Gand1GAccess_title", bundle: bundle, comment: "")
      }

      /// nl translation: Code
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowTokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.token.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.token.title"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.token.title", bundle: bundle, comment: "")
      }

      /// nl translation: Colofon
      ///
      /// Locales: en, nl
      static func holderMenuColophon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.colophon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.colophon"
        }

        return NSLocalizedString("holder.menu.colophon", bundle: bundle, comment: "")
      }

      /// nl translation: Configuratie %@, %@
      ///
      /// Locales: en, nl
      static func generalMenuConfigVersion(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.menu.configVersion", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.menu.configVersion"
        }

        let format = NSLocalizedString("general.menu.configVersion", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Controle klaar
      ///
      /// Locales: en, nl
      static func verifier_result_access_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_result_access_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_result_access_title"
        }

        return NSLocalizedString("verifier_result_access_title", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer bij bezoekers vanaf 14 jaar altijd of de gegevens op jouw scherm hetzelfde zijn als die op het identiteitsbewijs van de bezoeker. Zo weet je zeker dat de QR-code van die bezoeker is.
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsCheckthedetailsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.checkthedetails.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.checkthedetails.message"
        }

        return NSLocalizedString("verifier.scaninstructions.checkthedetails.message", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer de tijd van je telefoon
      ///
      /// Locales: en, nl
      static func holderClockDeviationDetectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.clockDeviationDetected.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.clockDeviationDetected.title"
        }

        return NSLocalizedString("holder.clockDeviationDetected.title", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer de tijd van je telefoon
      ///
      /// Locales: en, nl
      static func verifierClockDeviationDetectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.clockDeviationDetected.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.clockDeviationDetected.title"
        }

        return NSLocalizedString("verifier.clockDeviationDetected.title", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer de tijd van je telefoon. Mogelijk staat deze niet goed ingesteld.
      ///
      /// Locales: en, nl
      static func holderDashboardClockDeviationDetectedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.clockDeviationDetected.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.clockDeviationDetected.message"
        }

        return NSLocalizedString("holder.dashboard.clockDeviationDetected.message", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer de tijd van je telefoon. Mogelijk staat deze niet goed ingesteld.
      ///
      /// Locales: en, nl
      static func verifierStartClockdeviationwarningMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.clockdeviationwarning.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.clockdeviationwarning.message"
        }

        return NSLocalizedString("verifier.start.clockdeviationwarning.message", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer het identiteitsbewijs
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsCheckthedetailsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.checkthedetails.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.checkthedetails.title"
        }

        return NSLocalizedString("verifier.scaninstructions.checkthedetails.title", bundle: bundle, comment: "")
      }

      /// nl translation: Controleer identiteitsbewijs
      ///
      /// Locales: en, nl
      static func verifierResultIdentityTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.identity.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.title"
        }

        return NSLocalizedString("verifier.result.identity.title", bundle: bundle, comment: "")
      }

      /// nl translation: CoronaCheck problem report (%@ %@)
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_email_subject(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_unrecoverableError_email_subject", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_email_subject"
        }

        let format = NSLocalizedString("general_unrecoverableError_email_subject", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Coronabewijs inscannen
      ///
      /// Locales: en, nl
      static func holder_menu_paperproof_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_paperproof_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_paperproof_title"
        }

        return NSLocalizedString("holder_menu_paperproof_title", bundle: bundle, comment: "")
      }

      /// nl translation: DEC
      ///
      /// Locales: en, nl
      static func holderTestresultsDecember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.december", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.december"
        }

        return NSLocalizedString("holder.testresults.december", bundle: bundle, comment: "")
      }

      /// nl translation: Dagen sinds vaccinatie / Days since vaccination:
      ///
      /// Locales: en, nl
      static func holder_showQR_euAboutVaccination_daysSince(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_euAboutVaccination_daysSince", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_euAboutVaccination_daysSince"
        }

        return NSLocalizedString("holder_showQR_euAboutVaccination_daysSince", bundle: bundle, comment: "")
      }

      /// nl translation: Dank! Je gegevens zijn bijgewerkt
      ///
      /// Locales: en, nl
      static func holder_identitySelection_success_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_success_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_success_title"
        }

        return NSLocalizedString("holder_identitySelection_success_title", bundle: bundle, comment: "")
      }

      /// nl translation: Dat komt door een technische fout (%@)
      ///
      /// Locales: en, nl
      static func generalErrorTechnicalCustom(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.error.technical.custom", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.technical.custom"
        }

        let format = NSLocalizedString("general.error.technical.custom", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Dat komt door een technische fout.
      ///
      /// Locales: en, nl
      static func generalErrorTechnicalText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.technical.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.technical.text"
        }

        return NSLocalizedString("general.error.technical.text", bundle: bundle, comment: "")
      }

      /// nl translation: Datum of tijd aangepast
      ///
      /// Locales: en, nl
      static func scan_log_list_clock_skew_detected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_log_list_clock_skew_detected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_list_clock_skew_detected"
        }

        return NSLocalizedString("scan_log_list_clock_skew_detected", bundle: bundle, comment: "")
      }

      /// nl translation: De App Store kan niet geopend worden.
      ///
      /// Locales: en, nl
      static func holder_updateApp_errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_updateApp_errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_updateApp_errorMessage"
        }

        return NSLocalizedString("holder_updateApp_errorMessage", bundle: bundle, comment: "")
      }

      /// nl translation: De App Store kan niet geopend worden.
      ///
      /// Locales: en, nl
      static func verifier_updateApp_errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_updateApp_errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_updateApp_errorMessage"
        }

        return NSLocalizedString("verifier_updateApp_errorMessage", bundle: bundle, comment: "")
      }

      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Er wordt 1G-toegang gegeven op alle plekken waar om een coronabewijs wordt gevraagd. Dit betekent dat je daar alleen naar binnen kunt met een testbewijs. Je kunt nog steeds een bewijs van vaccinatie of herstel toevoegen in de app, maar deze bewijzen kun je alleen gebruiken in het buitenland.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only1G_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only1G_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only1G_body"
        }

        return NSLocalizedString("holder_newintheapp_content_only1G_body", bundle: bundle, comment: "")
      }

      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Er zijn nu aparte bewijzen voor plekken die 3G-toegang en 1G-toegang geven.
      ///
      /// Locales: en, nl
      static func holder_dashboard_3Gand1GaccessBanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_3Gand1GaccessBanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_3Gand1GaccessBanner_title"
        }

        return NSLocalizedString("holder_dashboard_3Gand1GaccessBanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: De Nederlandse toegangsregels zijn veranderd. Op plekken waar 3G-toegang wordt gegeven kun je naar binnen met een bewijs van vaccinatie, herstel, of een negatieve test. Op plekken waar 1G-toegang wordt gegeven kun je alleen met een testbewijs naar binnen. De app maakt aparte bewijzen voor 3G-toegang en 1G-toegang.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_3Gand1G_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_3Gand1G_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_3Gand1G_body"
        }

        return NSLocalizedString("holder_newintheapp_content_3Gand1G_body", bundle: bundle, comment: "")
      }

      /// nl translation: De QR-code die je probeert te scannen wordt niet herkend als die van een coronabewijs. Controleer of je de goede QR-code voor de camera houdt.
      ///
      /// Locales: en, nl
      static func holder_scanner_error_message_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_error_message_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_error_message_unknown"
        }

        return NSLocalizedString("holder_scanner_error_message_unknown", bundle: bundle, comment: "")
      }

      /// nl translation: De QR-code heeft af en toe internet nodig. Zonder internetverbinding kan je jouw QR-code nog %@ dagen gebruiken. Ook daarna kun je de QR-code weer gebruiken wanneer je internet hebt.
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiringNointernetAlertMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.strippen.expiring.nointernet.alert.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expiring.nointernet.alert.message"
        }

        let format = NSLocalizedString("holder.dashboard.strippen.expiring.nointernet.alert.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: De QR-code op je bewijs kan worden gecheckt bij de ingang van plekken en activiteiten in het buitenland. Of aan de grens.
      ///
      /// Locales: en, nl
      static func holder_onboarding_content_onlyInternationalQR_0G_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_content_onlyInternationalQR_0G_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_content_onlyInternationalQR_0G_message"
        }

        return NSLocalizedString("holder_onboarding_content_onlyInternationalQR_0G_message", bundle: bundle, comment: "")
      }

      /// nl translation: De QR-code op je bewijs wordt gecheckt bij de ingang van plekken en activiteiten. Of aan de grens.
      ///
      /// Locales: en, nl
      static func holderOnboardingMessageValidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.message.validity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.message.validity"
        }

        return NSLocalizedString("holder.onboarding.message.validity", bundle: bundle, comment: "")
      }

      /// nl translation: De app heeft af en toe verbinding met de server nodig om je QR-codes te vernieuwen. Dat is niet gelukt door een fout op de server. <a href="%@">Probeer opnieuw</a>
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredErrorfooterServerTryagain(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.server.tryagain", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.errorfooter.server.tryagain"
        }

        let format = NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.server.tryagain", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: De app heeft eenmalig internet nodig om de laatste gegevens op te halen.
      ///
      /// Locales: en, nl
      static func verifierStartOntimeinternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.ontimeinternet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.ontimeinternet"
        }

        return NSLocalizedString("verifier.start.ontimeinternet", bundle: bundle, comment: "")
      }

      /// nl translation: De app maakt QR-codes voor in Nederland en het buitenland. Ga je de grens over? Gebruik dan je internationale QR-code.
      ///
      /// Locales: en, nl
      static func holderOnboardingMessagePrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.message.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.message.privacy"
        }

        return NSLocalizedString("holder.onboarding.message.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: De app wil toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static func holder_scanner_permission_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_permission_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_permission_message"
        }

        return NSLocalizedString("holder_scanner_permission_message", bundle: bundle, comment: "")
      }

      /// nl translation: De app wil toegang tot de camera om de QR-code te scannen.
      ///
      /// Locales: en, nl
      static func verifierScanPermissionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.permission.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.permission.message"
        }

        return NSLocalizedString("verifier.scan.permission.message", bundle: bundle, comment: "")
      }

      /// nl translation: De gegevens die bij de naam horen die je hebt gekozen zijn bewaard (<b>%@</b>). Alle andere vaccinatie- en testgegevens zijn verwijderd. Mogelijk zijn hierdoor ook bewijzen weg.
      ///
      /// Locales: en, nl
      static func holder_identitySelection_success_body(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identitySelection_success_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_success_body"
        }

        let format = NSLocalizedString("holder_identitySelection_success_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: De gegevens hieronder staan opgeslagen op je telefoon en worden gebruikt door CoronaCheck om je coronabewijs te maken.
      ///
      /// Locales: en, nl
      static func holder_storedEvents_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_message"
        }

        return NSLocalizedString("holder_storedEvents_message", bundle: bundle, comment: "")
      }

      /// nl translation: De persoonsgegevens die je net hebt opgehaald zijn anders dan die in je huidige bewijs staan. Stop en laat eerst de gegevens aanpassen bij de organisatie die de gegevens voor je bewijs heeft geregistreerd, of vervang je bewijs. Je huidige bewijs wordt dan verwijderd.
      ///
      /// Locales: en, nl
      static func holderEventIdentityAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.identity.alert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.identity.alert.message"
        }

        return NSLocalizedString("holder.event.identity.alert.message", bundle: bundle, comment: "")
      }

      /// nl translation: De testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowErrorUnknownprovider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.error.unknownprovider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.error.unknownprovider"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.error.unknownprovider", bundle: bundle, comment: "")
      }

      /// nl translation: De vaccinatie kan niet worden gelezen. Neem contact op met de locatie waar je gevaccineerd bent en geef de foutcode (%@) door.
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorMessageCode(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.vaccination.error.message.code", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.message.code"
        }

        let format = NSLocalizedString("holder.vaccination.error.message.code", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: De volgende gegevens staan in je bewijs:
      ///
      /// Locales: en, nl
      static func holder_dccDetails_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dccDetails_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dccDetails_subtitle"
        }

        return NSLocalizedString("holder_dccDetails_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: De volgende gegevens van je vaccinatie zijn opgehaald bij %@:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationSubtitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.event.about.vaccination.subtitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.subtitle"
        }

        let format = NSLocalizedString("holder.event.about.vaccination.subtitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: De volgende gegevens zijn opgehaald bij de testlocatie:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoverySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.subtitle"
        }

        return NSLocalizedString("holder.event.about.recovery.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: De volgende gegevens zijn opgehaald bij de testlocatie:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.subtitle"
        }

        return NSLocalizedString("holder.event.about.test.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: De volgende gegevens zijn opgehaald:
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_subtitle"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: De website kan niet geopend worden.
      ///
      /// Locales: en, nl
      static func holder_endOfLife_errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_endOfLife_errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_endOfLife_errorMessage"
        }

        return NSLocalizedString("holder_endOfLife_errorMessage", bundle: bundle, comment: "")
      }

      /// nl translation: De website kan niet geopend worden.
      ///
      /// Locales: en, nl
      static func verifier_endOfLife_errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_endOfLife_errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_endOfLife_errorMessage"
        }

        return NSLocalizedString("verifier_endOfLife_errorMessage", bundle: bundle, comment: "")
      }

      /// nl translation: De zorgverlener waar je gevaccineerd of getest bent kan je verder helpen. Neem contact op en geef door dat de CoronaCheck-app geen BSN gevonden heeft.
      ///
      /// Locales: en, nl
      static func holderErrorstateNobsnMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.nobsn.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.nobsn.message"
        }

        return NSLocalizedString("holder.errorstate.nobsn.message", bundle: bundle, comment: "")
      }

      /// nl translation: Demo QR-code gescand
      ///
      /// Locales: en, nl
      static func verifierResultAccessAccessibilityDemo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.accessibility.demo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.accessibility.demo"
        }

        return NSLocalizedString("verifier.result.access.accessibility.demo", bundle: bundle, comment: "")
      }

      /// nl translation: Demo QR-code gescand
      ///
      /// Locales: en, nl
      static func verifierResultDemoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.demo.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.demo.title"
        }

        return NSLocalizedString("verifier.result.demo.title", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func general_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_details"
        }

        return NSLocalizedString("general_details", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderDccRecoveryDetailsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.details.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.details.title"
        }

        return NSLocalizedString("holder.dcc.recovery.details.title", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderDccTestDetailsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.details.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.details.title"
        }

        return NSLocalizedString("holder.dcc.test.details.title", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderDccVaccinationDetailsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.details.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.details.title"
        }

        return NSLocalizedString("holder.dcc.vaccination.details.title", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderEventAboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.title"
        }

        return NSLocalizedString("holder.event.about.title", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderEventDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.details"
        }

        return NSLocalizedString("holder.event.details", bundle: bundle, comment: "")
      }

      /// nl translation: Details
      ///
      /// Locales: en, nl
      static func holderShowqrDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.details"
        }

        return NSLocalizedString("holder.showqr.details", bundle: bundle, comment: "")
      }

      /// nl translation: Details Nederlandse QR-code
      ///
      /// Locales: en, nl
      static func holder_showqr_domestic_accessibility_button_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_domestic_accessibility_button_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_domestic_accessibility_button_details"
        }

        return NSLocalizedString("holder_showqr_domestic_accessibility_button_details", bundle: bundle, comment: "")
      }

      /// nl translation: Details internationale QR-code
      ///
      /// Locales: en, nl
      static func holder_showqr_international_accessibility_button_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_international_accessibility_button_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_international_accessibility_button_details"
        }

        return NSLocalizedString("holder_showqr_international_accessibility_button_details", bundle: bundle, comment: "")
      }

      /// nl translation: Deze QR-code bevat geen coronabewijs
      ///
      /// Locales: en, nl
      static func verifierResultAlertUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.alert.unknown.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.alert.unknown.title"
        }

        return NSLocalizedString("verifier.result.alert.unknown.title", bundle: bundle, comment: "")
      }

      /// nl translation: Deze QR-code heb je waarschijnlijk niet nodig, want je hebt een nieuwere dosis.
      ///
      /// Locales: en, nl
      static func holder_showQR_label_newerQRAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_label_newerQRAvailable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_label_newerQRAvailable"
        }

        return NSLocalizedString("holder_showQR_label_newerQRAvailable", bundle: bundle, comment: "")
      }

      /// nl translation: Deze QR-code is niet meer geldig
      ///
      /// Locales: en, nl
      static func holder_showQR_label_expiredQR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_label_expiredQR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_label_expiredQR"
        }

        return NSLocalizedString("holder_showQR_label_expiredQR", bundle: bundle, comment: "")
      }

      /// nl translation: Deze code is niet geldig. Een code ziet er bijvoorbeeld zo uit: BRB-YYYYYYYYY1-Z2.
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowErrorInvalidCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.error.invalid.code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.error.invalid.code"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.error.invalid.code", bundle: bundle, comment: "")
      }

      /// nl translation: Deze code is niet geldig. Een code ziet er bijvoorbeeld zo uit: VAC-YYYYYYYYY1-F2.
      ///
      /// Locales: en, nl
      static func visitorpass_token_error_invalid_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_error_invalid_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_error_invalid_code"
        }

        return NSLocalizedString("visitorpass_token_error_invalid_code", bundle: bundle, comment: "")
      }

      /// nl translation: Deze e-mail is automatisch opgesteld met alle gegevens die wij nodig hebben. We vragen je geen extra informatie toe te voegen. Wij ontvangen bij verzending je e-mailadres, samen met informatie over het technische probleem. Deze gegevens zullen zo snel mogelijk worden verwijderd.  Dit bericht is bedoeld voor het CoronaCheck ontwikkelteam. Het probleem zal zo snel mogelijk opgelost worden.  Een onoplosbaar probleem heeft plaatsgevonden in CoronaCheck %@ %@ version %@ (%@).  ----------- Probleem details: 	Bericht: %@ 	Meer informatie: %@ -----------
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_email_body(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, _ value6: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_unrecoverableError_email_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4, value5, value6)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_email_body"
        }

        let format = NSLocalizedString("general_unrecoverableError_email_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4, value5, value6)
      }

      /// nl translation: Deze gegevens horen bij de naam <b>%@</b>
      ///
      /// Locales: en, nl
      static func holder_identitySelection_details_body(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identitySelection_details_body", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_details_body"
        }

        let format = NSLocalizedString("holder_identitySelection_details_body", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Deze gegevens verwijderen?
      ///
      /// Locales: en, nl
      static func holder_storedEvent_alert_removeEvents_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvent_alert_removeEvents_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvent_alert_removeEvents_title"
        }

        return NSLocalizedString("holder_storedEvent_alert_removeEvents_title", bundle: bundle, comment: "")
      }

      /// nl translation: Deze lettercombinatie en QR-code horen niet bij elkaar.
      ///
      /// Locales: en, nl
      static func holderCheckdccRejectedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.rejected.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.rejected.message"
        }

        return NSLocalizedString("holder.checkdcc.rejected.message", bundle: bundle, comment: "")
      }

      /// nl translation: Deze lettercombinatie is niet geldig. Een combinatie ziet er bijvoorbeeld zo uit: FLBRXQ.
      ///
      /// Locales: en, nl
      static func holderDcctokenentryErrorInvalidcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.error.invalidcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.error.invalidcode"
        }

        return NSLocalizedString("holder.dcctokenentry.error.invalidcode", bundle: bundle, comment: "")
      }

      /// nl translation: Deze testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowErrorUnknownprovider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.error.unknownprovider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.error.unknownprovider"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.error.unknownprovider", bundle: bundle, comment: "")
      }

      /// nl translation: Deze testlocatie is (nog) niet bij ons bekend. Neem contact op met de locatie waar je bent getest.
      ///
      /// Locales: en, nl
      static func visitorpass_token_error_unknown_provider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_error_unknown_provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_error_unknown_provider"
        }

        return NSLocalizedString("visitorpass_token_error_unknown_provider", bundle: bundle, comment: "")
      }

      /// nl translation: Deze testuitslag is opgehaald bij de testlocatie. Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static func holderTestresultsResultsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.results.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.results.text"
        }

        return NSLocalizedString("holder.testresults.results.text", bundle: bundle, comment: "")
      }

      /// nl translation: Deze testuitslag is opgehaald bij de testlocatie. Als de gegevens kloppen kun je een bewijs maken.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_negativeTest_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_negativeTest_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_negativeTest_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_negativeTest_message", bundle: bundle, comment: "")
      }

      /// nl translation: Deze wordt verwijderd
      ///
      /// Locales: en, nl
      static func holder_identitySelection_error_willBeRemoved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_error_willBeRemoved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_error_willBeRemoved"
        }

        return NSLocalizedString("holder_identitySelection_error_willBeRemoved", bundle: bundle, comment: "")
      }

      /// nl translation: DigiD aanvragen
      ///
      /// Locales: en, nl
      static func holder_noDigiD_buttonTitle_requestDigiD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_buttonTitle_requestDigiD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_buttonTitle_requestDigiD"
        }

        return NSLocalizedString("holder_noDigiD_buttonTitle_requestDigiD", bundle: bundle, comment: "")
      }

      /// nl translation: Dit bewijs staat al in de app
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateDuplicate_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateDuplicate_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateDuplicate_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateDuplicate_title", bundle: bundle, comment: "")
      }

      /// nl translation: Dit bewijs wordt nu niet gebruikt in Nederland
      ///
      /// Locales: en, nl
      static func holder_dashboard_domesticQRCard_3G_inactive_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_domesticQRCard_3G_inactive_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_domesticQRCard_3G_inactive_label"
        }

        return NSLocalizedString("holder_dashboard_domesticQRCard_3G_inactive_label", bundle: bundle, comment: "")
      }

      /// nl translation: Dit papieren bewijs is verlopen
      ///
      /// Locales: en, nl
      static func holderCheckdccExpiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.expired.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.expired.title"
        }

        return NSLocalizedString("holder.checkdcc.expired.title", bundle: bundle, comment: "")
      }

      /// nl translation: Doe ik later
      ///
      /// Locales: en, nl
      static func recommendedUpdateAppActionCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended.updateApp.action.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended.updateApp.action.cancel"
        }

        return NSLocalizedString("recommended.updateApp.action.cancel", bundle: bundle, comment: "")
      }

      /// nl translation: Door een storing bij een van de partijen kunnen er gegevens ontbreken. Probeer het eventueel later nog een keer.
      ///
      /// Locales: en, nl
      static func holderFetcheventsWarningSomeresultsNetworkerrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.warning.someresults.networkerror.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.warning.someresults.networkerror.message"
        }

        return NSLocalizedString("holder.fetchevents.warning.someresults.networkerror.message", bundle: bundle, comment: "")
      }

      /// nl translation: Door een storing bij een van de partijen kunnen er gegevens ontbreken. Probeer het later nog een keer.
      ///
      /// Locales: en, nl
      static func holderFetcheventsWarningSomeresultsNetworkwasbusyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.warning.someresults.networkwasbusy.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.warning.someresults.networkwasbusy.message"
        }

        return NSLocalizedString("holder.fetchevents.warning.someresults.networkwasbusy.message", bundle: bundle, comment: "")
      }

      /// nl translation: Door een storing of drukte zijn mogelijk niet al jouw gegevens opgehaald. Mist er een vaccinatie? Kom later terug en haal opnieuw je gegevens op.
      ///
      /// Locales: en, nl
      static func holderErrorstateSomeresultMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.someresult.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.someresult.message"
        }

        return NSLocalizedString("holder.errorstate.someresult.message", bundle: bundle, comment: "")
      }

      /// nl translation: Doorgaan zonder DigiD
      ///
      /// Locales: en, nl
      static func holder_noDigiD_buttonTitle_continueWithoutDigiD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_buttonTitle_continueWithoutDigiD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_buttonTitle_continueWithoutDigiD"
        }

        return NSLocalizedString("holder_noDigiD_buttonTitle_continueWithoutDigiD", bundle: bundle, comment: "")
      }

      /// nl translation: Dosis %@ van %@ / Dose %@ of %@
      ///
      /// Locales: en, nl
      static func holderVaccinationAboutOffDcc(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.vaccination.about.off.dcc", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.about.off.dcc"
        }

        let format = NSLocalizedString("holder.vaccination.about.off.dcc", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      /// nl translation: Dosis %@/%@
      ///
      /// Locales: en, nl
      static func holderDashboardQrEuVaccinecertificatedoses(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.qr.eu.vaccinecertificatedoses", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.eu.vaccinecertificatedoses"
        }

        let format = NSLocalizedString("holder.dashboard.qr.eu.vaccinecertificatedoses", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Dosis %@/%@
      ///
      /// Locales: en, nl
      static func holderShowqrQrEuVaccinecertificatedoses(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.showqr.qr.eu.vaccinecertificatedoses", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.qr.eu.vaccinecertificatedoses"
        }

        let format = NSLocalizedString("holder.showqr.qr.eu.vaccinecertificatedoses", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Dosis / Number in series of doses:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationDosage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.dosage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.dosage"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.dosage", bundle: bundle, comment: "")
      }

      /// nl translation: Dosis:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationDosage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.dosage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.dosage"
        }

        return NSLocalizedString("holder.dcc.vaccination.dosage", bundle: bundle, comment: "")
      }

      /// nl translation: Dosis:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationDosage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.dosage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.dosage"
        }

        return NSLocalizedString("holder.event.about.vaccination.dosage", bundle: bundle, comment: "")
      }

      /// nl translation: Download de laatste versie van de app om verder te gaan.
      ///
      /// Locales: en, nl
      static func holder_updateApp_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_updateApp_content", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_updateApp_content"
        }

        return NSLocalizedString("holder_updateApp_content", bundle: bundle, comment: "")
      }

      /// nl translation: Een Nederlands en internationaal tabblad
      ///
      /// Locales: en, nl
      static func holderUpdatepageTitleTab(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.updatepage.title.tab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.updatepage.title.tab"
        }

        return NSLocalizedString("holder.updatepage.title.tab", bundle: bundle, comment: "")
      }

      /// nl translation: Een QR-code maken
      ///
      /// Locales: en, nl
      static func holderAboutmakingaqrHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.aboutmakingaqr.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.aboutmakingaqr.header"
        }

        return NSLocalizedString("holder.aboutmakingaqr.header", bundle: bundle, comment: "")
      }

      /// nl translation: Een andere zorgverlener
      ///
      /// Locales: en, nl
      static func holder_chooseEventLocation_buttonTitle_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_chooseEventLocation_buttonTitle_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_chooseEventLocation_buttonTitle_other"
        }

        return NSLocalizedString("holder_chooseEventLocation_buttonTitle_other", bundle: bundle, comment: "")
      }

      /// nl translation: Een bezoekersbewijs toevoegen
      ///
      /// Locales: en, nl
      static func visitorpass_start_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_start_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_start_title"
        }

        return NSLocalizedString("visitorpass_start_title", bundle: bundle, comment: "")
      }

      /// nl translation: Een coronabewijs inscannen
      ///
      /// Locales: en, nl
      static func holder_paperproof_startscanning_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_startscanning_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_startscanning_title"
        }

        return NSLocalizedString("holder_paperproof_startscanning_title", bundle: bundle, comment: "")
      }

      /// nl translation: Een schermafbeelding is geen geldig bewijs
      ///
      /// Locales: en, nl
      static func holderShowqrScreenshotwarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.screenshotwarning.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.screenshotwarning.title"
        }

        return NSLocalizedString("holder.showqr.screenshotwarning.title", bundle: bundle, comment: "")
      }

      /// nl translation: Een schermafbeelding is geen geldig toegangsbewijs
      ///
      /// Locales: en, nl
      static func holderEnlargedScreenshotTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.enlarged.screenshot.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.enlarged.screenshot.title"
        }

        return NSLocalizedString("holder.enlarged.screenshot.title", bundle: bundle, comment: "")
      }

      /// nl translation: Een schermafbeelding zorgt voor problemen bij het scannen. Alleen de QR-code in de app is een geldig toegangsbewijs.
      ///
      /// Locales: en, nl
      static func holderEnlargedScreenshotMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.enlarged.screenshot.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.enlarged.screenshot.message"
        }

        return NSLocalizedString("holder.enlarged.screenshot.message", bundle: bundle, comment: "")
      }

      /// nl translation: Eind van lijst.
      ///
      /// Locales: en, nl
      static func generalListAccessibilityEnd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.list.accessibility.end", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.list.accessibility.end"
        }

        return NSLocalizedString("general.list.accessibility.end", bundle: bundle, comment: "")
      }

      /// nl translation: Er gaat iets mis. Sluit CoronaCheck helemaal af en start de app opnieuw op.
      ///
      /// Locales: en, nl
      static func holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen"
        }

        return NSLocalizedString("holder_dashboard_strippenExpiredError_fuzzyMatching_outOfStrippen", bundle: bundle, comment: "")
      }

      /// nl translation: Er is alleen een herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryOnly_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryOnly_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryOnly_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryOnly_title", bundle: bundle, comment: "")
      }

      /// nl translation: Er is alleen een internationaal bewijs gemaakt
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateInternationalQROnly_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateInternationalQROnly_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateInternationalQROnly_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateInternationalQROnly_title", bundle: bundle, comment: "")
      }

      /// nl translation: Er is een herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryAndDosisCorrection_title", bundle: bundle, comment: "")
      }

      /// nl translation: Er is een technisch probleem met de laatste update van CoronaCheck. Rapporteer dit probleem zodat we het zo snel mogelijk kunnen oplossen.
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_sendCrashReport_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_unrecoverableError_sendCrashReport_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_sendCrashReport_message"
        }

        return NSLocalizedString("general_unrecoverableError_sendCrashReport_message", bundle: bundle, comment: "")
      }

      /// nl translation: Er klopt iets niet
      ///
      /// Locales: en, nl
      static func verifierResultAccessReadmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.readmore"
        }

        return NSLocalizedString("verifier.result.access.readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Er klopt iets niet
      ///
      /// Locales: en, nl
      static func verifierResultCheckTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.check.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.check.title"
        }

        return NSLocalizedString("verifier.result.check.title", bundle: bundle, comment: "")
      }

      /// nl translation: Er worden <b>geen locatiegegevens</b> gebruikt of bewaard
      ///
      /// Locales: en, nl
      static func holderConsentItem2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.item.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.item.2"
        }

        return NSLocalizedString("holder.consent.item.2", bundle: bundle, comment: "")
      }

      /// nl translation: Er worden <b>geen locatiegegevens</b> gebruikt of bewaard
      ///
      /// Locales: en, nl
      static func verifierConsentItem1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.item.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.item.1"
        }

        return NSLocalizedString("verifier.consent.item.1", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn beveiligingsrisico’s gevonden
      ///
      /// Locales: en, nl
      static func holderDeviceAuthenticationWarningTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.device.authentication.warning.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.device.authentication.warning.title"
        }

        return NSLocalizedString("holder.device.authentication.warning.title", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn beveiligingsrisico’s gevonden
      ///
      /// Locales: en, nl
      static func jailbrokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jailbroken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jailbroken.title"
        }

        return NSLocalizedString("jailbroken.title", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn gegevens uit de app verwijderd.
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_banner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_banner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_banner_title"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_banner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn nu veel bezoekers op de server van de GGD. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorMessageToobusy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.error.message.toobusy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.message.toobusy"
        }

        return NSLocalizedString("holder.vaccination.error.message.toobusy", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn nu veel bezoekers op de server van de GGD. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorTitleToobusy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.error.title.toobusy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.title.toobusy"
        }

        return NSLocalizedString("holder.vaccination.error.title.toobusy", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn ongeldige vaccinatie- of testgegevens van jou gevonden. Deze zijn uit de app verwijderd. Mogelijk zijn hierdoor ook bewijzen weggehaald.
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_alert_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_alert_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_alert_body"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_alert_body", bundle: bundle, comment: "")
      }

      /// nl translation: Er zijn weer bewijzen voor in Nederland en het buitenland. Gebruik je Nederlandse bewijs voor toegang tot plekken en activiteiten in Nederland. Ga je de grens over of ben je in het buitenland? Gebruik dan je internationale bewijs.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_dutchAndInternationalCertificates_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_dutchAndInternationalCertificates_body"
        }

        return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_body", bundle: bundle, comment: "")
      }

      /// nl translation: FEB
      ///
      /// Locales: en, nl
      static func holderTestresultsFebruary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.february", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.february"
        }

        return NSLocalizedString("holder.testresults.february", bundle: bundle, comment: "")
      }

      /// nl translation: Facility approved by the State of The Netherlands
      ///
      /// Locales: en, nl
      static func holderDccListFacility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.list.facility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.list.facility"
        }

        return NSLocalizedString("holder.dcc.list.facility", bundle: bundle, comment: "")
      }

      /// nl translation: Fout op de server
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredServererrorAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expired.servererror.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.servererror.alert.title"
        }

        return NSLocalizedString("holder.dashboard.strippen.expired.servererror.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static func holderLocationGgdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.ggd.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.ggd.title"
        }

        return NSLocalizedString("holder.location.ggd.title", bundle: bundle, comment: "")
      }

      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static func holderProviderGgdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.ggd.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.ggd.title"
        }

        return NSLocalizedString("holder.provider.ggd.title", bundle: bundle, comment: "")
      }

      /// nl translation: GGD
      ///
      /// Locales: en, nl
      static func holder_chooseEventLocation_buttonTitle_GGD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_chooseEventLocation_buttonTitle_GGD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_chooseEventLocation_buttonTitle_GGD"
        }

        return NSLocalizedString("holder_chooseEventLocation_buttonTitle_GGD", bundle: bundle, comment: "")
      }

      /// nl translation: Ga akkoord om verder te kunnen
      ///
      /// Locales: en, nl
      static func verifierConsentButtonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.button.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.button.error"
        }

        return NSLocalizedString("verifier.consent.button.error", bundle: bundle, comment: "")
      }

      /// nl translation: Ga je naar een land waar een coronabewijs nodig is? Controleer altijd voor vertrek of je het goede bewijs hebt.
      ///
      /// Locales: en, nl
      static func holder_dashboard_filledState_international_0G_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_filledState_international_0G_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_filledState_international_0G_message"
        }

        return NSLocalizedString("holder_dashboard_filledState_international_0G_message", bundle: bundle, comment: "")
      }

      /// nl translation: Ga je naar het buitenland? Controleer altijd voor vertrek of je een coronabewijs nodig hebt.
      ///
      /// Locales: en, nl
      static func holder_dashboard_emptyState_international_0G_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_emptyState_international_0G_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_emptyState_international_0G_message"
        }

        return NSLocalizedString("holder_dashboard_emptyState_international_0G_message", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedag
      ///
      /// Locales: en, nl
      static func verifierResultIdentityDayofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.identity.dayofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.dayofbirth"
        }

        return NSLocalizedString("verifier.result.identity.dayofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.dateofbirth"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.dateofbirth"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum / Date of birth*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.dateofbirth"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.dateofbirth"
        }

        return NSLocalizedString("holder.dcc.recovery.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderDccTestDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.dateofbirth"
        }

        return NSLocalizedString("holder.dcc.test.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.dateofbirth"
        }

        return NSLocalizedString("holder.dcc.vaccination.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.dateofbirth"
        }

        return NSLocalizedString("holder.event.about.recovery.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.dateofbirth"
        }

        return NSLocalizedString("holder.event.about.test.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationDateofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.dateofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.dateofbirth"
        }

        return NSLocalizedString("holder.event.about.vaccination.dateofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum:
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_date_of_birth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_date_of_birth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_date_of_birth"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_date_of_birth", bundle: bundle, comment: "")
      }

      /// nl translation: Geboortedatum: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_birthDate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_birthDate", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_birthDate"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_birthDate", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Geboortemaand
      ///
      /// Locales: en, nl
      static func verifierResultIdentityMonthofbirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.identity.monthofbirth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.monthofbirth"
        }

        return NSLocalizedString("verifier.result.identity.monthofbirth", bundle: bundle, comment: "")
      }

      /// nl translation: Gebruik de QR-code in de app
      ///
      /// Locales: en, nl
      static func holderShowqrScreenshotwarningSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.screenshotwarning.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.screenshotwarning.subtitle"
        }

        return NSLocalizedString("holder.showqr.screenshotwarning.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Gebruikersvoorwaarden
      ///
      /// Locales: en, nl
      static func verifierMenuPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.privacy"
        }

        return NSLocalizedString("verifier.menu.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: Geef aan waar je bent getest om een bewijs te maken van je positieve of negatieve testuitslag.
      ///
      /// Locales: en, nl
      static func holder_whereUserTested_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_whereUserTested_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_whereUserTested_body"
        }

        return NSLocalizedString("holder_whereUserTested_body", bundle: bundle, comment: "")
      }

      /// nl translation: Geef aan wat je wilt toevoegen aan je bewijs.
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.message"
        }

        return NSLocalizedString("holder.chooseqrcodetype.message", bundle: bundle, comment: "")
      }

      /// nl translation: Geef ons feedback
      ///
      /// Locales: en, nl
      static func holderMenuFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.feedback"
        }

        return NSLocalizedString("holder.menu.feedback", bundle: bundle, comment: "")
      }

      /// nl translation: Geen BSN gevonden
      ///
      /// Locales: en, nl
      static func holderErrorstateNobsnTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.nobsn.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.nobsn.title"
        }

        return NSLocalizedString("holder.errorstate.nobsn.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen Nederlands herstelbewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenDomesticRecoveryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.recovery.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.domestic.recovery.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.recovery.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen Nederlands testbewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenDomesticTestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.test.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.domestic.test.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.test.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen Nederlands vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenDomesticVaccinationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.vaccination.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.domestic.vaccination.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.domestic.vaccination.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen Nederlands vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func holderIncompletedutchvaccinationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.incompletedutchvaccination.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.incompletedutchvaccination.title"
        }

        return NSLocalizedString("holder.incompletedutchvaccination.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen bewijzen gescand
      ///
      /// Locales: en, nl
      static func scan_log_list_no_items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_log_list_no_items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_list_no_items"
        }

        return NSLocalizedString("scan_log_list_no_items", bundle: bundle, comment: "")
      }

      /// nl translation: Geen gegevens opgeslagen
      ///
      /// Locales: en, nl
      static func holder_storedEvents_list_noEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_list_noEvents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_list_noEvents"
        }

        return NSLocalizedString("holder_storedEvents_list_noEvents", bundle: bundle, comment: "")
      }

      /// nl translation: Geen geldig bewijs
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateNoValidCertificate_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateNoValidCertificate_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateNoValidCertificate_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateNoValidCertificate_title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen geldige QR-code
      ///
      /// Locales: en, nl
      static func verifierResultDeniedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.denied.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.denied.title"
        }

        return NSLocalizedString("verifier.result.denied.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen geldige combinatie
      ///
      /// Locales: en, nl
      static func holderCheckdccRejectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.rejected.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.rejected.title"
        }

        return NSLocalizedString("holder.checkdcc.rejected.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen geldige combinatie. Vul de 6-cijferige verificatiecode in.
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowErrorInvalidCombination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.error.invalid.combination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.error.invalid.combination"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.error.invalid.combination", bundle: bundle, comment: "")
      }

      /// nl translation: Geen geldige combinatie. Vul de 6-cijferige verificatiecode in.
      ///
      /// Locales: en, nl
      static func visitorpass_token_error_invalid_combination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_error_invalid_combination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_error_invalid_combination"
        }

        return NSLocalizedString("visitorpass_token_error_invalid_combination", bundle: bundle, comment: "")
      }

      /// nl translation: Geen internationaal herstelbewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuRecoveryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.recovery.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.recovery.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.recovery.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen internationaal testbewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuTestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.test.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.test.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.test.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen internationaal vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func holderDashboardNotValidInThisRegionScreenEuVaccinationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.vaccination.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.notValidInThisRegionScreen.eu.vaccination.title"
        }

        return NSLocalizedString("holder.dashboard.notValidInThisRegionScreen.eu.vaccination.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen internetverbinding
      ///
      /// Locales: en, nl
      static func generalErrorNointernetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.nointernet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.nointernet.title"
        }

        return NSLocalizedString("general.error.nointernet.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen lettercombinatie?
      ///
      /// Locales: en, nl
      static func holderDcctokenentryButtonNotoken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.button.notoken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.button.notoken"
        }

        return NSLocalizedString("holder.dcctokenentry.button.notoken", bundle: bundle, comment: "")
      }

      /// nl translation: Geen lettercombinatie?
      ///
      /// Locales: en, nl
      static func holderDcctokenentryinfoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentryinfo.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentryinfo.title"
        }

        return NSLocalizedString("holder.dcctokenentryinfo.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen positieve testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static func holderRecoveryNolistTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.recovery.nolist.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.recovery.nolist.title"
        }

        return NSLocalizedString("holder.recovery.nolist.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static func holderEventNolistTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.nolist.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.nolist.title"
        }

        return NSLocalizedString("holder.event.nolist.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen testuitslag beschikbaar
      ///
      /// Locales: en, nl
      static func holderTestNolistTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.test.nolist.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.test.nolist.title"
        }

        return NSLocalizedString("holder.test.nolist.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen toegang tot camera
      ///
      /// Locales: en, nl
      static func holder_scanner_permission_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_permission_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_permission_title"
        }

        return NSLocalizedString("holder_scanner_permission_title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen vaccinatiebeoordeling beschikbaar
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_nolist_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_nolist_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_nolist_title"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_nolist_title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen vaccinaties beschikbaar
      ///
      /// Locales: en, nl
      static func holderVaccinationNolistTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.nolist.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.nolist.title"
        }

        return NSLocalizedString("holder.vaccination.nolist.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowConfirmresendverificationalertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.confirmresendverificationalert.title"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowRetryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.retry.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.retry.title"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.retry.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowConfirmresendverificationalertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.confirmresendverificationalert.title"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Geen verificatiecode gekregen?
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowRetryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.retry.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.retry.title"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.retry.title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens bijwerken
      ///
      /// Locales: en, nl
      static func holder_identitySelection_loading_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_loading_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_loading_title"
        }

        return NSLocalizedString("holder_identitySelection_loading_title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens kloppen
      ///
      /// Locales: en, nl
      static func verifierResultAccessIdentityverified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.identityverified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.identityverified"
        }

        return NSLocalizedString("verifier.result.access.identityverified", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens kunnen wegvallen om de privacy van de bezoeker te beschermen. Je ziet dan een streepje (-) staan. Controleer in dat geval alleen de gegevens die je wel ziet.
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsCheckonlythevisibledataMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.checkonlythevisibledata.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.checkonlythevisibledata.message"
        }

        return NSLocalizedString("verifier.scaninstructions.checkonlythevisibledata.message", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens mogelijk niet compleet
      ///
      /// Locales: en, nl
      static func holderFetcheventsWarningSomeresultsNetworkerrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.warning.someresults.networkerror.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.warning.someresults.networkerror.title"
        }

        return NSLocalizedString("holder.fetchevents.warning.someresults.networkerror.title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens mogelijk niet compleet
      ///
      /// Locales: en, nl
      static func holderFetcheventsWarningSomeresultsNetworkwasbusyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.warning.someresults.networkwasbusy.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.warning.someresults.networkwasbusy.title"
        }

        return NSLocalizedString("holder.fetchevents.warning.someresults.networkwasbusy.title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens opgehaald bij: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_retrievedFrom_single(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_retrievedFrom_single", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_retrievedFrom_single"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_retrievedFrom_single", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Gegevens opgehaald bij: %@ en %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_retrievedFrom_plural(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_retrievedFrom_plural", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_retrievedFrom_plural"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_retrievedFrom_plural", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Gegevens ophalen
      ///
      /// Locales: en, nl
      static func holder_fetchRemoteEvents_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fetchRemoteEvents_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fetchRemoteEvents_title"
        }

        return NSLocalizedString("holder_fetchRemoteEvents_title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens van de bezoeker worden <b>nergens centraal opgeslagen</b> 
      ///
      /// Locales: en, nl
      static func verifierConsentItem3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.item.3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.item.3"
        }

        return NSLocalizedString("verifier.consent.item.3", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens van je herstel ophalen
      ///
      /// Locales: en, nl
      static func holderRecoveryStartTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.recovery.start.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.recovery.start.title"
        }

        return NSLocalizedString("holder.recovery.start.title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens van je test ophalen
      ///
      /// Locales: en, nl
      static func holder_negativetest_ggd_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_negativetest_ggd_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_negativetest_ggd_title"
        }

        return NSLocalizedString("holder_negativetest_ggd_title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens van je vaccinatie ophalen
      ///
      /// Locales: en, nl
      static func holder_addVaccination_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_addVaccination_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_addVaccination_title"
        }

        return NSLocalizedString("holder_addVaccination_title", bundle: bundle, comment: "")
      }

      /// nl translation: Gegevens verwijderen
      ///
      /// Locales: en, nl
      static func holder_storedEvents_eraseEvents_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_eraseEvents_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_eraseEvents_title"
        }

        return NSLocalizedString("holder_storedEvents_eraseEvents_title", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig tot / Valid to*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryValiduntil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.validuntil", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.validuntil"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.validuntil", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig tot:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryValiduntil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.validuntil", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.validuntil"
        }

        return NSLocalizedString("holder.dcc.recovery.validuntil", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig tot:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryValiduntil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.validuntil", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.validuntil"
        }

        return NSLocalizedString("holder.event.about.recovery.validuntil", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig vanaf / Valid from*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryValidfrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.validfrom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.validfrom"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.validfrom", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig vanaf:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryValidfrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.validfrom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.validfrom"
        }

        return NSLocalizedString("holder.dcc.recovery.validfrom", bundle: bundle, comment: "")
      }

      /// nl translation: Geldig vanaf:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryValidfrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.validfrom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.validfrom"
        }

        return NSLocalizedString("holder.event.about.recovery.validfrom", bundle: bundle, comment: "")
      }

      /// nl translation: Geldige QR-code gescand
      ///
      /// Locales: en, nl
      static func verifierResultAccessAccessibilityVerified(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.accessibility.verified", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.accessibility.verified"
        }

        return NSLocalizedString("verifier.result.access.accessibility.verified", bundle: bundle, comment: "")
      }

      /// nl translation: Gescande gegevens
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_paperflow_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_paperflow_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_paperflow_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_paperflow_title", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in / Tested in:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.country"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.country", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in / Tested in:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.country"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.country", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.country"
        }

        return NSLocalizedString("holder.dcc.recovery.country", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static func holderDccTestCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.country"
        }

        return NSLocalizedString("holder.dcc.test.country", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static func holder_event_about_recovery_countrytestedin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_about_recovery_countrytestedin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_about_recovery_countrytestedin"
        }

        return NSLocalizedString("holder_event_about_recovery_countrytestedin", bundle: bundle, comment: "")
      }

      /// nl translation: Getest in:
      ///
      /// Locales: en, nl
      static func holder_event_about_test_countrytestedin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_about_test_countrytestedin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_about_test_countrytestedin"
        }

        return NSLocalizedString("holder_event_about_test_countrytestedin", bundle: bundle, comment: "")
      }

      /// nl translation: Gevaccineerd in (land):
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_country"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_country", bundle: bundle, comment: "")
      }

      /// nl translation: Gevaccineerd in / Vaccinated in:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.country"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.country", bundle: bundle, comment: "")
      }

      /// nl translation: Gevaccineerd in:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.country"
        }

        return NSLocalizedString("holder.dcc.vaccination.country", bundle: bundle, comment: "")
      }

      /// nl translation: Gevaccineerd in:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.country"
        }

        return NSLocalizedString("holder.event.about.vaccination.country", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een beoordelingscode invullen
      ///
      /// Locales: en, nl
      static func visitorpass_token_error_empty_token(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_error_empty_token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_error_empty_token"
        }

        return NSLocalizedString("visitorpass_token_error_empty_token", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een keuze maken
      ///
      /// Locales: en, nl
      static func holder_identitySelection_error_makeAChoice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_error_makeAChoice", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_error_makeAChoice"
        }

        return NSLocalizedString("holder_identitySelection_error_makeAChoice", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een lettercombinatie invullen
      ///
      /// Locales: en, nl
      static func holderDcctokenentryErrorEmptycode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.error.emptycode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.error.emptycode"
        }

        return NSLocalizedString("holder.dcctokenentry.error.emptycode", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een ophaalcode invullen
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowErrorEmptytoken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.error.emptytoken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.error.emptytoken"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.error.emptytoken", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een ophaalcode invullen
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowErrorEmptytoken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.error.emptytoken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.error.emptytoken"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.error.emptytoken", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een verificatiecode invullen
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowErrorEmptycode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.error.emptycode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.error.emptycode"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.error.emptycode", bundle: bundle, comment: "")
      }

      /// nl translation: Graag eerst een verificatiecode invullen
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowErrorEmptycode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.error.emptycode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.error.emptycode"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.error.emptycode", bundle: bundle, comment: "")
      }

      /// nl translation: Groen scherm = toegang
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsGreenScreenIsAccessTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.greenScreenIsAccess.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.greenScreenIsAccess.title"
        }

        return NSLocalizedString("verifier.scaninstructions.greenScreenIsAccess.title", bundle: bundle, comment: "")
      }

      /// nl translation: Haal ook mijn positieve testuitslag op
      ///
      /// Locales: en, nl
      static func holder_addVaccine_alsoCollectPositiveTestResults_checkbox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_addVaccine_alsoCollectPositiveTestResults_checkbox", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_addVaccine_alsoCollectPositiveTestResults_checkbox"
        }

        return NSLocalizedString("holder_addVaccine_alsoCollectPositiveTestResults_checkbox", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je corona gehad? Dan kun je van de positieve testuitslag een herstelbewijs maken. Log in met DigiD om een testuitslag op te halen.
      ///
      /// Locales: en, nl
      static func holderRecoveryStartMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.recovery.start.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.recovery.start.message"
        }

        return NSLocalizedString("holder.recovery.start.message", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je een coronabewijs met QR-code van een test of vaccinatie uit het buitenland? Dan kun je jouw bewijs nu toevoegen aan CoronaCheck. Kies in het menu voor “Coronabewijs inscannen”.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_foreignproofs_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_foreignproofs_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_foreignproofs_body"
        }

        return NSLocalizedString("holder_newintheapp_foreignproofs_body", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen DigiD?
      ///
      /// Locales: en, nl
      static func holderVaccinationStartNodigid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.start.nodigid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.start.nodigid"
        }

        return NSLocalizedString("holder.vaccination.start.nodigid", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen beoordelingscode?
      ///
      /// Locales: en, nl
      static func visitorpass_code_review_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_review_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_review_button"
        }

        return NSLocalizedString("visitorpass_code_review_button", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen beoordelingscode?
      ///
      /// Locales: en, nl
      static func visitorpass_token_modal_notoken_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_modal_notoken_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_modal_notoken_title"
        }

        return NSLocalizedString("visitorpass_token_modal_notoken_title", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen lettercombinatie?
      ///
      /// Locales: en, nl
      static func holderPaperproofNotokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.paperproof.notoken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.paperproof.notoken.title"
        }

        return NSLocalizedString("holder.paperproof.notoken.title", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen ophaalcode?
      ///
      /// Locales: en, nl
      static func holderTokenentryButtonNotoken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.button.notoken", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.button.notoken"
        }

        return NSLocalizedString("holder.tokenentry.button.notoken", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je geen ophaalcode?
      ///
      /// Locales: en, nl
      static func holderTokenentryModalNotokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.modal.notoken.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.modal.notoken.title"
        }

        return NSLocalizedString("holder.tokenentry.modal.notoken.title", bundle: bundle, comment: "")
      }

      /// nl translation: Heb je wel een Nederlands burgerservicenummer (BSN)?
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_title"
        }

        return NSLocalizedString("holder_checkForBSN_title", bundle: bundle, comment: "")
      }

      /// nl translation: Het bewijs dat je probeert toe te voegen staat al in de app. Je hoeft het niet nog een keer te scannen.
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateDuplicate_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateDuplicate_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateDuplicate_message"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateDuplicate_message", bundle: bundle, comment: "")
      }

      /// nl translation: Het is druk of er is een storing bij een aangesloten partij. Daardoor kunnen je gegevens nu niet worden opgehaald. Probeer het later nog eens.
      ///
      /// Locales: en, nl
      static func holderFetcheventsErrorNoresultsNetworkwasbusyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.error.noresults.networkwasbusy.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.error.noresults.networkwasbusy.message"
        }

        return NSLocalizedString("holder.fetchevents.error.noresults.networkwasbusy.message", bundle: bundle, comment: "")
      }

      /// nl translation: Het is niet gelukt de server te bereiken. Wil je controleren of je verbinding met het internet hebt?
      ///
      /// Locales: en, nl
      static func generalErrorServerUnreachable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.server.unreachable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.server.unreachable"
        }

        return NSLocalizedString("general.error.server.unreachable", bundle: bundle, comment: "")
      }

      /// nl translation: Het is niet gelukt om de %@ op te halen. Probeer het nog eens.
      ///
      /// Locales: en, nl
      static func holderFetcheventsErrorNoresultsNetworkerrorMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.fetchevents.error.noresults.networkerror.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.error.noresults.networkerror.message"
        }

        let format = NSLocalizedString("holder.fetchevents.error.noresults.networkerror.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Het is niet gelukt om de vaccinatie op te halen. Probeer het nog eens.
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.error.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.message"
        }

        return NSLocalizedString("holder.vaccination.error.message", bundle: bundle, comment: "")
      }

      /// nl translation: Het is niet gelukt om je testuitslag op te halen. Probeer opnieuw je bewijs te krijgen via de GGD.
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_portal_message_testFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_portal_message_testFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_portal_message_testFlow"
        }

        return NSLocalizedString("holder_authentication_popup_portal_message_testFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Het is niet gelukt om je vaccinatiegegevens op te halen. Probeer opnieuw je bewijs te regelen via de GGD.
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_portal_message_vaccinationFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_portal_message_vaccinationFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_portal_message_vaccinationFlow"
        }

        return NSLocalizedString("holder_authentication_popup_portal_message_vaccinationFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Het is niet gelukt omdat de opslag van je telefoon vol zit. Maak ruimte vrij op je telefoon en probeer het opnieuw.
      ///
      /// Locales: en, nl
      static func general_diskFull_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_diskFull_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_diskFull_body"
        }

        return NSLocalizedString("general_diskFull_body", bundle: bundle, comment: "")
      }

      /// nl translation: Hier komt jouw Nederlandse bewijs
      ///
      /// Locales: en, nl
      static func holderDashboardEmptyDomesticTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.empty.domestic.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.empty.domestic.title"
        }

        return NSLocalizedString("holder.dashboard.empty.domestic.title", bundle: bundle, comment: "")
      }

      /// nl translation: Hier komt jouw internationale bewijs
      ///
      /// Locales: en, nl
      static func holderDashboardEmptyInternationalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.empty.international.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.empty.international.title"
        }

        return NSLocalizedString("holder.dashboard.empty.international.title", bundle: bundle, comment: "")
      }

      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je gegevens ophalen.
      ///
      /// Locales: en, nl
      static func holder_vaccination_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_vaccination_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_vaccination_alert_message"
        }

        return NSLocalizedString("holder_vaccination_alert_message", bundle: bundle, comment: "")
      }

      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static func holderTestresultsAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.alert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.alert.message"
        }

        return NSLocalizedString("holder.testresults.alert.message", bundle: bundle, comment: "")
      }

      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static func holder_recovery_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_recovery_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_recovery_alert_message"
        }

        return NSLocalizedString("holder_recovery_alert_message", bundle: bundle, comment: "")
      }

      /// nl translation: Hierdoor stop je het maken van een bewijs en moet je later opnieuw je testuitslag ophalen.
      ///
      /// Locales: en, nl
      static func holder_test_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_test_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_test_alert_message"
        }

        return NSLocalizedString("holder_test_alert_message", bundle: bundle, comment: "")
      }

      /// nl translation: Hierdoor stop je het toevoegen van je vaccinatiebeoordeling en moet je later opnieuw je gegevens ophalen.
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_alert_message"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_alert_message", bundle: bundle, comment: "")
      }

      /// nl translation: Hoe gaat CoronaCheck met gegevens om?
      ///
      /// Locales: en, nl
      static func holder_storedEvents_button_handleData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_button_handleData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_button_handleData"
        }

        return NSLocalizedString("holder_storedEvents_button_handleData", bundle: bundle, comment: "")
      }

      /// nl translation: Hoe het werkt
      ///
      /// Locales: en, nl
      static func verifierMenuScaninstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.scaninstructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.scaninstructions"
        }

        return NSLocalizedString("verifier.menu.scaninstructions", bundle: bundle, comment: "")
      }

      /// nl translation: Identificatiegegevens: %@
      ///
      /// Locales: en, nl
      static func holderTestresultsIdentity(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.testresults.identity", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.identity"
        }

        let format = NSLocalizedString("holder.testresults.identity", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Ik heb de gebruikersvoorwaarden gelezen en ga hiermee akkoord.
      ///
      /// Locales: en, nl
      static func verifierConsentButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.button"
        }

        return NSLocalizedString("verifier.consent.button", bundle: bundle, comment: "")
      }

      /// nl translation: Ik heb de privacyverklaring gelezen en begrijp hoe de app met mijn gegevens omgaat.
      ///
      /// Locales: en, nl
      static func holderConsentButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.button"
        }

        return NSLocalizedString("holder.consent.button", bundle: bundle, comment: "")
      }

      /// nl translation: Ik heb een (booster)vaccinatie gehad
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionVaccineSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.vaccine.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.vaccine.subtitle"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.vaccine.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Ik heb geen DigiD
      ///
      /// Locales: en, nl
      static func holder_noDigiD_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_title"
        }

        return NSLocalizedString("holder_noDigiD_title", bundle: bundle, comment: "")
      }

      /// nl translation: Ik heb geen code gekregen
      ///
      /// Locales: en, nl
      static func holderDcctokenentryRetryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.retry.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.retry.title"
        }

        return NSLocalizedString("holder.dcctokenentry.retry.title", bundle: bundle, comment: "")
      }

      /// nl translation: In Nederland wordt het coronabewijs niet meer gebruikt. Daarom staan er alleen nog internationale bewijzen in de app.
      ///
      /// Locales: en, nl
      static func holder_dashboard_noDomesticCertificatesBanner_0G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_0G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_noDomesticCertificatesBanner_0G_title"
        }

        return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_0G_title", bundle: bundle, comment: "")
      }

      /// nl translation: In Nederland wordt het coronatoegangsbewijs niet meer gebruikt. Nederlandse bewijzen zijn daarom uit de app gehaald. Voor reizen in het buitenland zijn gewoon nog internationale bewijzen te maken en te gebruiken.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_onlyInternationalCertificates_0G_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_onlyInternationalCertificates_0G_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_onlyInternationalCertificates_0G_body"
        }

        return NSLocalizedString("holder_newintheapp_content_onlyInternationalCertificates_0G_body", bundle: bundle, comment: "")
      }

      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.description"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.description", bundle: bundle, comment: "")
      }

      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.description"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.description", bundle: bundle, comment: "")
      }

      /// nl translation: In jouw internationale QR-code staan de volgende gegevens:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.description"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.description", bundle: bundle, comment: "")
      }

      /// nl translation: Ingescand bewijs
      ///
      /// Locales: en, nl
      static func holder_identitySelection_details_scannedPaperProof(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_details_scannedPaperProof", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_details_scannedPaperProof"
        }

        return NSLocalizedString("holder_identitySelection_details_scannedPaperProof", bundle: bundle, comment: "")
      }

      /// nl translation: Ingescand bewijs
      ///
      /// Locales: en, nl
      static func holder_storedEvents_listHeader_paperFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_listHeader_paperFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_listHeader_paperFlow"
        }

        return NSLocalizedString("holder_storedEvents_listHeader_paperFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Inloggen afgebroken
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_digid_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_digid_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_digid_title"
        }

        return NSLocalizedString("holder_authentication_popup_digid_title", bundle: bundle, comment: "")
      }

      /// nl translation: Installeer update
      ///
      /// Locales: en, nl
      static func holder_updateApp_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_updateApp_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_updateApp_button"
        }

        return NSLocalizedString("holder_updateApp_button", bundle: bundle, comment: "")
      }

      /// nl translation: Installeer update
      ///
      /// Locales: en, nl
      static func verifier_updateApp_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_updateApp_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_updateApp_button"
        }

        return NSLocalizedString("verifier_updateApp_button", bundle: bundle, comment: "")
      }

      /// nl translation: Instellen
      ///
      /// Locales: en, nl
      static func verifier_risksetting_setting_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_setting_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_setting_button"
        }

        return NSLocalizedString("verifier_risksetting_setting_button", bundle: bundle, comment: "")
      }

      /// nl translation: Instellingen
      ///
      /// Locales: en, nl
      static func holderMenuSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.settings"
        }

        return NSLocalizedString("holder.menu.settings", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal
      ///
      /// Locales: en, nl
      static func generalEuropean(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.european", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.european"
        }

        return NSLocalizedString("general.european", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal
      ///
      /// Locales: en, nl
      static func generalEuropeanUnion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.europeanUnion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.europeanUnion"
        }

        return NSLocalizedString("general.europeanUnion", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal bewijs
      ///
      /// Locales: en, nl
      static func verifierResultAccessDcc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.dcc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.dcc"
        }

        return NSLocalizedString("verifier.result.access.dcc", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal herstelbewijs
      ///
      /// Locales: en, nl
      static func general_recoverycertificate_0G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_recoverycertificate_0G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_recoverycertificate_0G"
        }

        return NSLocalizedString("general_recoverycertificate_0G", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal testbewijs
      ///
      /// Locales: en, nl
      static func general_testcertificate_0G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_testcertificate_0G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_testcertificate_0G"
        }

        return NSLocalizedString("general_testcertificate_0G", bundle: bundle, comment: "")
      }

      /// nl translation: Internationaal vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func general_vaccinationcertificate_0G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_vaccinationcertificate_0G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccinationcertificate_0G"
        }

        return NSLocalizedString("general_vaccinationcertificate_0G", bundle: bundle, comment: "")
      }

      /// nl translation: Internationale QR
      ///
      /// Locales: en, nl
      static func holderShowqrEuTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.title"
        }

        return NSLocalizedString("holder.showqr.eu.title", bundle: bundle, comment: "")
      }

      /// nl translation: Is dit de laatste dosis van je vaccinatie?
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationCompletionreason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.completionreason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.completionreason"
        }

        return NSLocalizedString("holder.event.about.vaccination.completionreason", bundle: bundle, comment: "")
      }

      /// nl translation: Is een bewijs nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static func holder_dashboard_international_0G_action_certificateNeeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_international_0G_action_certificateNeeded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_international_0G_action_certificateNeeded"
        }

        return NSLocalizedString("holder_dashboard_international_0G_action_certificateNeeded", bundle: bundle, comment: "")
      }

      /// nl translation: Is je uitslag bekend? Log in met DigiD om je testuitslag bij de GGD op te halen.
      ///
      /// Locales: en, nl
      static func holder_negativetest_ggd_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_negativetest_ggd_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_negativetest_ggd_message"
        }

        return NSLocalizedString("holder_negativetest_ggd_message", bundle: bundle, comment: "")
      }

      /// nl translation: JAN
      ///
      /// Locales: en, nl
      static func holderTestresultsJanuary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.january", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.january"
        }

        return NSLocalizedString("holder.testresults.january", bundle: bundle, comment: "")
      }

      /// nl translation: JUL
      ///
      /// Locales: en, nl
      static func holderTestresultsJuly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.july", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.july"
        }

        return NSLocalizedString("holder.testresults.july", bundle: bundle, comment: "")
      }

      /// nl translation: JUN
      ///
      /// Locales: en, nl
      static func holderTestresultsJune(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.june", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.june"
        }

        return NSLocalizedString("holder.testresults.june", bundle: bundle, comment: "")
      }

      /// nl translation: Ja, aanpassen
      ///
      /// Locales: en, nl
      static func verifier_risksetting_confirmation_dialog_positive_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_confirmation_dialog_positive_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_confirmation_dialog_positive_button"
        }

        return NSLocalizedString("verifier_risksetting_confirmation_dialog_positive_button", bundle: bundle, comment: "")
      }

      /// nl translation: Ja, getest voor of op %@
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_yes_buttonTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_wasUserTestedAtGGD_yes_buttonTitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_yes_buttonTitle"
        }

        let format = NSLocalizedString("holder_wasUserTestedAtGGD_yes_buttonTitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Ja, ik heb een BSN
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_buttonTitle_doesHaveBSN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_buttonTitle_doesHaveBSN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_buttonTitle_doesHaveBSN"
        }

        return NSLocalizedString("holder_checkForBSN_buttonTitle_doesHaveBSN", bundle: bundle, comment: "")
      }

      /// nl translation: Ja, overslaan
      ///
      /// Locales: en, nl
      static func holder_identitySelection_skipAlert_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_skipAlert_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_skipAlert_action"
        }

        return NSLocalizedString("holder_identitySelection_skipAlert_action", bundle: bundle, comment: "")
      }

      /// nl translation: Ja, terug
      ///
      /// Locales: en, nl
      static func holderTestresultsAlertOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.alert.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.alert.ok"
        }

        return NSLocalizedString("holder.testresults.alert.ok", bundle: bundle, comment: "")
      }

      /// nl translation: Ja, terug
      ///
      /// Locales: en, nl
      static func holderVaccinationAlertStop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.alert.stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.alert.stop"
        }

        return NSLocalizedString("holder.vaccination.alert.stop", bundle: bundle, comment: "")
      }

      /// nl translation: Je %@ is niet internationaal geldig. Je hebt wel een Nederlands bewijs.
      ///
      /// Locales: en, nl
      static func holderDashboardOriginNotValidInEUButIsInTheNetherlands(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.originNotValidInEUButIsInTheNetherlands", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.originNotValidInEUButIsInTheNetherlands"
        }

        let format = NSLocalizedString("holder.dashboard.originNotValidInEUButIsInTheNetherlands", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je Nederlandse QR-code wordt hier getoond
      ///
      /// Locales: en, nl
      static func holderShowqrDomesticQrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.domestic.qr.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.domestic.qr.title"
        }

        return NSLocalizedString("holder.showqr.domestic.qr.title", bundle: bundle, comment: "")
      }

      /// nl translation: Je Nederlandse herstelbewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_domesticRecovery_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticRecovery_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_domesticRecovery_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticRecovery_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je Nederlandse testbewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_domesticTest_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticTest_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_domesticTest_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticTest_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je Nederlandse vaccinatiebewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_domesticVaccine_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticVaccine_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_domesticVaccine_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_domesticVaccine_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je QR-code komt terug in %@
      ///
      /// Locales: en, nl
      static func holderShowqrScreenshotwarningMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.showqr.screenshotwarning.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.screenshotwarning.message"
        }

        let format = NSLocalizedString("holder.showqr.screenshotwarning.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je bent nu niet verbonden met het internet.
      ///
      /// Locales: en, nl
      static func generalErrorNointernetText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.nointernet.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.nointernet.text"
        }

        return NSLocalizedString("general.error.nointernet.text", bundle: bundle, comment: "")
      }

      /// nl translation: Je bewijs heeft een QR-code
      ///
      /// Locales: en, nl
      static func holderOnboardingTitleValidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.title.validity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.title.validity"
        }

        return NSLocalizedString("holder.onboarding.title.validity", bundle: bundle, comment: "")
      }

      /// nl translation: Je bewijs heeft een QR-code
      ///
      /// Locales: en, nl
      static func holder_onboarding_content_onlyInternationalQR_0G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_content_onlyInternationalQR_0G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_content_onlyInternationalQR_0G_title"
        }

        return NSLocalizedString("holder_onboarding_content_onlyInternationalQR_0G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je bewijs is verlopen.
      ///
      /// Locales: en, nl
      static func holderDashboardQrExpired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.expired"
        }

        return NSLocalizedString("holder.dashboard.qr.expired", bundle: bundle, comment: "")
      }

      /// nl translation: Je bezoekersbewijs is niet geldig buiten Nederland
      ///
      /// Locales: en, nl
      static func holder_dashboard_visitorPassInvalidOutsideNLBanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_visitorPassInvalidOutsideNLBanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_visitorPassInvalidOutsideNLBanner_title"
        }

        return NSLocalizedString("holder_dashboard_visitorPassInvalidOutsideNLBanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je bezoekersbewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_visitorPass_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_visitorPass_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_visitorPass_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_visitorPass_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je gegevens worden bijgewerkt
      ///
      /// Locales: en, nl
      static func holder_identitySelection_loading_accessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_loading_accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_loading_accessibility"
        }

        return NSLocalizedString("holder_identitySelection_loading_accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: Je gegevens zijn bijgewerkt. Mogelijk zijn daardoor bewijzen weg.
      ///
      /// Locales: en, nl
      static func holder_identityRemoved_banner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identityRemoved_banner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identityRemoved_banner_title"
        }

        return NSLocalizedString("holder_identityRemoved_banner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt de laatste versie van de app nodig om verder te gaan.
      ///
      /// Locales: en, nl
      static func verifier_updateApp_content(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_updateApp_content", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_updateApp_content"
        }

        return NSLocalizedString("verifier_updateApp_content", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt een internationale QR-code gescand. Gebruikers van CoronaCheck moeten in Nederland hun Nederlandse QR-code laten zien.
      ///
      /// Locales: en, nl
      static func verifierResultAlertDccMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.alert.dcc.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.alert.dcc.message"
        }

        return NSLocalizedString("verifier.result.alert.dcc.message", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt geen Nederlands %@.
      ///
      /// Locales: en, nl
      static func holderDashboardOriginNotValidInNetherlandsButIsInEU(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.originNotValidInNetherlandsButIsInEU", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.originNotValidInNetherlandsButIsInEU"
        }

        let format = NSLocalizedString("holder.dashboard.originNotValidInNetherlandsButIsInEU", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je hebt geen internetverbinding
      ///
      /// Locales: en, nl
      static func internetRequiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet.required.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet.required.title"
        }

        return NSLocalizedString("internet.required.title", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt internet nodig om je QR-code te kunnen gebruiken.
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredErrorfooterNointernet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.nointernet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.errorfooter.nointernet"
        }

        return NSLocalizedString("holder.dashboard.strippen.expired.errorfooter.nointernet", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt te lang gewacht. Voor de veiligheid ben je daarom uitgelogd. Log opnieuw in met DigiD om je gegevens op te halen.
      ///
      /// Locales: en, nl
      static func holderErrorstateNosessionMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.nosession.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.nosession.message"
        }

        return NSLocalizedString("holder.errorstate.nosession.message", bundle: bundle, comment: "")
      }

      /// nl translation: Je hebt te vaak geprobeerd je code in te vullen. Probeer het over 5 minuten opnieuw.
      ///
      /// Locales: en, nl
      static func holder_inputRetrievalCode_error_blocked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_inputRetrievalCode_error_blocked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_inputRetrievalCode_error_blocked"
        }

        return NSLocalizedString("holder_inputRetrievalCode_error_blocked", bundle: bundle, comment: "")
      }

      /// nl translation: Je hoeft je Nederlandse QR-code niet te scannen. Scan de QR-code op het internationale bewijs dat je van je zorgverlener of de overheid hebt gekregen. Hierin staan de gegevens die nodig zijn om je bewijs in de app te zetten. Je herkent dit bewijs aan de Europese vlag.
      ///
      /// Locales: en, nl
      static func holder_scanner_error_message_ctb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_error_message_ctb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_error_message_ctb"
        }

        return NSLocalizedString("holder_scanner_error_message_ctb", bundle: bundle, comment: "")
      }

      /// nl translation: Je internationale QR-code wordt automatisch geldig als de Europese regelgeving ingaat (vanaf %@).
      ///
      /// Locales: en, nl
      static func holderDashboardQrEulaunchcardfootermessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.qr.eulaunchcardfootermessage", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.eulaunchcardfootermessage"
        }

        let format = NSLocalizedString("holder.dashboard.qr.eulaunchcardfootermessage", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je internationale QR-code wordt hier getoond
      ///
      /// Locales: en, nl
      static func holderShowqrEuQrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.qr.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.qr.title"
        }

        return NSLocalizedString("holder.showqr.eu.qr.title", bundle: bundle, comment: "")
      }

      /// nl translation: Je internationale herstelbewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_internationalRecovery_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalRecovery_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_internationalRecovery_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalRecovery_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je internationale testbewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_internationalTest_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalTest_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_internationalTest_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalTest_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je internationale vaccinatiebewijs is verlopen
      ///
      /// Locales: en, nl
      static func holder_dashboard_originExpiredBanner_internationalVaccine_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalVaccine_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_originExpiredBanner_internationalVaccine_title"
        }

        return NSLocalizedString("holder_dashboard_originExpiredBanner_internationalVaccine_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je kan niet verder als je niet akkoord gaat
      ///
      /// Locales: en, nl
      static func newTermsErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.error.title"
        }

        return NSLocalizedString("new.terms.error.title", bundle: bundle, comment: "")
      }

      /// nl translation: Je krijgt de verificatiecode via een sms of e-mail. Niks gekregen? Klik hieronder op ‘stuur opnieuw’ voor een nieuwe code.
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowConfirmresendverificationalertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.confirmresendverificationalert.message"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.message", bundle: bundle, comment: "")
      }

      /// nl translation: Je krijgt de verificatiecode via een sms of e-mail. Niks gekregen? Klik hieronder op ‘stuur opnieuw’ voor een nieuwe code.
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowConfirmresendverificationalertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.confirmresendverificationalert.message"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.message", bundle: bundle, comment: "")
      }

      /// nl translation: Je krijgt een code via sms of e-mail
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowVerificationInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.verification.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.verification.info"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.verification.info", bundle: bundle, comment: "")
      }

      /// nl translation: Je krijgt een code via sms of e-mail
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowVerificationInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.verification.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.verification.info"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.verification.info", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt alleen toegang geven aan bezoekers met een testbewijs.
      ///
      /// Locales: en, nl
      static func verifier_risksetting_subtitle_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_subtitle_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_subtitle_1G"
        }

        return NSLocalizedString("verifier_risksetting_subtitle_1G", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt de app al naar een nieuwere versie updaten
      ///
      /// Locales: en, nl
      static func recommended_update_card_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended_update_card_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended_update_card_description"
        }

        return NSLocalizedString("recommended_update_card_description", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt een bewijs voor 1G-toegang toevoegen wanneer je negatief getest bent
      ///
      /// Locales: en, nl
      static func holder_dashboard_only1GaccessBanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_only1GaccessBanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_only1GaccessBanner_title"
        }

        return NSLocalizedString("holder_dashboard_only1GaccessBanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt je QR-codes dan mogelijk niet gebruiken. De volgende keer dat je de app opstart vragen we opnieuw om een keuze te maken.
      ///
      /// Locales: en, nl
      static func holder_identitySelection_skipAlert_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_skipAlert_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_skipAlert_body"
        }

        return NSLocalizedString("holder_identitySelection_skipAlert_body", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt later opnieuw proberen deze QR-code in de app te zetten.
      ///
      /// Locales: en, nl
      static func holder_dcc_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dcc_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dcc_alert_message"
        }

        return NSLocalizedString("holder_dcc_alert_message", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt nu makkelijker wisselen tussen je Nederlandse en internationale bewijs. Bovenin het scherm vind je een tabblad ‘Nederland’ en een tabblad ‘Internationaal’. Ga je de grens over? Gebruik dan de bewijzen onder ‘Internationaal’.
      ///
      /// Locales: en, nl
      static func holderUpdatepageContentTab(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.updatepage.content.tab", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.updatepage.content.tab"
        }

        return NSLocalizedString("holder.updatepage.content.tab", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt toegang geven aan bezoekers met een test-, vaccinatie- of herstelbewijs.
      ///
      /// Locales: en, nl
      static func verifier_risksetting_subtitle_3G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_subtitle_3G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_subtitle_3G"
        }

        return NSLocalizedString("verifier_risksetting_subtitle_3G", bundle: bundle, comment: "")
      }

      /// nl translation: Je kunt weer scannen over %@
      ///
      /// Locales: en, nl
      static func verifier_home_countdown_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_home_countdown_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_home_countdown_title"
        }

        let format = NSLocalizedString("verifier_home_countdown_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je mag gegevens van de bezoeker alleen gebruiken voor <b>controle van het bewijs</b>
      ///
      /// Locales: en, nl
      static func verifierConsentItem2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.item.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.item.2"
        }

        return NSLocalizedString("verifier.consent.item.2", bundle: bundle, comment: "")
      }

      /// nl translation: Je moet %li minuten wachten omdat je tijdens het scannen jouw scan-instelling hebt aangepast.
      ///
      /// Locales: en, nl
      static func verifier_home_countdown_subtitle(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier_home_countdown_subtitle", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_home_countdown_subtitle"
        }

        let format = NSLocalizedString("verifier_home_countdown_subtitle", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Je naam is niet hetzelfde geschreven
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_firstPage_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_firstPage_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_firstPage_title"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_firstPage_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je opslag is vol
      ///
      /// Locales: en, nl
      static func appstatus_diskfull_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appstatus_diskfull_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appstatus_diskfull_title"
        }

        return NSLocalizedString("appstatus_diskfull_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je opslag zit vol
      ///
      /// Locales: en, nl
      static func general_diskFull_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_diskFull_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_diskFull_title"
        }

        return NSLocalizedString("general_diskFull_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je sessie is gestopt
      ///
      /// Locales: en, nl
      static func holderErrorstateNosessionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.nosession.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.nosession.title"
        }

        return NSLocalizedString("holder.errorstate.nosession.title", bundle: bundle, comment: "")
      }

      /// nl translation: Je vaccinatiebeoordeling is toegevoegd. Maak je bezoekersbewijs compleet met je negatieve coronatestuitslag
      ///
      /// Locales: en, nl
      static func holder_dashboard_visitorpassincompletebanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_visitorpassincompletebanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_visitorpassincompletebanner_title"
        }

        return NSLocalizedString("holder_dashboard_visitorpassincompletebanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Je vaccinaties worden opgehaald
      ///
      /// Locales: en, nl
      static func holderVaccinationLoadingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.loading.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.loading.title"
        }

        return NSLocalizedString("holder.vaccination.loading.title", bundle: bundle, comment: "")
      }

      /// nl translation: Jouw QR-code is gemaakt
      ///
      /// Locales: en, nl
      static func holderBannerNewqrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.banner.newqr.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.banner.newqr.title"
        }

        return NSLocalizedString("holder.banner.newqr.title", bundle: bundle, comment: "")
      }

      /// nl translation: Jouw gegevens worden <b>nergens centraal opgeslagen</b>
      ///
      /// Locales: en, nl
      static func holderConsentItem1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.item.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.item.1"
        }

        return NSLocalizedString("holder.consent.item.1", bundle: bundle, comment: "")
      }

      /// nl translation: Jouw gegevens: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_yourDetails(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_yourDetails", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_yourDetails"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_yourDetails", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Jouw gezondheid en die van anderen is belangrijk. Laat daarom je coronabewijs zien om veilig toegang te krijgen tot plekken. Of als je op reis gaat.
      ///
      /// Locales: en, nl
      static func holderOnboardingMessageSafely(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.message.safely", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.message.safely"
        }

        return NSLocalizedString("holder.onboarding.message.safely", bundle: bundle, comment: "")
      }

      /// nl translation: Jouw locatie veilig open
      ///
      /// Locales: en, nl
      static func verifierOnboardingTitleSafely(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.onboarding.title.safely", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.onboarding.title.safely"
        }

        return NSLocalizedString("verifier.onboarding.title.safely", bundle: bundle, comment: "")
      }

      /// nl translation: Kan je binnenkort verbinding maken met het internet?
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiringNointernetAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expiring.nointernet.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expiring.nointernet.alert.title"
        }

        return NSLocalizedString("holder.dashboard.strippen.expiring.nointernet.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Kenmerk %@ is %@
      ///
      /// Locales: en, nl
      static func verifierResultIdentityLabel(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier.result.identity.label", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.label"
        }

        let format = NSLocalizedString("verifier.result.identity.label", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Keuze opslaan
      ///
      /// Locales: en, nl
      static func holder_identitySelection_actionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_actionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_actionTitle"
        }

        return NSLocalizedString("holder_identitySelection_actionTitle", bundle: bundle, comment: "")
      }

      /// nl translation: Kies %@
      ///
      /// Locales: en, nl
      static func holder_identitySelection_accessibility_select(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identitySelection_accessibility_select", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_accessibility_select"
        }

        let format = NSLocalizedString("holder_identitySelection_accessibility_select", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Kies je scan-instelling
      ///
      /// Locales: en, nl
      static func verifier_risksetting_firsttimeuse_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_firsttimeuse_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_firsttimeuse_title"
        }

        return NSLocalizedString("verifier_risksetting_firsttimeuse_title", bundle: bundle, comment: "")
      }

      /// nl translation: Kies straks één naam
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_secondPage_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_secondPage_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_secondPage_title"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_secondPage_title", bundle: bundle, comment: "")
      }

      /// nl translation: Kies één manier waarop je naam is geschreven. Heb je vaccinaties of testuitslagen op andere namen staan? Dan worden die verwijderd.
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_secondPage_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_secondPage_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_secondPage_body"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_secondPage_body", bundle: bundle, comment: "")
      }

      /// nl translation: Klaar
      ///
      /// Locales: en, nl
      static func generalDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.done"
        }

        return NSLocalizedString("general.done", bundle: bundle, comment: "")
      }

      /// nl translation: Kleurt je scherm groen met een vinkje? Dan is de QR-code geldig en kloppen de gegevens met het identiteitsbewijs. Je mag de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsGreenScreenIsAccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.greenScreenIsAccess.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.greenScreenIsAccess.message"
        }

        return NSLocalizedString("verifier.scaninstructions.greenScreenIsAccess.message", bundle: bundle, comment: "")
      }

      /// nl translation: Kleurt je scherm rood met een kruis? Dan krijg je uitleg om de bezoeker te helpen. Blijft het scherm rood? Dan mag je de bezoeker geen toegang geven.
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsRedscreennowwhatMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.redscreennowwhat.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.redscreennowwhat.message"
        }

        return NSLocalizedString("verifier.scaninstructions.redscreennowwhat.message", bundle: bundle, comment: "")
      }

      /// nl translation: Kloppen de gegevens?
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_title", bundle: bundle, comment: "")
      }

      /// nl translation: Klopt er iets niet?
      ///
      /// Locales: en, nl
      static func holderVaccinationListWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.list.wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.list.wrong"
        }

        return NSLocalizedString("holder.vaccination.list.wrong", bundle: bundle, comment: "")
      }

      /// nl translation: Klopt er iets niet?
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_somethingWrong_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_somethingWrong_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_somethingWrong_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_somethingWrong_title", bundle: bundle, comment: "")
      }

      /// nl translation: Krijg je bewijs via de CoronaCheck helpdesk
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_buttonSubTitle_doesHaveBSN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesHaveBSN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_buttonSubTitle_doesHaveBSN"
        }

        return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesHaveBSN", bundle: bundle, comment: "")
      }

      /// nl translation: Krijg je bewijs via de GGD
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow"
        }

        return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_testFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Krijg je bewijs via je zorgverlener
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow"
        }

        return NSLocalizedString("holder_checkForBSN_buttonSubTitle_doesNotHaveBSN_vaccinationFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Krijg toegang met je bewijs
      ///
      /// Locales: en, nl
      static func holderOnboardingTitleSafely(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.title.safely", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.title.safely"
        }

        return NSLocalizedString("holder.onboarding.title.safely", bundle: bundle, comment: "")
      }

      /// nl translation: Laat andere namen herschrijven
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_thirdPage_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_thirdPage_title"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_title", bundle: bundle, comment: "")
      }

      /// nl translation: Laat toch zien
      ///
      /// Locales: en, nl
      static func holderShowqrShowqr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.showqr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.showqr"
        }

        return NSLocalizedString("holder.showqr.showqr", bundle: bundle, comment: "")
      }

      /// nl translation: Laatste %li minuten
      ///
      /// Locales: en, nl
      static func scan_log_list_header(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("scan_log_list_header", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_list_header"
        }

        let format = NSLocalizedString("scan_log_list_header", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Lees <a href="https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app">hier</a> de volledige gebruikersvoorwaarden.
      ///
      /// Locales: en, nl
      static func newTermsDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.description"
        }

        return NSLocalizedString("new.terms.description", bundle: bundle, comment: "")
      }

      /// nl translation: Lees hier de privacyverklaring
      ///
      /// Locales: en, nl
      static func holderAboutLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.about.link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.about.link"
        }

        return NSLocalizedString("holder.about.link", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func general_readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_readmore"
        }

        return NSLocalizedString("general_readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func holderDashboardConfigIsAlmostOutOfDateCardButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.card.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.configIsAlmostOutOfDate.card.button"
        }

        return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.card.button", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid"
        }

        return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_0G_action_linkToRijksoverheid", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func holder_identityRemoved_banner_button_readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identityRemoved_banner_button_readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identityRemoved_banner_button_readmore"
        }

        return NSLocalizedString("holder_identityRemoved_banner_button_readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_banner_button_readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_banner_button_readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_banner_button_readmore"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_banner_button_readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer
      ///
      /// Locales: en, nl
      static func verifierStartClockdeviationwarningButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.clockdeviationwarning.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.clockdeviationwarning.button"
        }

        return NSLocalizedString("verifier.start.clockdeviationwarning.button", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer op CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func holder_qr_code_expired_explanation_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_expired_explanation_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_expired_explanation_action"
        }

        return NSLocalizedString("holder_qr_code_expired_explanation_action", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer op CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func holder_qr_code_hidden_explanation_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_hidden_explanation_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_hidden_explanation_action"
        }

        return NSLocalizedString("holder_qr_code_hidden_explanation_action", bundle: bundle, comment: "")
      }

      /// nl translation: Lees meer:
      ///
      /// Locales: en, nl
      static func verifierAboutReadmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.about.readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.about.readmore"
        }

        return NSLocalizedString("verifier.about.readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Let op!
      ///
      /// Locales: en, nl
      static func general_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_notification"
        }

        return NSLocalizedString("general_notification", bundle: bundle, comment: "")
      }

      /// nl translation: Let op: identiteitscontrole is verplicht
      ///
      /// Locales: en, nl
      static func verifierResultAccessCheckidentity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.access.checkidentity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.access.checkidentity"
        }

        return NSLocalizedString("verifier.result.access.checkidentity", bundle: bundle, comment: "")
      }

      /// nl translation: Let op: je apparaat is gejailbreakt. Je gegevens zijn mogelijk niet veilig.
      ///
      /// Locales: en, nl
      static func jailbrokenMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jailbroken.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jailbroken.message"
        }

        return NSLocalizedString("jailbroken.message", bundle: bundle, comment: "")
      }

      /// nl translation: Let op: je iPhone is niet beveiligd met een pincode of met FaceID/Touch ID. Daardoor kunnen anderen je data inzien en zijn je gegevens mogelijk niet veilig.
      ///
      /// Locales: en, nl
      static func holderDeviceAuthenticationWarningMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.device.authentication.warning.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.device.authentication.warning.message"
        }

        return NSLocalizedString("holder.device.authentication.warning.message", bundle: bundle, comment: "")
      }

      /// nl translation: Lettercombinatie
      ///
      /// Locales: en, nl
      static func holderDcctokenentryTokenFieldTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.tokenField.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.tokenField.title"
        }

        return NSLocalizedString("holder.dcctokenentry.tokenField.title", bundle: bundle, comment: "")
      }

      /// nl translation: Link
      ///
      /// Locales: en, nl
      static func generalUrlLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.url.link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.url.link"
        }

        return NSLocalizedString("general.url.link", bundle: bundle, comment: "")
      }

      /// nl translation: Log in met DigiD
      ///
      /// Locales: en, nl
      static func holderVaccinationStartAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.start.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.start.action"
        }

        return NSLocalizedString("holder.vaccination.start.action", bundle: bundle, comment: "")
      }

      /// nl translation: Log in met DigiD
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_yes_buttonSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_wasUserTestedAtGGD_yes_buttonSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_yes_buttonSubtitle"
        }

        return NSLocalizedString("holder_wasUserTestedAtGGD_yes_buttonSubtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Log in met je DigiD
      ///
      /// Locales: en, nl
      static func holderLocationGgdSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.ggd.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.ggd.subtitle"
        }

        return NSLocalizedString("holder.location.ggd.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Log in met je DigiD
      ///
      /// Locales: en, nl
      static func holderProviderGgdSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.ggd.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.ggd.subtitle"
        }

        return NSLocalizedString("holder.provider.ggd.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Logo Rijksoverheid
      ///
      /// Locales: en, nl
      static func generalGovernmentLogo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.government.logo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.government.logo"
        }

        return NSLocalizedString("general.government.logo", bundle: bundle, comment: "")
      }

      /// nl translation: MAA
      ///
      /// Locales: en, nl
      static func holderTestresultsMarch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.march", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.march"
        }

        return NSLocalizedString("holder.testresults.march", bundle: bundle, comment: "")
      }

      /// nl translation: MEI
      ///
      /// Locales: en, nl
      static func holderTestresultsMay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.may", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.may"
        }

        return NSLocalizedString("holder.testresults.may", bundle: bundle, comment: "")
      }

      /// nl translation: Maak bewijs
      ///
      /// Locales: en, nl
      static func holderTestresultsResultsButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.results.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.results.button"
        }

        return NSLocalizedString("holder.testresults.results.button", bundle: bundle, comment: "")
      }

      /// nl translation: Maak bewijs
      ///
      /// Locales: en, nl
      static func holderVaccinationListAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.list.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.list.action"
        }

        return NSLocalizedString("holder.vaccination.list.action", bundle: bundle, comment: "")
      }

      /// nl translation: Maak bewijs compleet
      ///
      /// Locales: en, nl
      static func holder_dashboard_visitorpassincompletebanner_button_makecomplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_visitorpassincompletebanner_button_makecomplete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_visitorpassincompletebanner_button_makecomplete"
        }

        return NSLocalizedString("holder_dashboard_visitorpassincompletebanner_button_makecomplete", bundle: bundle, comment: "")
      }

      /// nl translation: Maak bewijs compleet
      ///
      /// Locales: en, nl
      static func holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete"
        }

        return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_button_complete", bundle: bundle, comment: "")
      }

      /// nl translation: Maak binnenkort verbinding met het internet
      ///
      /// Locales: en, nl
      static func holderDashboardConfigIsAlmostOutOfDateCardMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.card.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.configIsAlmostOutOfDate.card.message"
        }

        return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.card.message", bundle: bundle, comment: "")
      }

      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static func holderAppointmentButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.appointment.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.appointment.button.title"
        }

        return NSLocalizedString("holder.appointment.button.title", bundle: bundle, comment: "")
      }

      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static func holderNotestActionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.notest.action.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.notest.action.title"
        }

        return NSLocalizedString("holder.notest.action.title", bundle: bundle, comment: "")
      }

      /// nl translation: Maak een afspraak
      ///
      /// Locales: en, nl
      static func holderNotestButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.notest.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.notest.button.title"
        }

        return NSLocalizedString("holder.notest.button.title", bundle: bundle, comment: "")
      }

      /// nl translation: Maak een keuze om door te gaan
      ///
      /// Locales: en, nl
      static func verification_policy_selection_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verification_policy_selection_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verification_policy_selection_error_message"
        }

        return NSLocalizedString("verification_policy_selection_error_message", bundle: bundle, comment: "")
      }

      /// nl translation: Maak je bezoekersbewijs compleet
      ///
      /// Locales: en, nl
      static func holder_completecertificate_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_completecertificate_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_completecertificate_title"
        }

        return NSLocalizedString("holder_completecertificate_title", bundle: bundle, comment: "")
      }

      /// nl translation: Maak verbinding met het internet
      ///
      /// Locales: en, nl
      static func holderDashboardConfigIsAlmostOutOfDatePageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.page.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.configIsAlmostOutOfDate.page.title"
        }

        return NSLocalizedString("holder.dashboard.configIsAlmostOutOfDate.page.title", bundle: bundle, comment: "")
      }

      /// nl translation: Maak verbinding met het internet
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredNointernetAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expired.nointernet.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.nointernet.alert.title"
        }

        return NSLocalizedString("holder.dashboard.strippen.expired.nointernet.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Meer informatie
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_alert_button_moreinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_alert_button_moreinfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_alert_button_moreinfo"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_alert_button_moreinfo", bundle: bundle, comment: "")
      }

      /// nl translation: Meer informatie over testresultaten
      ///
      /// Locales: en, nl
      static func holderTestresultsDisclaimerAccessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.disclaimer.accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.disclaimer.accessibility"
        }

        return NSLocalizedString("holder.testresults.disclaimer.accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: Meer:
      ///
      /// Locales: en, nl
      static func holderAboutReadmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.about.readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.about.readmore"
        }

        return NSLocalizedString("holder.about.readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Meestgestelde vragen
      ///
      /// Locales: en, nl
      static func holderMenuFaq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.faq"
        }

        return NSLocalizedString("holder.menu.faq", bundle: bundle, comment: "")
      }

      /// nl translation: Menu 
      ///
      /// Locales: en, nl
      static func general_menu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_menu"
        }

        return NSLocalizedString("general_menu", bundle: bundle, comment: "")
      }

      /// nl translation: Met deze app controleer je het coronabewijs van je bezoekers. Zo kun je jouw locatie veilig open houden.
      ///
      /// Locales: en, nl
      static func verifierOnboardingMessageSafely(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.onboarding.message.safely", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.onboarding.message.safely"
        }

        return NSLocalizedString("verifier.onboarding.message.safely", bundle: bundle, comment: "")
      }

      /// nl translation: Met je BSN kun je jouw bewijs aanvragen bij de CoronaCheck helpdesk. Heb je geen BSN? Dan kun je een bewijs krijgen via je test- of vaccinatielocatie.
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_message"
        }

        return NSLocalizedString("holder_checkForBSN_message", bundle: bundle, comment: "")
      }

      /// nl translation: Mijn bewijs
      ///
      /// Locales: en, nl
      static func holderDashboardQrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.title"
        }

        return NSLocalizedString("holder.dashboard.qr.title", bundle: bundle, comment: "")
      }

      /// nl translation: Mijn bewijzen
      ///
      /// Locales: en, nl
      static func holderDashboardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.title"
        }

        return NSLocalizedString("holder.dashboard.title", bundle: bundle, comment: "")
      }

      /// nl translation: Mijn bewijzen
      ///
      /// Locales: en, nl
      static func holderMenuDashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.dashboard"
        }

        return NSLocalizedString("holder.menu.dashboard", bundle: bundle, comment: "")
      }

      /// nl translation: Mijn opgeslagen gegevens
      ///
      /// Locales: en, nl
      static func holder_storedEvents_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_title"
        }

        return NSLocalizedString("holder_storedEvents_title", bundle: bundle, comment: "")
      }

      /// nl translation: Ministerie van VWS
      ///
      /// Locales: en, nl
      static func holderDccListIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.list.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.list.issuer"
        }

        return NSLocalizedString("holder.dcc.list.issuer", bundle: bundle, comment: "")
      }

      /// nl translation: Ministerie van VWS / Ministry of Health, Welfare and Sport
      ///
      /// Locales: en, nl
      static func holderVaccinationAboutIssuer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.about.issuer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.about.issuer"
        }

        return NSLocalizedString("holder.vaccination.about.issuer", bundle: bundle, comment: "")
      }

      /// nl translation: NOV
      ///
      /// Locales: en, nl
      static func holderTestresultsNovember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.november", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.november"
        }

        return NSLocalizedString("holder.testresults.november", bundle: bundle, comment: "")
      }

      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.name"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.name"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam / Name:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.name"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.name"
        }

        return NSLocalizedString("holder.dcc.recovery.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderDccTestName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.name"
        }

        return NSLocalizedString("holder.dcc.test.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.name"
        }

        return NSLocalizedString("holder.dcc.vaccination.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.name"
        }

        return NSLocalizedString("holder.event.about.recovery.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.name"
        }

        return NSLocalizedString("holder.event.about.test.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.name"
        }

        return NSLocalizedString("holder.event.about.vaccination.name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam:
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_name"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_name", bundle: bundle, comment: "")
      }

      /// nl translation: Naam: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_name(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_name"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func holder_endOfLife_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_endOfLife_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_endOfLife_button"
        }

        return NSLocalizedString("holder_endOfLife_button", bundle: bundle, comment: "")
      }

      /// nl translation: Naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func verifier_endOfLife_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_endOfLife_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_endOfLife_button"
        }

        return NSLocalizedString("verifier_endOfLife_button", bundle: bundle, comment: "")
      }

      /// nl translation: Naar instellingen
      ///
      /// Locales: en, nl
      static func holder_scanner_permission_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_permission_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_permission_settings"
        }

        return NSLocalizedString("holder_scanner_permission_settings", bundle: bundle, comment: "")
      }

      /// nl translation: Naar instellingen
      ///
      /// Locales: en, nl
      static func verifierScanPermissionSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.permission.settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.permission.settings"
        }

        return NSLocalizedString("verifier.scan.permission.settings", bundle: bundle, comment: "")
      }

      /// nl translation: Naar mijn bewijzen
      ///
      /// Locales: en, nl
      static func general_toMyOverview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_toMyOverview", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_toMyOverview"
        }

        return NSLocalizedString("general_toMyOverview", bundle: bundle, comment: "")
      }

      /// nl translation: Naar mijn bewijzen
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates"
        }

        return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_button_toMyCertificates", bundle: bundle, comment: "")
      }

      /// nl translation: Nederland
      ///
      /// Locales: en, nl
      static func generalNetherlands(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.netherlands", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.netherlands"
        }

        return NSLocalizedString("general.netherlands", bundle: bundle, comment: "")
      }

      /// nl translation: Nederland / The Netherlands
      ///
      /// Locales: en, nl
      static func holderVaccinationAboutCountry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.about.country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.about.country"
        }

        return NSLocalizedString("holder.vaccination.about.country", bundle: bundle, comment: "")
      }

      /// nl translation: Nederlandse
      ///
      /// Locales: en, nl
      static func generalDutch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.dutch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.dutch"
        }

        return NSLocalizedString("general.dutch", bundle: bundle, comment: "")
      }

      /// nl translation: Nederlandse QR
      ///
      /// Locales: en, nl
      static func holder_showQR_domestic_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showQR_domestic_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showQR_domestic_title"
        }

        return NSLocalizedString("holder_showQR_domestic_title", bundle: bundle, comment: "")
      }

      /// nl translation: Nederlandse en internationale bewijzen
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_dutchAndInternationalCertificates_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_dutchAndInternationalCertificates_title"
        }

        return NSLocalizedString("holder_newintheapp_content_dutchAndInternationalCertificates_title", bundle: bundle, comment: "")
      }

      /// nl translation: Nee
      ///
      /// Locales: en, nl
      static func holderTestresultsAlertCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.alert.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.alert.cancel"
        }

        return NSLocalizedString("holder.testresults.alert.cancel", bundle: bundle, comment: "")
      }

      /// nl translation: Nee
      ///
      /// Locales: en, nl
      static func holderVaccinationAlertContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.alert.continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.alert.continue"
        }

        return NSLocalizedString("holder.vaccination.alert.continue", bundle: bundle, comment: "")
      }

      /// nl translation: Nee, erna getest
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_no_buttonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_wasUserTestedAtGGD_no_buttonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_no_buttonTitle"
        }

        return NSLocalizedString("holder_wasUserTestedAtGGD_no_buttonTitle", bundle: bundle, comment: "")
      }

      /// nl translation: Nee, ik heb geen BSN
      ///
      /// Locales: en, nl
      static func holder_checkForBSN_buttonTitle_doesNotHaveBSN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_checkForBSN_buttonTitle_doesNotHaveBSN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_checkForBSN_buttonTitle_doesNotHaveBSN"
        }

        return NSLocalizedString("holder_checkForBSN_buttonTitle_doesNotHaveBSN", bundle: bundle, comment: "")
      }

      /// nl translation: Nee, terug
      ///
      /// Locales: en, nl
      static func verifier_risksetting_confirmation_dialog_negative_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_confirmation_dialog_negative_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_confirmation_dialog_negative_button"
        }

        return NSLocalizedString("verifier_risksetting_confirmation_dialog_negative_button", bundle: bundle, comment: "")
      }

      /// nl translation: Neem contact op met de helpdesk van CoronaCheck en geef de foutcode (%@) door.
      ///
      /// Locales: en, nl
      static func generalErrorCryptolibMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general.error.cryptolib.message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.cryptolib.message"
        }

        let format = NSLocalizedString("general.error.cryptolib.message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Neem contact op met de zorgverlener waar je bent gevaccineerd. Hier kun je jouw coronabewijs aanvragen op papier of als pdf-bestand.
      ///
      /// Locales: en, nl
      static func holder_contactProviderHelpdesk_message_ggdPortalEnabled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactProviderHelpdesk_message_ggdPortalEnabled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactProviderHelpdesk_message_ggdPortalEnabled"
        }

        return NSLocalizedString("holder_contactProviderHelpdesk_message_ggdPortalEnabled", bundle: bundle, comment: "")
      }

      /// nl translation: Negatieve test
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionNegativetestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.negativetest.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.negativetest.title"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.negativetest.title", bundle: bundle, comment: "")
      }

      /// nl translation: Negatieve testuitslag
      ///
      /// Locales: en, nl
      static func general_negativeTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_negativeTest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_negativeTest"
        }

        return NSLocalizedString("general_negativeTest", bundle: bundle, comment: "")
      }

      /// nl translation: Negatieve testuitslag
      ///
      /// Locales: en, nl
      static func holderTestresultsNegative(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.negative", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.negative"
        }

        return NSLocalizedString("holder.testresults.negative", bundle: bundle, comment: "")
      }

      /// nl translation: Negatieve testuitslag toegevoegd
      ///
      /// Locales: en, nl
      static func holder_event_negativeTestEndstate_addVaccinationAssessment_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_negativeTestEndstate_addVaccinationAssessment_title"
        }

        return NSLocalizedString("holder_event_negativeTestEndstate_addVaccinationAssessment_title", bundle: bundle, comment: "")
      }

      /// nl translation: Niet akkoord
      ///
      /// Locales: en, nl
      static func newTermsDisagree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.disagree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.disagree"
        }

        return NSLocalizedString("new.terms.disagree", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static func general_newintheapp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_newintheapp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_newintheapp"
        }

        return NSLocalizedString("general_newintheapp", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static func holderUpdatepageTagline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.updatepage.tagline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.updatepage.tagline"
        }

        return NSLocalizedString("holder.updatepage.tagline", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuw in de app
      ///
      /// Locales: en, nl
      static func new_in_app_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_in_app_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_in_app_subtitle"
        }

        return NSLocalizedString("new_in_app_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuwe regels
      ///
      /// Locales: en, nl
      static func general_newpolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_newpolicy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_newpolicy"
        }

        return NSLocalizedString("general_newpolicy", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuwe regels
      ///
      /// Locales: en, nl
      static func new_policy_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_policy_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_policy_subtitle"
        }

        return NSLocalizedString("new_policy_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Nieuwe vaccinatie of test toevoegen
      ///
      /// Locales: en, nl
      static func holder_dashboard_addCard_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_addCard_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_addCard_title"
        }

        return NSLocalizedString("holder_dashboard_addCard_title", bundle: bundle, comment: "")
      }

      /// nl translation: Notificatie
      ///
      /// Locales: en, nl
      static func holder_dashboard_accessibility_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_accessibility_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_accessibility_notification"
        }

        return NSLocalizedString("holder_dashboard_accessibility_notification", bundle: bundle, comment: "")
      }

      /// nl translation: Nu updaten
      ///
      /// Locales: en, nl
      static func recommendedUpdateAppActionOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended.updateApp.action.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended.updateApp.action.ok"
        }

        return NSLocalizedString("recommended.updateApp.action.ok", bundle: bundle, comment: "")
      }

      /// nl translation: Nu updaten
      ///
      /// Locales: en, nl
      static func recommended_update_card_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended_update_card_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended_update_card_action"
        }

        return NSLocalizedString("recommended_update_card_action", bundle: bundle, comment: "")
      }

      /// nl translation: OKT
      ///
      /// Locales: en, nl
      static func holderTestresultsOctober(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.october", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.october"
        }

        return NSLocalizedString("holder.testresults.october", bundle: bundle, comment: "")
      }

      /// nl translation: Oke
      ///
      /// Locales: en, nl
      static func generalOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.ok"
        }

        return NSLocalizedString("general.ok", bundle: bundle, comment: "")
      }

      /// nl translation: Om de app op te starten heb je internet nodig.
      ///
      /// Locales: en, nl
      static func internetRequiredText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet.required.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet.required.text"
        }

        return NSLocalizedString("internet.required.text", bundle: bundle, comment: "")
      }

      /// nl translation: Om toegang tot je QR-codes te houden heb je internet nodig. Maak nu verbinding.
      ///
      /// Locales: en, nl
      static func holderDashboardStrippenExpiredNointernetAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.strippen.expired.nointernet.alert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.strippen.expired.nointernet.alert.message"
        }

        return NSLocalizedString("holder.dashboard.strippen.expired.nointernet.alert.message", bundle: bundle, comment: "")
      }

      /// nl translation: Omdat de opslag van je telefoon vol is werkt CoronaCheck niet. Maak ruimte vrij op je telefoon en open CoronaCheck opnieuw.
      ///
      /// Locales: en, nl
      static func appstatus_diskfull_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appstatus_diskfull_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appstatus_diskfull_body"
        }

        return NSLocalizedString("appstatus_diskfull_body", bundle: bundle, comment: "")
      }

      /// nl translation: Ongeldige gegevens verwijderd
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_alert_title"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_alert_title", bundle: bundle, comment: "")
      }

      /// nl translation: Onze voorwaarden zijn vernieuwd
      ///
      /// Locales: en, nl
      static func newTermsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.title"
        }

        return NSLocalizedString("new.terms.title", bundle: bundle, comment: "")
      }

      /// nl translation: Op dit moment geeft een Nederlands bewijs 3G-toegang. Dit betekent dat een bewijs overal geldig is waar om een coronabewijs wordt gevraagd.
      ///
      /// Locales: en, nl
      static func holder_dashboard_only3GaccessBanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_only3GaccessBanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_only3GaccessBanner_title"
        }

        return NSLocalizedString("holder_dashboard_only3GaccessBanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Op dit moment is de app niet in gebruik. Ga voor meer informatie naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func holder_endOfLife_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_endOfLife_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_endOfLife_description"
        }

        return NSLocalizedString("holder_endOfLife_description", bundle: bundle, comment: "")
      }

      /// nl translation: Op dit moment is de app niet in gebruik. Ga voor meer informatie naar CoronaCheck.nl
      ///
      /// Locales: en, nl
      static func verifier_endOfLife_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_endOfLife_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_endOfLife_description"
        }

        return NSLocalizedString("verifier_endOfLife_description", bundle: bundle, comment: "")
      }

      /// nl translation: Op dit moment wordt 3G-toegang gegeven op alle plekken waar om een coronabewijs wordt gevraagd. Dit betekent dat je overal naar binnen kunt met een bewijs van vaccinatie, herstel, of een negatieve test.
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only3G_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only3G_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only3G_body"
        }

        return NSLocalizedString("holder_newintheapp_content_only3G_body", bundle: bundle, comment: "")
      }

      /// nl translation: Op plekken waar het coronatoegangsbewijs gebruikt wordt, krijgen alleen bezoekers met een testbewijs toegang (1G-toegang). De CoronaCheck scanner geeft alleen een scherm met vinkje bij het scannen van een testbewijs.
      ///
      /// Locales: en, nl
      static func new_policy_1G_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_policy_1G_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_policy_1G_subtitle"
        }

        return NSLocalizedString("new_policy_1G_subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Open menu
      ///
      /// Locales: en, nl
      static func generalMenuOpen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.menu.open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.menu.open"
        }

        return NSLocalizedString("general.menu.open", bundle: bundle, comment: "")
      }

      /// nl translation: Open scanner
      ///
      /// Locales: en, nl
      static func holderMenuVerifierdeeplink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.verifierdeeplink", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.verifierdeeplink"
        }

        return NSLocalizedString("holder.menu.verifierdeeplink", bundle: bundle, comment: "")
      }

      /// nl translation: Opgehaald bij %@
      ///
      /// Locales: en, nl
      static func holder_identitySelection_details_fetchedFromProvider(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_identitySelection_details_fetchedFromProvider", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_details_fetchedFromProvider"
        }

        let format = NSLocalizedString("holder_identitySelection_details_fetchedFromProvider", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Opgehaald bij %@
      ///
      /// Locales: en, nl
      static func holder_storedEvents_listHeader_fetchedFromProvider(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_storedEvents_listHeader_fetchedFromProvider", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_listHeader_fetchedFromProvider"
        }

        let format = NSLocalizedString("holder_storedEvents_listHeader_fetchedFromProvider", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Opgeslagen gegevens
      ///
      /// Locales: en, nl
      static func holder_menu_storedEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_storedEvents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_storedEvents"
        }

        return NSLocalizedString("holder_menu_storedEvents", bundle: bundle, comment: "")
      }

      /// nl translation: Ophaalcode
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowTokenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.token.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.token.title"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.token.title", bundle: bundle, comment: "")
      }

      /// nl translation: Ophalen geannuleerd
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_portal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_portal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_portal_title"
        }

        return NSLocalizedString("holder_authentication_popup_portal_title", bundle: bundle, comment: "")
      }

      /// nl translation: Opnieuw scannen
      ///
      /// Locales: en, nl
      static func holder_scanner_error_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_error_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_error_action"
        }

        return NSLocalizedString("holder_scanner_error_action", bundle: bundle, comment: "")
      }

      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static func holderAboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.about.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.about.title"
        }

        return NSLocalizedString("holder.about.title", bundle: bundle, comment: "")
      }

      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static func holderMenuAbout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.about"
        }

        return NSLocalizedString("holder.menu.about", bundle: bundle, comment: "")
      }

      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static func verifierAboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.about.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.about.title"
        }

        return NSLocalizedString("verifier.about.title", bundle: bundle, comment: "")
      }

      /// nl translation: Over deze app
      ///
      /// Locales: en, nl
      static func verifierMenuAbout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.about"
        }

        return NSLocalizedString("verifier.menu.about", bundle: bundle, comment: "")
      }

      /// nl translation: Over je bezoekersbewijs
      ///
      /// Locales: en, nl
      static func holder_notvalidinthisregionmodal_visitorpass_international_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_notvalidinthisregionmodal_visitorpass_international_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_notvalidinthisregionmodal_visitorpass_international_title"
        }

        return NSLocalizedString("holder_notvalidinthisregionmodal_visitorpass_international_title", bundle: bundle, comment: "")
      }

      /// nl translation: Over jouw vaccinatie
      ///
      /// Locales: en, nl
      static func holderVaccinationAboutText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.about.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.about.text"
        }

        return NSLocalizedString("holder.vaccination.about.text", bundle: bundle, comment: "")
      }

      /// nl translation: Over mijn Nederlandse QR-code
      ///
      /// Locales: en, nl
      static func holderShowqrDomesticAboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.domestic.about.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.domestic.about.title"
        }

        return NSLocalizedString("holder.showqr.domestic.about.title", bundle: bundle, comment: "")
      }

      /// nl translation: Over mijn dosis %@/%@
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationTitle(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.showqr.eu.about.vaccination.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.title"
        }

        let format = NSLocalizedString("holder.showqr.eu.about.vaccination.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Over mijn internationale QR-code
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.title"
        }

        return NSLocalizedString("holder.showqr.eu.about.title", bundle: bundle, comment: "")
      }

      /// nl translation: Over scannen
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.navigation.title"
        }

        return NSLocalizedString("verifier.scaninstructions.navigation.title", bundle: bundle, comment: "")
      }

      /// nl translation: Overgebleven tijd:
      ///
      /// Locales: en, nl
      static func holderShowqrScreenshotwarningCountdownAccessibilityLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.screenshotwarning.countdownAccessibilityLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.screenshotwarning.countdownAccessibilityLabel"
        }

        return NSLocalizedString("holder.showqr.screenshotwarning.countdownAccessibilityLabel", bundle: bundle, comment: "")
      }

      /// nl translation: Overslaan
      ///
      /// Locales: en, nl
      static func general_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_skip"
        }

        return NSLocalizedString("general_skip", bundle: bundle, comment: "")
      }

      /// nl translation: Pagina %d van %d
      ///
      /// Locales: en, nl
      static func general_pagecontrol_accessibility_value(_ value1: Int, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("general_pagecontrol_accessibility_value", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_pagecontrol_accessibility_value"
        }

        let format = NSLocalizedString("general_pagecontrol_accessibility_value", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Positieve test
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionRecoveryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.recovery.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.recovery.title"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.recovery.title", bundle: bundle, comment: "")
      }

      /// nl translation: Positieve testuitslag
      ///
      /// Locales: en, nl
      static func general_positiveTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_positiveTest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_positiveTest"
        }

        return NSLocalizedString("general_positiveTest", bundle: bundle, comment: "")
      }

      /// nl translation: Positieve testuitslag
      ///
      /// Locales: en, nl
      static func holderTestresultsPositive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.positive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.positive"
        }

        return NSLocalizedString("holder.testresults.positive", bundle: bundle, comment: "")
      }

      /// nl translation: Positieve testuitslag niet meer geldig
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateRecoveryTooOld_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryTooOld_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateRecoveryTooOld_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateRecoveryTooOld_title", bundle: bundle, comment: "")
      }

      /// nl translation: Privacyverklaring
      ///
      /// Locales: en, nl
      static func holderMenuPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.privacy"
        }

        return NSLocalizedString("holder.menu.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer het op een later moment nog eens.
      ///
      /// Locales: en, nl
      static func generalNetworkwasbusyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.networkwasbusy.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.networkwasbusy.text"
        }

        return NSLocalizedString("general.networkwasbusy.text", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static func generalErrorCryptolibRetry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.cryptolib.retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.cryptolib.retry"
        }

        return NSLocalizedString("general.error.cryptolib.retry", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static func generalRetry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.retry"
        }

        return NSLocalizedString("general.retry", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static func holderCheckdccRejectedActionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.rejected.actionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.rejected.actionTitle"
        }

        return NSLocalizedString("holder.checkdcc.rejected.actionTitle", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.error.again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.again"
        }

        return NSLocalizedString("holder.vaccination.error.again", bundle: bundle, comment: "")
      }

      /// nl translation: Probeer opnieuw
      ///
      /// Locales: en, nl
      static func internetRequiredButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("internet.required.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "internet.required.button"
        }

        return NSLocalizedString("internet.required.button", bundle: bundle, comment: "")
      }

      /// nl translation: Probleem met de app
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_sendCrashReport_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_unrecoverableError_sendCrashReport_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_sendCrashReport_title"
        }

        return NSLocalizedString("general_unrecoverableError_sendCrashReport_title", bundle: bundle, comment: "")
      }

      /// nl translation: Probleem rapporteren
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_sendCrashReport_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_unrecoverableError_sendCrashReport_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_sendCrashReport_action"
        }

        return NSLocalizedString("general_unrecoverableError_sendCrashReport_action", bundle: bundle, comment: "")
      }

      /// nl translation: Producent / Vaccine manufacturer:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.manufacturer"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Productnaam:
      ///
      /// Locales: en, nl
      static func holder_event_aboutVaccination_productName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_aboutVaccination_productName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_aboutVaccination_productName"
        }

        return NSLocalizedString("holder_event_aboutVaccination_productName", bundle: bundle, comment: "")
      }

      /// nl translation: QR-code is verborgen
      ///
      /// Locales: en, nl
      static func holderShowqrQrhidden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.qrhidden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.qrhidden"
        }

        return NSLocalizedString("holder.showqr.qrhidden", bundle: bundle, comment: "")
      }

      /// nl translation: QR-code is verlopen
      ///
      /// Locales: en, nl
      static func holder_qr_code_expired_overlay_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_expired_overlay_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_expired_overlay_title"
        }

        return NSLocalizedString("holder_qr_code_expired_overlay_title", bundle: bundle, comment: "")
      }

      /// nl translation: QR-code maken
      ///
      /// Locales: en, nl
      static func holderAboutmakingaqrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.aboutmakingaqr.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.aboutmakingaqr.title"
        }

        return NSLocalizedString("holder.aboutmakingaqr.title", bundle: bundle, comment: "")
      }

      /// nl translation: QR-code maken
      ///
      /// Locales: en, nl
      static func holderProviderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.title"
        }

        return NSLocalizedString("holder.provider.title", bundle: bundle, comment: "")
      }

      /// nl translation: QR-code wordt niet herkend
      ///
      /// Locales: en, nl
      static func holder_scanner_error_title_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_error_title_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_error_title_unknown"
        }

        return NSLocalizedString("holder_scanner_error_title_unknown", bundle: bundle, comment: "")
      }

      /// nl translation: QR-codes voor Nederland en internationaal
      ///
      /// Locales: en, nl
      static func holderOnboardingTitlePrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.onboarding.title.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.onboarding.title.privacy"
        }

        return NSLocalizedString("holder.onboarding.title.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: Regel je bewijs via bijvoorbeeld je huisarts of zorginstelling
      ///
      /// Locales: en, nl
      static func holder_chooseEventLocation_buttonSubTitle_other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_chooseEventLocation_buttonSubTitle_other", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_chooseEventLocation_buttonSubTitle_other"
        }

        return NSLocalizedString("holder_chooseEventLocation_buttonSubTitle_other", bundle: bundle, comment: "")
      }

      /// nl translation: Regel je bewijs via de GGD
      ///
      /// Locales: en, nl
      static func holder_chooseEventLocation_buttonSubTitle_GGD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_chooseEventLocation_buttonSubTitle_GGD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_chooseEventLocation_buttonSubTitle_GGD"
        }

        return NSLocalizedString("holder_chooseEventLocation_buttonSubTitle_GGD", bundle: bundle, comment: "")
      }

      /// nl translation: Reis je naar een land waar om een coronabewijs wordt gevraagd? Dan kun je met deze app je bewijs maken.
      ///
      /// Locales: en, nl
      static func holder_onboarding_content_TravelSafe_0G_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_content_TravelSafe_0G_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_content_TravelSafe_0G_message"
        }

        return NSLocalizedString("holder_onboarding_content_TravelSafe_0G_message", bundle: bundle, comment: "")
      }

      /// nl translation: Reset app
      ///
      /// Locales: en, nl
      static func holderCleardataAlertRemove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.cleardata.alert.remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.cleardata.alert.remove"
        }

        return NSLocalizedString("holder.cleardata.alert.remove", bundle: bundle, comment: "")
      }

      /// nl translation: Reset app
      ///
      /// Locales: en, nl
      static func holderCleardataMenuTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.cleardata.menu.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.cleardata.menu.title"
        }

        return NSLocalizedString("holder.cleardata.menu.title", bundle: bundle, comment: "")
      }

      /// nl translation: Richt je telefoon op de QR-code
      ///
      /// Locales: en, nl
      static func holder_scanner_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_message"
        }

        return NSLocalizedString("holder_scanner_message", bundle: bundle, comment: "")
      }

      /// nl translation: Rijksoverheid
      ///
      /// Locales: en, nl
      static func generalGovernment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.government", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.government"
        }

        return NSLocalizedString("general.government", bundle: bundle, comment: "")
      }

      /// nl translation: Rood scherm, wat nu?
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsRedscreennowwhatTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.redscreennowwhat.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.redscreennowwhat.title"
        }

        return NSLocalizedString("verifier.scaninstructions.redscreennowwhat.title", bundle: bundle, comment: "")
      }

      /// nl translation: SEP
      ///
      /// Locales: en, nl
      static func holderTestresultsSeptember(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.september", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.september"
        }

        return NSLocalizedString("holder.testresults.september", bundle: bundle, comment: "")
      }

      /// nl translation: Scan QR-code
      ///
      /// Locales: en, nl
      static func holder_scanner_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_title"
        }

        return NSLocalizedString("holder_scanner_title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan QR-code
      ///
      /// Locales: en, nl
      static func verifierScanTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.title"
        }

        return NSLocalizedString("verifier.scan.title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan QR-codes
      ///
      /// Locales: en, nl
      static func verifierMenuDashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.dashboard"
        }

        return NSLocalizedString("verifier.menu.dashboard", bundle: bundle, comment: "")
      }

      /// nl translation: Scan QR-codes
      ///
      /// Locales: en, nl
      static func verifierStartTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.title"
        }

        return NSLocalizedString("verifier.start.title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan de QR-code
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsScanQRTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.scanQR.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.scanQR.title"
        }

        return NSLocalizedString("verifier.scaninstructions.scanQR.title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan de QR-codes van je bezoekers
      ///
      /// Locales: en, nl
      static func verifierStartHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.header"
        }

        return NSLocalizedString("verifier.start.header", bundle: bundle, comment: "")
      }

      /// nl translation: Scan de QR-codes van je bezoekers. Is de QR-code geldig en zijn de gegevens hetzelfde als op het identiteitsbewijs? Dan mag je de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static func verifierStartMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.message"
        }

        return NSLocalizedString("verifier.start.message", bundle: bundle, comment: "")
      }

      /// nl translation: Scan de QR-codes van je bezoekers. Is de QR-code geldig op jouw locatie en zijn de gegevens hetzelfde als op het identiteitsbewijs? Dan mag je de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static func scan_qr_description_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_qr_description_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_qr_description_1G"
        }

        return NSLocalizedString("scan_qr_description_1G", bundle: bundle, comment: "")
      }

      /// nl translation: Scan de internationale QR-code
      ///
      /// Locales: en, nl
      static func holder_scanner_error_title_ctb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_scanner_error_title_ctb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_scanner_error_title_ctb"
        }

        return NSLocalizedString("holder_scanner_error_title_ctb", bundle: bundle, comment: "")
      }

      /// nl translation: Scan met de camera van je telefoon de QR-codes van bezoekers in de CoronaCheck-app of op papier. Toeristen kunnen een QR-code in een buitenlandse app of op papier tonen.
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsScanQRContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.scanQR.content", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.scanQR.content"
        }

        return NSLocalizedString("verifier.scaninstructions.scanQR.content", bundle: bundle, comment: "")
      }

      /// nl translation: Scan volgende
      ///
      /// Locales: en, nl
      static func verifierResultCheckButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.check.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.check.button"
        }

        return NSLocalizedString("verifier.result.check.button", bundle: bundle, comment: "")
      }

      /// nl translation: Scan volgende
      ///
      /// Locales: en, nl
      static func verifierResultNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.next"
        }

        return NSLocalizedString("verifier.result.next", bundle: bundle, comment: "")
      }

      /// nl translation: Scan-instelling
      ///
      /// Locales: en, nl
      static func verifier_menu_risksetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_menu_risksetting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_menu_risksetting"
        }

        return NSLocalizedString("verifier_menu_risksetting", bundle: bundle, comment: "")
      }

      /// nl translation: Scan-instelling
      ///
      /// Locales: en, nl
      static func verifier_risksetting_start_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_start_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_start_title"
        }

        return NSLocalizedString("verifier_risksetting_start_title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan-instelling aanpassen
      ///
      /// Locales: en, nl
      static func verifier_risksetting_active_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_active_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_active_title"
        }

        return NSLocalizedString("verifier_risksetting_active_title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan-instelling log
      ///
      /// Locales: en, nl
      static func scan_log_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_log_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_title"
        }

        return NSLocalizedString("scan_log_title", bundle: bundle, comment: "")
      }

      /// nl translation: Scan-instelling log
      ///
      /// Locales: en, nl
      static func verifier_about_this_app_scan_log(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_about_this_app_scan_log", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_about_this_app_scan_log"
        }

        return NSLocalizedString("verifier_about_this_app_scan_log", bundle: bundle, comment: "")
      }

      /// nl translation: Scanner wil toegang tot de camera
      ///
      /// Locales: en, nl
      static func verifierScanPermissionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.permission.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.permission.title"
        }

        return NSLocalizedString("verifier.scan.permission.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sla over
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsNavigationSkipbuttonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.navigation.skipbutton.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.navigation.skipbutton.title"
        }

        return NSLocalizedString("verifier.scaninstructions.navigation.skipbutton.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sluit CoronaCheck
      ///
      /// Locales: en, nl
      static func appstatus_diskfull_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appstatus_diskfull_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appstatus_diskfull_button"
        }

        return NSLocalizedString("appstatus_diskfull_button", bundle: bundle, comment: "")
      }

      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static func generalClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.close"
        }

        return NSLocalizedString("general.close", bundle: bundle, comment: "")
      }

      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowConfirmresendverificationalertCancelbutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.cancelbutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.confirmresendverificationalert.cancelbutton"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.cancelbutton", bundle: bundle, comment: "")
      }

      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowConfirmresendverificationalertCancelbutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.cancelbutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.confirmresendverificationalert.cancelbutton"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.cancelbutton", bundle: bundle, comment: "")
      }

      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static func holderVaccinationErrorClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.error.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.error.close"
        }

        return NSLocalizedString("holder.vaccination.error.close", bundle: bundle, comment: "")
      }

      /// nl translation: Sluiten
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_alert_button_close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_alert_button_close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_alert_button_close"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_alert_button_close", bundle: bundle, comment: "")
      }

      /// nl translation: Soms vallen gegevens weg
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsCheckonlythevisibledataTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.checkonlythevisibledata.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.checkonlythevisibledata.title"
        }

        return NSLocalizedString("verifier.scaninstructions.checkonlythevisibledata.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static func generalErrorCryptolibTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.cryptolib.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.cryptolib.title"
        }

        return NSLocalizedString("general.error.cryptolib.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static func holderErrorstateTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.title"
        }

        return NSLocalizedString("holder.errorstate.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, er gaat iets mis
      ///
      /// Locales: en, nl
      static func holderFetcheventsErrorNoresultsNetworkerrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.error.noresults.networkerror.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.error.noresults.networkerror.title"
        }

        return NSLocalizedString("holder.fetchevents.error.noresults.networkerror.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, er ging iets mis
      ///
      /// Locales: en, nl
      static func generalErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.error.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.error.title"
        }

        return NSLocalizedString("general.error.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, het is erg druk
      ///
      /// Locales: en, nl
      static func generalNetworkwasbusyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.networkwasbusy.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.networkwasbusy.title"
        }

        return NSLocalizedString("general.networkwasbusy.title", bundle: bundle, comment: "")
      }

      /// nl translation: Sorry, het is erg druk
      ///
      /// Locales: en, nl
      static func holderFetcheventsErrorNoresultsNetworkwasbusyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.fetchevents.error.noresults.networkwasbusy.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.fetchevents.error.noresults.networkwasbusy.title"
        }

        return NSLocalizedString("holder.fetchevents.error.noresults.networkwasbusy.title", bundle: bundle, comment: "")
      }

      /// nl translation: Stap %@
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsStepTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verifier.scaninstructions.step.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.step.title"
        }

        let format = NSLocalizedString("verifier.scaninstructions.step.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Start CoronaCheck opnieuw op. Nog steeds een probleem? Verwijder de app en installeer deze opnieuw.
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_restartTheApp_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_unrecoverableError_restartTheApp_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_restartTheApp_message"
        }

        return NSLocalizedString("general_unrecoverableError_restartTheApp_message", bundle: bundle, comment: "")
      }

      /// nl translation: Start de app opnieuw op
      ///
      /// Locales: en, nl
      static func general_unrecoverableError_restartTheApp_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_unrecoverableError_restartTheApp_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_unrecoverableError_restartTheApp_title"
        }

        return NSLocalizedString("general_unrecoverableError_restartTheApp_title", bundle: bundle, comment: "")
      }

      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static func holder_paperproof_startscanning_button_startScanning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_startscanning_button_startScanning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_startscanning_button_startScanning"
        }

        return NSLocalizedString("holder_paperproof_startscanning_button_startScanning", bundle: bundle, comment: "")
      }

      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static func verifierScaninstructionsButtonStartscanning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scaninstructions.button.startscanning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scaninstructions.button.startscanning"
        }

        return NSLocalizedString("verifier.scaninstructions.button.startscanning", bundle: bundle, comment: "")
      }

      /// nl translation: Start scannen
      ///
      /// Locales: en, nl
      static func verifierStartButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.button.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.button.title"
        }

        return NSLocalizedString("verifier.start.button.title", bundle: bundle, comment: "")
      }

      /// nl translation: Stel voor jouw locatie in of je 1G- of 3G-toegang gaat geven. Controleer voordat je gaat scannen welk soort toegang je mag geven.
      ///
      /// Locales: en, nl
      static func verifier_risksetting_firsttimeuse_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_firsttimeuse_header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_firsttimeuse_header"
        }

        return NSLocalizedString("verifier_risksetting_firsttimeuse_header", bundle: bundle, comment: "")
      }

      /// nl translation: Stel voor jouw locatie in of je 1G- of 3G-toegang gaat geven. Controleer voordat je gaat scannen welk soort toegang je mag geven.
      ///
      /// Locales: en, nl
      static func verifier_risksetting_start_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_start_header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_start_header"
        }

        return NSLocalizedString("verifier_risksetting_start_header", bundle: bundle, comment: "")
      }

      /// nl translation: Stoppen
      ///
      /// Locales: en, nl
      static func holderEventIdentityAlertCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.identity.alert.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.identity.alert.cancel"
        }

        return NSLocalizedString("holder.event.identity.alert.cancel", bundle: bundle, comment: "")
      }

      /// nl translation: Stuur opnieuw
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowConfirmresendverificationalertOkaybutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.okaybutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.confirmresendverificationalert.okaybutton"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.confirmresendverificationalert.okaybutton", bundle: bundle, comment: "")
      }

      /// nl translation: Stuur opnieuw
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowConfirmresendverificationalertOkaybutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.okaybutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.confirmresendverificationalert.okaybutton"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.confirmresendverificationalert.okaybutton", bundle: bundle, comment: "")
      }

      /// nl translation: Support
      ///
      /// Locales: en, nl
      static func verifierMenuSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.support"
        }

        return NSLocalizedString("verifier.menu.support", bundle: bundle, comment: "")
      }

      /// nl translation: Te vaak geprobeerd
      ///
      /// Locales: en, nl
      static func holderCheckdccBlockedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.checkdcc.blocked.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.checkdcc.blocked.title"
        }

        return NSLocalizedString("holder.checkdcc.blocked.title", bundle: bundle, comment: "")
      }

      /// nl translation: Terug
      ///
      /// Locales: en, nl
      static func generalBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.back"
        }

        return NSLocalizedString("general.back", bundle: bundle, comment: "")
      }

      /// nl translation: Terug naar de %@
      ///
      /// Locales: en, nl
      static func holderDashboardQrBackToThirdPartyApp(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dashboard.qr.backToThirdPartyApp", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.backToThirdPartyApp"
        }

        let format = NSLocalizedString("holder.dashboard.qr.backToThirdPartyApp", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Terug naar start
      ///
      /// Locales: en, nl
      static func verifier_scan_instructions_back_to_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_scan_instructions_back_to_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_scan_instructions_back_to_start"
        }

        return NSLocalizedString("verifier_scan_instructions_back_to_start", bundle: bundle, comment: "")
      }

      /// nl translation: Test type:
      ///
      /// Locales: en, nl
      static func holderDccTestType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.type"
        }

        return NSLocalizedString("holder.dcc.test.type", bundle: bundle, comment: "")
      }

      /// nl translation: Testafspraak maken
      ///
      /// Locales: en, nl
      static func holderAppointmentHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.appointment.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.appointment.header"
        }

        return NSLocalizedString("holder.appointment.header", bundle: bundle, comment: "")
      }

      /// nl translation: Testafspraak maken
      ///
      /// Locales: en, nl
      static func holderAppointmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.appointment.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.appointment.title"
        }

        return NSLocalizedString("holder.appointment.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum
      ///
      /// Locales: en, nl
      static func generalTestdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.testdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.testdate"
        }

        return NSLocalizedString("general.testdate", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum / Test date*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.date"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum / Test date:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.date"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.date"
        }

        return NSLocalizedString("holder.dcc.recovery.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static func holderDccTestDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.date"
        }

        return NSLocalizedString("holder.dcc.test.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.date"
        }

        return NSLocalizedString("holder.event.about.recovery.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.date"
        }

        return NSLocalizedString("holder.event.about.test.date", bundle: bundle, comment: "")
      }

      /// nl translation: Testdatum: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_testDate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_testDate", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_testDate"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_testDate", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Testlocatie / Test location:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestFacility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.facility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.facility"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.facility", bundle: bundle, comment: "")
      }

      /// nl translation: Testlocatie:
      ///
      /// Locales: en, nl
      static func holderDccTestFacility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.facility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.facility"
        }

        return NSLocalizedString("holder.dcc.test.facility", bundle: bundle, comment: "")
      }

      /// nl translation: Testlocatie:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestFacility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.facility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.facility"
        }

        return NSLocalizedString("holder.event.about.test.facility", bundle: bundle, comment: "")
      }

      /// nl translation: Testnaam / Test name:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestTestname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.testname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.testname"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.testname", bundle: bundle, comment: "")
      }

      /// nl translation: Testnaam:
      ///
      /// Locales: en, nl
      static func holderDccTestTestname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.testname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.testname"
        }

        return NSLocalizedString("holder.dcc.test.testname", bundle: bundle, comment: "")
      }

      /// nl translation: Testnaam:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestTestname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.testname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.testname"
        }

        return NSLocalizedString("holder.event.about.test.testname", bundle: bundle, comment: "")
      }

      /// nl translation: Testproducent / Test manufacturer:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.manufacturer"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Testproducent:
      ///
      /// Locales: en, nl
      static func holderDccTestManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.manufacturer"
        }

        return NSLocalizedString("holder.dcc.test.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Testproducent:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.manufacturer"
        }

        return NSLocalizedString("holder.event.about.test.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag / Test result:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.result"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.result", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag is al opgehaald
      ///
      /// Locales: en, nl
      static func holderTestresultsAlreadyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.already.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.already.title"
        }

        return NSLocalizedString("holder.testresults.already.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag nog niet bekend
      ///
      /// Locales: en, nl
      static func holderTestresultsPendingTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.pending.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.pending.title"
        }

        return NSLocalizedString("holder.testresults.pending.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static func holderTestListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.test.list.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.test.list.title"
        }

        return NSLocalizedString("holder.test.list.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.title"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.title"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.title", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag ophalen
      ///
      /// Locales: en, nl
      static func holder_completecertificate_button_fetchnegativetest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_completecertificate_button_fetchnegativetest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_completecertificate_button_fetchnegativetest"
        }

        return NSLocalizedString("holder_completecertificate_button_fetchnegativetest", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag:
      ///
      /// Locales: en, nl
      static func holderDccTestResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.result"
        }

        return NSLocalizedString("holder.dcc.test.result", bundle: bundle, comment: "")
      }

      /// nl translation: Testuitslag:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.result"
        }

        return NSLocalizedString("holder.event.about.test.result", bundle: bundle, comment: "")
      }

      /// nl translation: Tijd voor een update
      ///
      /// Locales: en, nl
      static func holder_updateApp_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_updateApp_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_updateApp_title"
        }

        return NSLocalizedString("holder_updateApp_title", bundle: bundle, comment: "")
      }

      /// nl translation: Tijd voor een update
      ///
      /// Locales: en, nl
      static func verifier_updateApp_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_updateApp_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_updateApp_title"
        }

        return NSLocalizedString("verifier_updateApp_title", bundle: bundle, comment: "")
      }

      /// nl translation: Toegangsbewijs
      ///
      /// Locales: en, nl
      static func holder_dashboard_accessibility_access(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_accessibility_access", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_accessibility_access"
        }

        return NSLocalizedString("holder_dashboard_accessibility_access", bundle: bundle, comment: "")
      }

      /// nl translation: Toegankelijkheid
      ///
      /// Locales: en, nl
      static func holderMenuAccessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.menu.accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.menu.accessibility"
        }

        return NSLocalizedString("holder.menu.accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: Toegankelijkheid
      ///
      /// Locales: en, nl
      static func verifierMenuAccessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.menu.accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.menu.accessibility"
        }

        return NSLocalizedString("verifier.menu.accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: Toevoegen
      ///
      /// Locales: en, nl
      static func generalAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.add"
        }

        return NSLocalizedString("general.add", bundle: bundle, comment: "")
      }

      /// nl translation: Toevoegen
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_action_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_action_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_action_title"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_action_title", bundle: bundle, comment: "")
      }

      /// nl translation: Type test
      ///
      /// Locales: en, nl
      static func generalTesttype(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.testtype", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.testtype"
        }

        return NSLocalizedString("general.testtype", bundle: bundle, comment: "")
      }

      /// nl translation: Type test / Type of test:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.type"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.type", bundle: bundle, comment: "")
      }

      /// nl translation: Type test:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.type"
        }

        return NSLocalizedString("holder.event.about.test.type", bundle: bundle, comment: "")
      }

      /// nl translation: Type vaccin / Vaccine type:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.type"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.type", bundle: bundle, comment: "")
      }

      /// nl translation: Type vaccin:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.type"
        }

        return NSLocalizedString("holder.dcc.vaccination.type", bundle: bundle, comment: "")
      }

      /// nl translation: Type vaccin:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.type"
        }

        return NSLocalizedString("holder.event.about.vaccination.type", bundle: bundle, comment: "")
      }

      /// nl translation: Uit de app verwijderen
      ///
      /// Locales: en, nl
      static func holder_storedEvents_button_removeEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_button_removeEvents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_button_removeEvents"
        }

        return NSLocalizedString("holder_storedEvents_button_removeEvents", bundle: bundle, comment: "")
      }

      /// nl translation: Uit de test blijkt dat ik corona heb gehad
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionRecoverySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.recovery.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.recovery.subtitle"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.recovery.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Uit de test blijkt dat ik geen corona heb
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionNegativetestSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.negativetest.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.negativetest.subtitle"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.negativetest.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek beoordelingsnummer:
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_about_unique_identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_about_unique_identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_about_unique_identifier"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_about_unique_identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.identifier"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.identifier"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek certificaatnummer / Unique certificate identifier:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.identifier"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.identifier"
        }

        return NSLocalizedString("holder.dcc.recovery.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static func holderDccTestIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.identifier"
        }

        return NSLocalizedString("holder.dcc.test.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static func holderEventAboutRecoveryIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.recovery.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.recovery.identifier"
        }

        return NSLocalizedString("holder.event.about.recovery.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek testnummer:
      ///
      /// Locales: en, nl
      static func holderEventAboutTestIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.test.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.test.identifier"
        }

        return NSLocalizedString("holder.event.about.test.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek vaccinatienummer:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.identifier"
        }

        return NSLocalizedString("holder.dcc.vaccination.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Uniek vaccinatienummer:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationIdentifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.identifier"
        }

        return NSLocalizedString("holder.event.about.vaccination.identifier", bundle: bundle, comment: "")
      }

      /// nl translation: Update alvast je app
      ///
      /// Locales: en, nl
      static func recommendedUpdateAppTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended.updateApp.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended.updateApp.title"
        }

        return NSLocalizedString("recommended.updateApp.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccin / Vaccine:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationBrand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.brand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.brand"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.brand", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccin:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationBrand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.brand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.brand"
        }

        return NSLocalizedString("holder.dcc.vaccination.brand", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccin:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationBrand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.brand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.brand"
        }

        return NSLocalizedString("holder.event.about.vaccination.brand", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatie
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeOptionVaccineTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.option.vaccine.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.option.vaccine.title"
        }

        return NSLocalizedString("holder.chooseqrcodetype.option.vaccine.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatie
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_title_vaccination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_listElement_title_vaccination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_title_vaccination"
        }

        return NSLocalizedString("holder_listRemoteEvents_listElement_title_vaccination", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatie %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_vaccination_title(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_vaccination_title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_vaccination_title"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_vaccination_title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Vaccinatie of test toevoegen
      ///
      /// Locales: en, nl
      static func holder_menu_listItem_addVaccinationOrTest_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_menu_listItem_addVaccinationOrTest_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_menu_listItem_addVaccinationOrTest_title"
        }

        return NSLocalizedString("holder_menu_listItem_addVaccinationOrTest_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiebeoordeling
      ///
      /// Locales: en, nl
      static func holder_event_vaccination_assessment_element_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_event_vaccination_assessment_element_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_event_vaccination_assessment_element_title"
        }

        return NSLocalizedString("holder_event_vaccination_assessment_element_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiebeoordeling ophalen
      ///
      /// Locales: en, nl
      static func visitorpass_code_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_title"
        }

        return NSLocalizedString("visitorpass_code_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiebewijs dosis %@/%@
      ///
      /// Locales: en, nl
      static func holderDccVaccinationListTitle(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder.dcc.vaccination.list.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.list.title"
        }

        let format = NSLocalizedString("holder.dcc.vaccination.list.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// nl translation: Vaccinatiebewijs en herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateInternationalVaccinationAndRecovery_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiebewijs en herstelbewijs gemaakt
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateVaccinationsAndRecovery_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateVaccinationsAndRecovery_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateVaccinationsAndRecovery_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateVaccinationsAndRecovery_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiedatum
      ///
      /// Locales: en, nl
      static func generalVaccinationdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.vaccinationdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.vaccinationdate"
        }

        return NSLocalizedString("general.vaccinationdate", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiedatum / Vaccination date*:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.date"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.date", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiedatum:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.date"
        }

        return NSLocalizedString("holder.dcc.vaccination.date", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiedatum:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.date"
        }

        return NSLocalizedString("holder.event.about.vaccination.date", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinatiedatum: %@
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_listElement_vaccinationDate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("holder_listRemoteEvents_listElement_vaccinationDate", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_listElement_vaccinationDate"
        }

        let format = NSLocalizedString("holder_listRemoteEvents_listElement_vaccinationDate", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// nl translation: Vaccinproducent:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.manufacturer"
        }

        return NSLocalizedString("holder.dcc.vaccination.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Vaccinproducent:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationManufacturer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.manufacturer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.manufacturer"
        }

        return NSLocalizedString("holder.event.about.vaccination.manufacturer", bundle: bundle, comment: "")
      }

      /// nl translation: Veilig op reis met je bewijs
      ///
      /// Locales: en, nl
      static func holder_onboarding_content_TravelSafe_0G_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_onboarding_content_TravelSafe_0G_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_onboarding_content_TravelSafe_0G_title"
        }

        return NSLocalizedString("holder_onboarding_content_TravelSafe_0G_title", bundle: bundle, comment: "")
      }

      /// nl translation: Verandert de beweging van richting
      ///
      /// Locales: en, nl
      static func holder_showqr_animation_voiceover_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_showqr_animation_voiceover_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_showqr_animation_voiceover_hint"
        }

        return NSLocalizedString("holder_showqr_animation_voiceover_hint", bundle: bundle, comment: "")
      }

      /// nl translation: Verborgen QR-code
      ///
      /// Locales: en, nl
      static func holder_qr_code_hidden_explanation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_hidden_explanation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_hidden_explanation_title"
        }

        return NSLocalizedString("holder_qr_code_hidden_explanation_title", bundle: bundle, comment: "")
      }

      /// nl translation: Verificatiecode
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowVerificationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.verification.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.verification.title"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.verification.title", bundle: bundle, comment: "")
      }

      /// nl translation: Verificatiecode
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowVerificationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.verification.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.verification.title"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.verification.title", bundle: bundle, comment: "")
      }

      /// nl translation: Verloopt over
      ///
      /// Locales: en, nl
      static func holderDashboardQrExpiryDatePrefixExpiresIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.expiryDate.prefix.expiresIn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.expiryDate.prefix.expiresIn"
        }

        return NSLocalizedString("holder.dashboard.qr.expiryDate.prefix.expiresIn", bundle: bundle, comment: "")
      }

      /// nl translation: Verlopen QR-code
      ///
      /// Locales: en, nl
      static func holder_qr_code_expired_explanation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_expired_explanation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_expired_explanation_title"
        }

        return NSLocalizedString("holder_qr_code_expired_explanation_title", bundle: bundle, comment: "")
      }

      /// nl translation: Verlopen bezoekersbewijs
      ///
      /// Locales: en, nl
      static func holder_dashboard_visitorpassexpired_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_visitorpassexpired_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_visitorpassexpired_title"
        }

        return NSLocalizedString("holder_dashboard_visitorpassexpired_title", bundle: bundle, comment: "")
      }

      /// nl translation: Verlopen vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func holder_expiredDomesticVaccinationModal_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_expiredDomesticVaccinationModal_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_expiredDomesticVaccinationModal_title"
        }

        return NSLocalizedString("holder_expiredDomesticVaccinationModal_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vernieuwd vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func holderEuvaccinationswereupgradedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.euvaccinationswereupgraded.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.euvaccinationswereupgraded.title"
        }

        return NSLocalizedString("holder.euvaccinationswereupgraded.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vervang
      ///
      /// Locales: en, nl
      static func holderEventIdentityAlertOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.identity.alert.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.identity.alert.ok"
        }

        return NSLocalizedString("holder.event.identity.alert.ok", bundle: bundle, comment: "")
      }

      /// nl translation: Verwijderde gegevens
      ///
      /// Locales: en, nl
      static func holder_invaliddetailsremoved_moreinfo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_invaliddetailsremoved_moreinfo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_invaliddetailsremoved_moreinfo_title"
        }

        return NSLocalizedString("holder_invaliddetailsremoved_moreinfo_title", bundle: bundle, comment: "")
      }

      /// nl translation: Verwijderen
      ///
      /// Locales: en, nl
      static func general_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_delete"
        }

        return NSLocalizedString("general_delete", bundle: bundle, comment: "")
      }

      /// nl translation: Vinkje = toegang
      ///
      /// Locales: en, nl
      static func scan_instructions_4_title_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_instructions_4_title_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_instructions_4_title_1G"
        }

        return NSLocalizedString("scan_instructions_4_title_1G", bundle: bundle, comment: "")
      }

      /// nl translation: Voeg bewijs toe via DigiD
      ///
      /// Locales: en, nl
      static func holderPaperproofNotokenAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.paperproof.notoken.action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.paperproof.notoken.action"
        }

        return NSLocalizedString("holder.paperproof.notoken.action", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func generalNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.next"
        }

        return NSLocalizedString("general.next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holderDcctokenentryNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.next"
        }

        return NSLocalizedString("holder.dcctokenentry.next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.next"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.next"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_thirdPage_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_thirdPage_action"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_action", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_3Gand1G_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_3Gand1G_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_3Gand1G_button_next"
        }

        return NSLocalizedString("holder_newintheapp_content_3Gand1G_button_next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only1G_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only1G_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only1G_button_next"
        }

        return NSLocalizedString("holder_newintheapp_content_only1G_button_next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func holder_newintheapp_content_only3G_button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_newintheapp_content_only3G_button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_newintheapp_content_only3G_button_next"
        }

        return NSLocalizedString("holder_newintheapp_content_only3G_button_next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func visitorpass_start_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_start_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_start_action"
        }

        return NSLocalizedString("visitorpass_start_action", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende
      ///
      /// Locales: en, nl
      static func visitorpass_token_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_token_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_token_next"
        }

        return NSLocalizedString("visitorpass_token_next", bundle: bundle, comment: "")
      }

      /// nl translation: Volgende QR-code
      ///
      /// Locales: en, nl
      static func holderShowqrNextbutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.nextbutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.nextbutton"
        }

        return NSLocalizedString("holder.showqr.nextbutton", bundle: bundle, comment: "")
      }

      /// nl translation: Voor handhaving:
      ///
      /// Locales: en, nl
      static func verifier_about_this_app_law_enforcement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_about_this_app_law_enforcement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_about_this_app_law_enforcement"
        }

        return NSLocalizedString("verifier_about_this_app_law_enforcement", bundle: bundle, comment: "")
      }

      /// nl translation: Voorkomen dat je moet updaten als je ergens naar binnen wilt of de grens over gaat? Update nu al naar een nieuwere versie.
      ///
      /// Locales: en, nl
      static func recommendedUpdateAppSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommended.updateApp.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommended.updateApp.subtitle"
        }

        return NSLocalizedString("recommended.updateApp.subtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Voornaam
      ///
      /// Locales: en, nl
      static func verifierResultIdentityFirstname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.identity.firstname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.identity.firstname"
        }

        return NSLocalizedString("verifier.result.identity.firstname", bundle: bundle, comment: "")
      }

      /// nl translation: Voorwaarden voor gebruik
      ///
      /// Locales: en, nl
      static func verifierConsentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.consent.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.consent.title"
        }

        return NSLocalizedString("verifier.consent.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vorige QR-code
      ///
      /// Locales: en, nl
      static func holderShowqrPreviousbutton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.previousbutton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.previousbutton"
        }

        return NSLocalizedString("holder.showqr.previousbutton", bundle: bundle, comment: "")
      }

      /// nl translation: Vraag de bezoeker een QR-code van een coronabewijs te laten zien.
      ///
      /// Locales: en, nl
      static func verifierResultAlertUnknownMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.alert.unknown.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.alert.unknown.message"
        }

        return NSLocalizedString("verifier.result.alert.unknown.message", bundle: bundle, comment: "")
      }

      /// nl translation: Vraag je coronabewijs aan bij je zorgverlener
      ///
      /// Locales: en, nl
      static func holder_contactProviderHelpdesk_vaccinationFlow_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactProviderHelpdesk_vaccinationFlow_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactProviderHelpdesk_vaccinationFlow_title"
        }

        return NSLocalizedString("holder_contactProviderHelpdesk_vaccinationFlow_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vraag je coronabewijs aan via de GGD
      ///
      /// Locales: en, nl
      static func holder_contactProviderHelpdesk_testFlow_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactProviderHelpdesk_testFlow_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactProviderHelpdesk_testFlow_title"
        }

        return NSLocalizedString("holder_contactProviderHelpdesk_testFlow_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vraag je coronabewijs aan via de helpdesk
      ///
      /// Locales: en, nl
      static func holder_contactCoronaCheckHelpdesk_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_contactCoronaCheckHelpdesk_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_contactCoronaCheckHelpdesk_title"
        }

        return NSLocalizedString("holder_contactCoronaCheckHelpdesk_title", bundle: bundle, comment: "")
      }

      /// nl translation: Vraag naar de Nederlandse QR-code
      ///
      /// Locales: en, nl
      static func verifierResultAlertDccTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.alert.dcc.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.alert.dcc.title"
        }

        return NSLocalizedString("verifier.result.alert.dcc.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vul de lettercombinatie in die je samen met het papieren bewijs hebt gekregen.
      ///
      /// Locales: en, nl
      static func holderDcctokenentryHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.header"
        }

        return NSLocalizedString("holder.dcctokenentry.header", bundle: bundle, comment: "")
      }

      /// nl translation: Vul hier je beoordelingscode in
      ///
      /// Locales: en, nl
      static func visitorpass_code_review_placeholder_screenreader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_review_placeholder_screenreader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_review_placeholder_screenreader"
        }

        return NSLocalizedString("visitorpass_code_review_placeholder_screenreader", bundle: bundle, comment: "")
      }

      /// nl translation: Vul hier je lettercombinatie in
      ///
      /// Locales: en, nl
      static func holderDcctokenentryTokenFieldPlaceholderScreenreader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.tokenField.placeholder.screenreader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.tokenField.placeholder.screenreader"
        }

        return NSLocalizedString("holder.dcctokenentry.tokenField.placeholder.screenreader", bundle: bundle, comment: "")
      }

      /// nl translation: Vul hier je ophaalcode in
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowTokenPlaceholderScreenreader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.token.placeholder.screenreader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.token.placeholder.screenreader"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.token.placeholder.screenreader", bundle: bundle, comment: "")
      }

      /// nl translation: Vul hier je ophaalcode in
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowTokenPlaceholderScreenreader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.token.placeholder.screenreader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.token.placeholder.screenreader"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.token.placeholder.screenreader", bundle: bundle, comment: "")
      }

      /// nl translation: Vul je beoordelingscode in. Deze heb je van de balie gekregen waar jouw vaccinatie werd beoordeeld.
      ///
      /// Locales: en, nl
      static func visitorpass_code_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_description"
        }

        return NSLocalizedString("visitorpass_code_description", bundle: bundle, comment: "")
      }

      /// nl translation: Vul je lettercombinatie in
      ///
      /// Locales: en, nl
      static func holderDcctokenentryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcctokenentry.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcctokenentry.title"
        }

        return NSLocalizedString("holder.dcctokenentry.title", bundle: bundle, comment: "")
      }

      /// nl translation: Vul je ophaalcode in
      ///
      /// Locales: en, nl
      static func holder_wasUserTestedAtGGD_no_buttonSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_wasUserTestedAtGGD_no_buttonSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_wasUserTestedAtGGD_no_buttonSubtitle"
        }

        return NSLocalizedString("holder_wasUserTestedAtGGD_no_buttonSubtitle", bundle: bundle, comment: "")
      }

      /// nl translation: Vul je verificatiecode in. Deze krijg je via sms of e-mail.
      ///
      /// Locales: en, nl
      static func visitorpass_code_description_deeplink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visitorpass_code_description_deeplink", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visitorpass_code_description_deeplink"
        }

        return NSLocalizedString("visitorpass_code_description_deeplink", bundle: bundle, comment: "")
      }

      /// nl translation: Vul jouw ophaalcode in. Deze heb je van je testlocatie gekregen.
      ///
      /// Locales: en, nl
      static func holderTokenentryRegularflowText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.regularflow.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.regularflow.text"
        }

        return NSLocalizedString("holder.tokenentry.regularflow.text", bundle: bundle, comment: "")
      }

      /// nl translation: Vul jouw verificatiecode in om je negatieve testuitslag op te halen.
      ///
      /// Locales: en, nl
      static func holderTokenentryUniversallinkflowText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenentry.universallinkflow.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenentry.universallinkflow.text"
        }

        return NSLocalizedString("holder.tokenentry.universallinkflow.text", bundle: bundle, comment: "")
      }

      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static func holderLocationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.location.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.location.title"
        }

        return NSLocalizedString("holder.location.title", bundle: bundle, comment: "")
      }

      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static func holderProviderHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.provider.header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.provider.header"
        }

        return NSLocalizedString("holder.provider.header", bundle: bundle, comment: "")
      }

      /// nl translation: Waar ben je getest?
      ///
      /// Locales: en, nl
      static func holder_whereUserTested_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_whereUserTested_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_whereUserTested_title"
        }

        return NSLocalizedString("holder_whereUserTested_title", bundle: bundle, comment: "")
      }

      /// nl translation: Waar ben je gevaccineerd?
      ///
      /// Locales: en, nl
      static func holder_chooseEventLocation_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_chooseEventLocation_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_chooseEventLocation_title"
        }

        return NSLocalizedString("holder_chooseEventLocation_title", bundle: bundle, comment: "")
      }

      /// nl translation: Waar moet ik op letten?
      ///
      /// Locales: en, nl
      static func verifierScanButtonMoreInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.button.moreInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.button.moreInformation"
        }

        return NSLocalizedString("verifier.scan.button.moreInformation", bundle: bundle, comment: "")
      }

      /// nl translation: Waar moet ik op letten?
      ///
      /// Locales: en, nl
      static func verifierStartButtonShowinstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.start.button.showinstructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.start.button.showinstructions"
        }

        return NSLocalizedString("verifier.start.button.showinstructions", bundle: bundle, comment: "")
      }

      /// nl translation: Waarom moet ik kiezen?
      ///
      /// Locales: en, nl
      static func holder_identitySelection_why(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_why", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_why"
        }

        return NSLocalizedString("holder_identitySelection_why", bundle: bundle, comment: "")
      }

      /// nl translation: Waarom moet ik één naam kiezen?
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_why_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_why_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_why_title"
        }

        return NSLocalizedString("holder_fuzzyMatching_why_title", bundle: bundle, comment: "")
      }

      /// nl translation: Wat betekent dit?
      ///
      /// Locales: en, nl
      static func holder_qr_code_hidden_explanation_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_hidden_explanation_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_hidden_explanation_button"
        }

        return NSLocalizedString("holder_qr_code_hidden_explanation_button", bundle: bundle, comment: "")
      }

      /// nl translation: Wat kan ik doen?
      ///
      /// Locales: en, nl
      static func verifierDeniedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.denied.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.denied.title"
        }

        return NSLocalizedString("verifier.denied.title", bundle: bundle, comment: "")
      }

      /// nl translation: Wat kan ik doen?
      ///
      /// Locales: en, nl
      static func verifierResultDeniedReadmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.result.denied.readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.result.denied.readmore"
        }

        return NSLocalizedString("verifier.result.denied.readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Wat wil je toevoegen?
      ///
      /// Locales: en, nl
      static func holderChooseqrcodetypeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.chooseqrcodetype.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.chooseqrcodetype.title"
        }

        return NSLocalizedString("holder.chooseqrcodetype.title", bundle: bundle, comment: "")
      }

      /// nl translation: We konden geen herstelbewijs maken
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateNoRecoveryButDosisCorrection_title", bundle: bundle, comment: "")
      }

      /// nl translation: We kunnen geen bewijs maken
      ///
      /// Locales: en, nl
      static func holder_listRemoteEvents_endStateCantCreateCertificate_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_listRemoteEvents_endStateCantCreateCertificate_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_listRemoteEvents_endStateCantCreateCertificate_title"
        }

        return NSLocalizedString("holder_listRemoteEvents_endStateCantCreateCertificate_title", bundle: bundle, comment: "")
      }

      /// nl translation: We starten de app voor je op...
      ///
      /// Locales: en, nl
      static func holderLaunchText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.launch.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.launch.text"
        }

        return NSLocalizedString("holder.launch.text", bundle: bundle, comment: "")
      }

      /// nl translation: We starten de app voor je op...
      ///
      /// Locales: en, nl
      static func verifierLaunchText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.launch.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.launch.text"
        }

        return NSLocalizedString("verifier.launch.text", bundle: bundle, comment: "")
      }

      /// nl translation: Weet je zeker dat je de instelling wilt aanpassen?
      ///
      /// Locales: en, nl
      static func verifier_risksetting_confirmation_dialog_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_confirmation_dialog_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_confirmation_dialog_title"
        }

        return NSLocalizedString("verifier_risksetting_confirmation_dialog_title", bundle: bundle, comment: "")
      }

      /// nl translation: Weet je zeker dat je terug wilt?
      ///
      /// Locales: en, nl
      static func holderTestresultsAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.testresults.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.testresults.alert.title"
        }

        return NSLocalizedString("holder.testresults.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Weet je zeker dat je terug wilt?
      ///
      /// Locales: en, nl
      static func holderVaccinationAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.vaccination.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.vaccination.alert.title"
        }

        return NSLocalizedString("holder.vaccination.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Weet je zeker dat je wilt overslaan?
      ///
      /// Locales: en, nl
      static func holder_identitySelection_skipAlert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_skipAlert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_skipAlert_title"
        }

        return NSLocalizedString("holder_identitySelection_skipAlert_title", bundle: bundle, comment: "")
      }

      /// nl translation: Welk bewijs is nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static func holderDashboardEmptyInternationalButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.empty.international.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.empty.international.button"
        }

        return NSLocalizedString("holder.dashboard.empty.international.button", bundle: bundle, comment: "")
      }

      /// nl translation: Welk bewijs is nodig op mijn bestemming?
      ///
      /// Locales: en, nl
      static func holderDashboardIntroInternationalButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.intro.international.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.intro.international.button"
        }

        return NSLocalizedString("holder.dashboard.intro.international.button", bundle: bundle, comment: "")
      }

      /// nl translation: Welk soort toegang mag ik geven?
      ///
      /// Locales: en, nl
      static func verifier_risksetting_readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_readmore"
        }

        return NSLocalizedString("verifier_risksetting_readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Welk soort toegang mag ik geven?
      ///
      /// Locales: en, nl
      static func verifier_risksetting_start_readmore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_start_readmore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_start_readmore"
        }

        return NSLocalizedString("verifier_risksetting_start_readmore", bundle: bundle, comment: "")
      }

      /// nl translation: Welke bewijzen kan ik inscannen?
      ///
      /// Locales: en, nl
      static func holder_paperproof_startscanning_button_whichProofs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_startscanning_button_whichProofs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_startscanning_button_whichProofs"
        }

        return NSLocalizedString("holder_paperproof_startscanning_button_whichProofs", bundle: bundle, comment: "")
      }

      /// nl translation: Welke bewijzen kan ik inscannen?
      ///
      /// Locales: en, nl
      static func holder_paperproof_whichProofsCanBeUsed_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_paperproof_whichProofsCanBeUsed_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_paperproof_whichProofsCanBeUsed_title"
        }

        return NSLocalizedString("holder_paperproof_whichProofsCanBeUsed_title", bundle: bundle, comment: "")
      }

      /// nl translation: Welke naam kies je?
      ///
      /// Locales: en, nl
      static func holder_identitySelection_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_identitySelection_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_identitySelection_title"
        }

        return NSLocalizedString("holder_identitySelection_title", bundle: bundle, comment: "")
      }

      /// nl translation: Wil je de app resetten?
      ///
      /// Locales: en, nl
      static func holderCleardataAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.cleardata.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.cleardata.alert.title"
        }

        return NSLocalizedString("holder.cleardata.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Wil je je bewijs vervangen?
      ///
      /// Locales: en, nl
      static func holderEventIdentityAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.identity.alert.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.identity.alert.title"
        }

        return NSLocalizedString("holder.event.identity.alert.title", bundle: bundle, comment: "")
      }

      /// nl translation: Wil je jouw testuitslag ophalen? Log dan opnieuw in met DigiD.
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_digid_message_testFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_digid_message_testFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_digid_message_testFlow"
        }

        return NSLocalizedString("holder_authentication_popup_digid_message_testFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Wil je jouw vaccinatiegegevens ophalen? Log dan opnieuw in met DigiD.
      ///
      /// Locales: en, nl
      static func holder_authentication_popup_digid_message_vaccinationFlow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_authentication_popup_digid_message_vaccinationFlow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_authentication_popup_digid_message_vaccinationFlow"
        }

        return NSLocalizedString("holder_authentication_popup_digid_message_vaccinationFlow", bundle: bundle, comment: "")
      }

      /// nl translation: Wil je verwijderde vaccinaties of testuitslagen terug? Laat je naam herschrijven door de plek waar je die vaccinatie of test hebt gehad.
      ///
      /// Locales: en, nl
      static func holder_fuzzyMatching_onboarding_thirdPage_body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_body", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_fuzzyMatching_onboarding_thirdPage_body"
        }

        return NSLocalizedString("holder_fuzzyMatching_onboarding_thirdPage_body", bundle: bundle, comment: "")
      }

      /// nl translation: Woon je in Nederland en heb je een Nederlands identiteitsbewijs? Dan kun je een DigiD aanvragen om je testuitslag of vaccinatiegegevens op te halen.
      ///
      /// Locales: en, nl
      static func holder_noDigiD_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_message"
        }

        return NSLocalizedString("holder_noDigiD_message", bundle: bundle, comment: "")
      }

      /// nl translation: Wordt automatisch geldig
      ///
      /// Locales: en, nl
      static func holderDashboardQrValidityDateAutomaticallyBecomesValidOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.validityDate.automaticallyBecomesValidOn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.validityDate.automaticallyBecomesValidOn"
        }

        return NSLocalizedString("holder.dashboard.qr.validityDate.automaticallyBecomesValidOn", bundle: bundle, comment: "")
      }

      /// nl translation: Zet de zaklamp aan.
      ///
      /// Locales: en, nl
      static func holderTokenscanTorchEnable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenscan.torch.enable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenscan.torch.enable"
        }

        return NSLocalizedString("holder.tokenscan.torch.enable", bundle: bundle, comment: "")
      }

      /// nl translation: Zet de zaklamp aan.
      ///
      /// Locales: en, nl
      static func verifierScanTorchEnable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.torch.enable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.torch.enable"
        }

        return NSLocalizedString("verifier.scan.torch.enable", bundle: bundle, comment: "")
      }

      /// nl translation: Zet de zaklamp uit.
      ///
      /// Locales: en, nl
      static func holderTokenscanTorchDisable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.tokenscan.torch.disable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.tokenscan.torch.disable"
        }

        return NSLocalizedString("holder.tokenscan.torch.disable", bundle: bundle, comment: "")
      }

      /// nl translation: Zet de zaklamp uit.
      ///
      /// Locales: en, nl
      static func verifierScanTorchDisable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.scan.torch.disable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.scan.torch.disable"
        }

        return NSLocalizedString("verifier.scan.torch.disable", bundle: bundle, comment: "")
      }

      /// nl translation: Zie je een vinkje op je scherm? Dan is de QR-code geldig en kloppen de gegevens met het identiteitsbewijs. Je mag de bezoeker toegang geven.
      ///
      /// Locales: en, nl
      static func scan_instructions_4_description_1G(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_instructions_4_description_1G", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_instructions_4_description_1G"
        }

        return NSLocalizedString("scan_instructions_4_description_1G", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekte waarvan hersteld / Disease recovered from:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutRecoveryPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.recovery.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.recovery.pathogen"
        }

        return NSLocalizedString("holder.showqr.eu.about.recovery.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekte waarvan hersteld:
      ///
      /// Locales: en, nl
      static func holderDccRecoveryPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.recovery.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.recovery.pathogen"
        }

        return NSLocalizedString("holder.dcc.recovery.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekteverwekker / Disease targeted:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.pathogen"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekteverwekker / Disease targeted:
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutVaccinationPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.vaccination.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.vaccination.pathogen"
        }

        return NSLocalizedString("holder.showqr.eu.about.vaccination.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static func holderDccTestPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.test.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.test.pathogen"
        }

        return NSLocalizedString("holder.dcc.test.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static func holderDccVaccinationPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dcc.vaccination.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dcc.vaccination.pathogen"
        }

        return NSLocalizedString("holder.dcc.vaccination.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Ziekteverwekker:
      ///
      /// Locales: en, nl
      static func holderEventAboutVaccinationPathogen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.event.about.vaccination.pathogen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.event.about.vaccination.pathogen"
        }

        return NSLocalizedString("holder.event.about.vaccination.pathogen", bundle: bundle, comment: "")
      }

      /// nl translation: Zijn dit al je vaccinaties?
      ///
      /// Locales: en, nl
      static func holderErrorstateSomeresultTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.someresult.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.someresult.title"
        }

        return NSLocalizedString("holder.errorstate.someresult.title", bundle: bundle, comment: "")
      }

      /// nl translation: Zo gebruikt de app jouw gegevens
      ///
      /// Locales: en, nl
      static func holderConsentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.consent.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.consent.title"
        }

        return NSLocalizedString("holder.consent.title", bundle: bundle, comment: "")
      }

      /// nl translation: Zonder akkoord met de bijgewerkte voorwaarden heb je geen toegang tot de CoronaCheck-app.
      ///
      /// Locales: en, nl
      static func newTermsErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new.terms.error.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new.terms.error.message"
        }

        return NSLocalizedString("new.terms.error.message", bundle: bundle, comment: "")
      }

      /// nl translation: bezoekersbewijs
      ///
      /// Locales: en, nl
      static func general_visitorPass(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_visitorPass", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_visitorPass"
        }

        return NSLocalizedString("general_visitorPass", bundle: bundle, comment: "")
      }

      /// nl translation: doses
      ///
      /// Locales: en, nl
      static func generalDoses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.doses", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.doses"
        }

        return NSLocalizedString("general.doses", bundle: bundle, comment: "")
      }

      /// nl translation: dosis
      ///
      /// Locales: en, nl
      static func generalDose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.dose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.dose"
        }

        return NSLocalizedString("general.dose", bundle: bundle, comment: "")
      }

      /// nl translation: en
      ///
      /// Locales: en, nl
      static func general_and(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_and", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_and"
        }

        return NSLocalizedString("general_and", bundle: bundle, comment: "")
      }

      /// nl translation: geldig tot
      ///
      /// Locales: en, nl
      static func holderDashboardQrExpiryDatePrefixValidUptoAndIncluding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.expiryDate.prefix.validUptoAndIncluding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.expiryDate.prefix.validUptoAndIncluding"
        }

        return NSLocalizedString("holder.dashboard.qr.expiryDate.prefix.validUptoAndIncluding", bundle: bundle, comment: "")
      }

      /// nl translation: geldig vanaf
      ///
      /// Locales: en, nl
      static func holderDashboardQrValidityDatePrefixValidFrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.validityDate.prefix.validFrom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.validityDate.prefix.validFrom"
        }

        return NSLocalizedString("holder.dashboard.qr.validityDate.prefix.validFrom", bundle: bundle, comment: "")
      }

      /// nl translation: gescande QR-code
      ///
      /// Locales: en, nl
      static func general_scannedQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_scannedQRCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_scannedQRCode"
        }

        return NSLocalizedString("general_scannedQRCode", bundle: bundle, comment: "")
      }

      /// nl translation: herstelbewijs
      ///
      /// Locales: en, nl
      static func general_recoverycertificate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_recoverycertificate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_recoverycertificate"
        }

        return NSLocalizedString("general_recoverycertificate", bundle: bundle, comment: "")
      }

      /// nl translation: hersteldatum
      ///
      /// Locales: en, nl
      static func generalRecoverydate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.recoverydate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.recoverydate"
        }

        return NSLocalizedString("general.recoverydate", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/alleen-internationaal
      ///
      /// Locales: en, nl
      static func holder_dashboard_noDomesticCertificatesBanner_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_noDomesticCertificatesBanner_url"
        }

        return NSLocalizedString("holder_dashboard_noDomesticCertificatesBanner_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/app/niet-in-gebruik
      ///
      /// Locales: en, nl
      static func holder_deactivation_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_deactivation_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_deactivation_url"
        }

        return NSLocalizedString("holder_deactivation_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/accessibility-in-app
      ///
      /// Locales: en, nl
      static func holderUrlAccessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.url.accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.url.accessibility"
        }

        return NSLocalizedString("holder.url.accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/accessibility-in-app
      ///
      /// Locales: en, nl
      static func verifierUrlAccessibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.url.accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.url.accessibility"
        }

        return NSLocalizedString("verifier.url.accessibility", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/colofon-in-app.html
      ///
      /// Locales: en, nl
      static func holderUrlColophon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.url.colophon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.url.colophon"
        }

        return NSLocalizedString("holder.url.colophon", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/faq-in-app
      ///
      /// Locales: en, nl
      static func holderUrlFaq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.url.faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.url.faq"
        }

        return NSLocalizedString("holder.url.faq", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/faq-scanner-in-app
      ///
      /// Locales: en, nl
      static func verifierUrlFaq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.url.faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.url.faq"
        }

        return NSLocalizedString("verifier.url.faq", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/faq/1-11-mijn-qr-code-is-verborgen-wat-betekent-dit/
      ///
      /// Locales: en, nl
      static func holder_qr_code_hidden_explanation_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_hidden_explanation_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_hidden_explanation_url"
        }

        return NSLocalizedString("holder_qr_code_hidden_explanation_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/gebruikersvoorwaarden-in-app
      ///
      /// Locales: en, nl
      static func verifierUrlPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier.url.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier.url.privacy"
        }

        return NSLocalizedString("verifier.url.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/privacy
      ///
      /// Locales: en, nl
      static func holder_storedEvents_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_storedEvents_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_storedEvents_url"
        }

        return NSLocalizedString("holder_storedEvents_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/privacy-in-app
      ///
      /// Locales: en, nl
      static func holderUrlPrivacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.url.privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.url.privacy"
        }

        return NSLocalizedString("holder.url.privacy", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/nl/testafspraak-in-app
      ///
      /// Locales: en, nl
      static func holderUrlAppointment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.url.appointment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.url.appointment"
        }

        return NSLocalizedString("holder.url.appointment", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/scanner/niet-in-gebruik
      ///
      /// Locales: en, nl
      static func verifier_deactivation_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_deactivation_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_deactivation_url"
        }

        return NSLocalizedString("verifier_deactivation_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/toegangsregels/1g-bewijs
      ///
      /// Locales: en, nl
      static func holder_dashboard_only1GaccessBanner_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_only1GaccessBanner_link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_only1GaccessBanner_link"
        }

        return NSLocalizedString("holder_dashboard_only1GaccessBanner_link", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/toegangsregels/3g-1g-bewijs
      ///
      /// Locales: en, nl
      static func holder_dashboard_3Gand1GaccessBanner_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_3Gand1GaccessBanner_link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_3Gand1GaccessBanner_link"
        }

        return NSLocalizedString("holder_dashboard_3Gand1GaccessBanner_link", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/toegangsregels/3g-bewijs
      ///
      /// Locales: en, nl
      static func holder_dashboard_only3GaccessBanner_link(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_dashboard_only3GaccessBanner_link", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_dashboard_only3GaccessBanner_link"
        }

        return NSLocalizedString("holder_dashboard_only3GaccessBanner_link", bundle: bundle, comment: "")
      }

      /// nl translation: https://coronacheck.nl/welketoegang-cc
      ///
      /// Locales: en, nl
      static func verifier_risksetting_start_readmore_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_start_readmore_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_start_readmore_url"
        }

        return NSLocalizedString("verifier_risksetting_start_readmore_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://status.coronacheck.nl/
      ///
      /// Locales: en, nl
      static func holderErrorstateMalfunctionsUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.errorstate.malfunctions.url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.errorstate.malfunctions.url"
        }

        return NSLocalizedString("holder.errorstate.malfunctions.url", bundle: bundle, comment: "")
      }

      /// nl translation: https://www.coronacheck.nl/nl/faq/1-12-de-qr-code-van-mijn-vaccinatie-is-verlopen-wat-moet-ik-doen/
      ///
      /// Locales: en, nl
      static func holder_qr_code_expired_explanation_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_qr_code_expired_explanation_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_qr_code_expired_explanation_url"
        }

        return NSLocalizedString("holder_qr_code_expired_explanation_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://www.digid.nl/digid-aanvragen-activeren#hoe-vraag-ik-digid-aan
      ///
      /// Locales: en, nl
      static func holder_noDigiD_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_noDigiD_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_noDigiD_url"
        }

        return NSLocalizedString("holder_noDigiD_url", bundle: bundle, comment: "")
      }

      /// nl translation: https://www.nederlandwereldwijd.nl/reizen/reisadviezen
      ///
      /// Locales: en, nl
      static func holderDashboardEmptyInternationalUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.empty.international.url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.empty.international.url"
        }

        return NSLocalizedString("holder.dashboard.empty.international.url", bundle: bundle, comment: "")
      }

      /// nl translation: https://www.nederlandwereldwijd.nl/reizen/reisadviezen
      ///
      /// Locales: en, nl
      static func holderDashboardIntroInternationalUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.intro.international.url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.intro.international.url"
        }

        return NSLocalizedString("holder.dashboard.intro.international.url", bundle: bundle, comment: "")
      }

      /// nl translation: https://www.rijksoverheid.nl/welketoegang-cc
      ///
      /// Locales: en, nl
      static func verifier_risksetting_readmore_url(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verifier_risksetting_readmore_url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verifier_risksetting_readmore_url"
        }

        return NSLocalizedString("verifier_risksetting_readmore_url", bundle: bundle, comment: "")
      }

      /// nl translation: ja
      ///
      /// Locales: en, nl
      static func holder_eventdetails_vaccinationStatus_complete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_eventdetails_vaccinationStatus_complete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_eventdetails_vaccinationStatus_complete"
        }

        return NSLocalizedString("holder_eventdetails_vaccinationStatus_complete", bundle: bundle, comment: "")
      }

      /// nl translation: ja (eerder corona gehad)
      ///
      /// Locales: en, nl
      static func holder_eventdetails_vaccinationStatus_recovery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_eventdetails_vaccinationStatus_recovery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_eventdetails_vaccinationStatus_recovery"
        }

        return NSLocalizedString("holder_eventdetails_vaccinationStatus_recovery", bundle: bundle, comment: "")
      }

      /// nl translation: ja (ergens anders gevaccineerd)
      ///
      /// Locales: en, nl
      static func holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere"
        }

        return NSLocalizedString("holder_eventdetails_vaccinationStatus_firstVaccinationElsewhere", bundle: bundle, comment: "")
      }

      /// nl translation: min
      ///
      /// Locales: en, nl
      static func holderDashboardQrMinute(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.minute", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.minute"
        }

        return NSLocalizedString("holder.dashboard.qr.minute", bundle: bundle, comment: "")
      }

      /// nl translation: minuten
      ///
      /// Locales: en, nl
      static func holderDashboardQrMinutesLong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.minutes.long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.minutes.long"
        }

        return NSLocalizedString("holder.dashboard.qr.minutes.long", bundle: bundle, comment: "")
      }

      /// nl translation: minuut
      ///
      /// Locales: en, nl
      static func holderDashboardQrMinuteLong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.minute.long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.minute.long"
        }

        return NSLocalizedString("holder.dashboard.qr.minute.long", bundle: bundle, comment: "")
      }

      /// nl translation: negatief (geen coronavirus vastgesteld)
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestNegativeSingleLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.negative.singleLanguage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.negative.singleLanguage"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.negative.singleLanguage", bundle: bundle, comment: "")
      }

      /// nl translation: negatief (geen coronavirus vastgesteld) / negative (no coronavirus detected)
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestNegative(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.negative", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.negative"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.negative", bundle: bundle, comment: "")
      }

      /// nl translation: nu
      ///
      /// Locales: en, nl
      static func scan_log_list_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scan_log_list_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scan_log_list_now"
        }

        return NSLocalizedString("scan_log_list_now", bundle: bundle, comment: "")
      }

      /// nl translation: opgehaalde gegevens
      ///
      /// Locales: en, nl
      static func general_retrievedDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_retrievedDetails", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_retrievedDetails"
        }

        return NSLocalizedString("general_retrievedDetails", bundle: bundle, comment: "")
      }

      /// nl translation: papieren bewijs
      ///
      /// Locales: en, nl
      static func generalPaperflow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.paperflow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.paperflow"
        }

        return NSLocalizedString("general.paperflow", bundle: bundle, comment: "")
      }

      /// nl translation: positief (coronavirus vastgesteld)
      ///
      /// Locales: en, nl
      static func holderShowqrEuAboutTestPostive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.showqr.eu.about.test.postive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.showqr.eu.about.test.postive"
        }

        return NSLocalizedString("holder.showqr.eu.about.test.postive", bundle: bundle, comment: "")
      }

      /// nl translation: positieve test
      ///
      /// Locales: en, nl
      static func generalPositiveTest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.positiveTest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.positiveTest"
        }

        return NSLocalizedString("general.positiveTest", bundle: bundle, comment: "")
      }

      /// nl translation: testbewijs
      ///
      /// Locales: en, nl
      static func general_testcertificate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_testcertificate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_testcertificate"
        }

        return NSLocalizedString("general_testcertificate", bundle: bundle, comment: "")
      }

      /// nl translation: testuitslag
      ///
      /// Locales: en, nl
      static func general_testresult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_testresult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_testresult"
        }

        return NSLocalizedString("general_testresult", bundle: bundle, comment: "")
      }

      /// nl translation: tot
      ///
      /// Locales: en, nl
      static func generalUptoandincluding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.uptoandincluding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.uptoandincluding"
        }

        return NSLocalizedString("general.uptoandincluding", bundle: bundle, comment: "")
      }

      /// nl translation: uur
      ///
      /// Locales: en, nl
      static func holderDashboardQrHour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.hour"
        }

        return NSLocalizedString("holder.dashboard.qr.hour", bundle: bundle, comment: "")
      }

      /// nl translation: vaccinatie
      ///
      /// Locales: en, nl
      static func general_vaccination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_vaccination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccination"
        }

        return NSLocalizedString("general_vaccination", bundle: bundle, comment: "")
      }

      /// nl translation: vaccinatiebeoordeling
      ///
      /// Locales: en, nl
      static func general_vaccinationAssessment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_vaccinationAssessment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccinationAssessment"
        }

        return NSLocalizedString("general_vaccinationAssessment", bundle: bundle, comment: "")
      }

      /// nl translation: vaccinatiebewijs
      ///
      /// Locales: en, nl
      static func general_vaccinationcertificate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general_vaccinationcertificate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general_vaccinationcertificate"
        }

        return NSLocalizedString("general_vaccinationcertificate", bundle: bundle, comment: "")
      }

      /// nl translation: wordt automatisch geldig over
      ///
      /// Locales: en, nl
      static func holderDashboardQrValidityDatePrefixAutomaticallyBecomesValidOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("holder.dashboard.qr.validityDate.prefix.automaticallyBecomesValidOn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "holder.dashboard.qr.validityDate.prefix.automaticallyBecomesValidOn"
        }

        return NSLocalizedString("holder.dashboard.qr.validityDate.prefix.automaticallyBecomesValidOn", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
