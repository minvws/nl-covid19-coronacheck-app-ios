# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # -- TESTING -- 

  desc "Run tests for integration purposes"
  lane :test_ci do
    run_tests(
      app_name: "CTR",
      device: "iPhone 14",
      project: "CTR.xcodeproj",
      scheme: "Holder Dev",
      reinstall_app: true,
      app_identifier: "nl.rijksoverheid.ctr.dev",
      skip_slack: true
    )
  end

  # -- SMOKETEST UI -- 

  desc "Run Holder UI Smoketests"
  lane :smoketest_ui do
    run_tests(
      app_name: "CTR",
      device: "iPhone 14",
      project: "CTR.xcodeproj",
      scheme: "Holder UI Smoketests",
      reinstall_app: true,
      fail_build: true,
      reset_simulator: true,
      number_of_retries: 1,
      disable_slide_to_type: true,
      app_identifier: "nl.rijksoverheid.ctr.dev",
      only_testing: "HolderUISmoketests/VaccinationSmoke/test_vacP1",
      skip_slack: true,
      result_bundle: true
    )
  end

  # -- TEST UI -- 

  desc "Run Holder UI Tests"
  lane :test_ui do
    run_tests(
      app_name: "CTR",
      device: "iPhone 14",
      project: "CTR.xcodeproj",
      scheme: "Holder UI Tests",
      reinstall_app: true,
      fail_build: true,
      reset_simulator: true,
      number_of_retries: 1,
      disable_slide_to_type: true,
      app_identifier: "nl.rijksoverheid.ctr.dev",
      skip_slack: true,
      result_bundle: true
    )
  end

  # -- TestFlight --

  desc "Build and ship the Holder app to TestFlight"
  lane :ship_holder_to_testflight do
    ship_to_testflight(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_AppStore.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Holder",
      schemename:  "Holder AppStore",
      configuration: "AppStore",
      provisioningprofilename: "CoronaCheck Holder AppStore",
      bundleid: "nl.rijksoverheid.ctr"
    )
  end

  desc "Build and ship the Verifier app to TestFlight"
  lane :ship_verifier_to_testflight do
    ship_to_testflight(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_AppStore.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Verifier",
      schemename:  "Verifier AppStore",
      configuration: "AppStore",
      provisioningprofilename: "CoronaCheck Verifier AppStore",
      bundleid: "nl.rijksoverheid.ctr.verifier"
    )
  end

  desc "Builds and uploads to Testflight from CI"
  private_lane :ship_to_testflight do |options|

    ENV["TESTFLIGHT_DEPLOY"] = "true"

    api_key = app_store_connect_api_key(
      key_id: ENV['APP_STORE_API_KEY_ID'],
      issuer_id: ENV["APP_STORE_API_KEY_ISSUER"],
      key_filepath: "appstore-apikey.p8",
      duration: 1200,
    )
    
     # unwrap options:
     provisioning_profile_path =   options[:provisioning_profile_path]
     xcodeproj =                   options[:xcodeproj]
     targetname =                  options[:targetname]
     schemename =                  options[:schemename]
     configuration =               options[:configuration]
     provisioningprofilename =     options[:provisioningprofilename]
     bundleid =                    options[:bundleid]                 
 
     # Prepare:
     setup_ci(provider: "travis", force: true)
     prepare_certificate
     install_provisioning_profile(path: provisioning_profile_path)
     
     # Version/Build number
     version = get_version_number(xcodeproj: xcodeproj, target: targetname, configuration: configuration)
     build_number = determine_build_number()
     increment_build_number(build_number: build_number, xcodeproj: xcodeproj)
     
     # Build:
     build_ios_app(
       scheme: schemename,
       configuration: configuration,
       export_options: {
         provisioningProfiles: {
           bundleid => provisioningprofilename
         }
       }
     )

     upload_to_testflight(skip_submission: true)

     inform_slack(
      default_payloads: [:git_author],
      message: "[TESTFLIGHT] :apple: Successfully distributed iOS #{schemename} app build #{version} (#{build_number}) to TestFlight :rocket:",
    )

  end 


  # -- DEPLOYING -- 

  desc "Build and deploy the Holder app for Test via Firebase from CI"
  lane :deploy_holder_test_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Test.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Holder",
      schemename:  "Holder Test",
      configuration: "FirebaseTest",
      provisioningprofilename: "CoronaCheck Holder Test",
      bundleid: "nl.rijksoverheid.ctr.test",
      firebaseappid: "1:168257592968:ios:fdf9202f0c3e579b26493d",
      firebasegroupscsv: "testers"
    )
  end

  desc "Build and deploy the Verifier app for Test via Firebase from CI"
  lane :deploy_verifier_test_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Test.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Verifier",
      schemename:  "Verifier Test",
      configuration: "FirebaseTest",
      provisioningprofilename: "CoronaCheck Verifier Test",
      bundleid: "nl.rijksoverheid.ctr.verifier.test",
      firebaseappid: "1:168257592968:ios:cb0aec1f7163acbe26493d",
      firebasegroupscsv: "verifiers"
    )
  end

  desc "Build and deploy the Holder app for Acc via Firebase from CI"
  lane :deploy_holder_acc_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Acc.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Holder",
      schemename:  "Holder Acceptance",
      configuration: "FirebaseAcceptance",
      provisioningprofilename: "CoronaCheck Holder Acc",
      bundleid: "nl.rijksoverheid.ctr.acc",
      firebaseappid: "1:168257592968:ios:e39aba89b3caf97626493d",
      firebasegroupscsv: "testers"
    )
  end

  desc "Build and deploy the Verifier app for Acc via Firebase from CI"
  lane :deploy_verifier_acc_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Acc.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Verifier",
      schemename:  "Verifier Acceptance",
      configuration: "FirebaseAcceptance",
      provisioningprofilename: "CoronaCheck Verifier Acc",
      bundleid: "nl.rijksoverheid.ctr.verifier.acc",
      firebaseappid: "1:168257592968:ios:e3402385406b0d9726493d",
      firebasegroupscsv: "verifiers"
    )
  end

  desc "Build and deploy the Holder app for Prod via Firebase from CI"
  lane :deploy_holder_prod_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Prod.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Holder",
      schemename:  "Holder Production",
      configuration: "FirebaseProduction",
      provisioningprofilename: "CoronaCheck Holder Prod",
      bundleid: "nl.rijksoverheid.ctr",
      firebaseappid: "1:168257592968:ios:e0498230630ed6a826493d",
      firebasegroupscsv: "testers"
    )
  end

  desc "Build and deploy the Verifier app for Prod via Firebase from CI"
  lane :deploy_verifier_prod_ci do
    deploy(
      provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Prod.mobileprovision",
      xcodeproj: "CTR.xcodeproj",
      targetname: "Verifier",
      schemename:  "Verifier Production",
      configuration: "FirebaseProduction",
      provisioningprofilename: "CoronaCheck Verifier Prod",
      bundleid: "nl.rijksoverheid.ctr.verifier",
      firebaseappid: "1:168257592968:ios:6a903add03edb4a126493d",
      firebasegroupscsv: "verifiers"
    )
  end

  # -- PRIVATE LANES --

  private_lane :deploy do |options|

    # unwrap options:
    provisioning_profile_path =   options[:provisioning_profile_path]
    xcodeproj =                   options[:xcodeproj]
    targetname =                  options[:targetname]
    schemename =                  options[:schemename]
    configuration =               options[:configuration]
    provisioningprofilename =     options[:provisioningprofilename]
    bundleid =                    options[:bundleid]
    firebase_app_id =             options[:firebaseappid]
    firebase_groups_csv =         options[:firebasegroupscsv]

    # Prepare:
    setup_ci(provider: "travis", force: true)
    prepare_certificate
    install_provisioning_profile(path: provisioning_profile_path)
    
    # Version/Build number
    version = get_version_number(xcodeproj: xcodeproj, target: targetname, configuration: configuration)
    build_number = determine_build_number()
    increment_build_number(build_number: build_number, xcodeproj: xcodeproj)
    
    shield(
      version: version,
      build: build_number,
      color: "blue"
    )

    # Build:
    build_ios_app(
      scheme: schemename,
      configuration: configuration,
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          bundleid => provisioningprofilename
        }
      }
    )

    # It's useful to see the originating git branch in Firebase release notes:
    gitbranch = ENV['GITBRANCH'].delete_prefix("refs/heads/")

    # Also useful to see the latest commit message, because often building from `main` anyway: 
    gitcommitmessage = `git log -1 --pretty=format:%B`

    if gitbranch == "main"
      releasenotes = "Latest commit: #{gitcommitmessage}"
    else
      releasenotes = "Branch '#{gitbranch}'\nLatest commit: '#{gitcommitmessage}'"
    end

    # Deploy to Firebase:
    firebase_app_distribution(
      app: firebase_app_id,
      groups: firebase_groups_csv,
      release_notes: releasenotes
    )
    
    inform_slack(
      default_payloads: [:git_author],
      message: "Successfully distributed iOS #{schemename} app beta build #{version} (#{build_number}) :rocket:",
    )
  end

  private_lane :prepare_certificate do
    import_certificate(
      certificate_path: ENV["CERTIFICATE_PATH"],
      certificate_password: ENV["CERTIFICATE_PASSWORD"],
      keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
      keychain_password: ""
    )
  end

  private_lane :determine_build_number do |options|
    number_of_commits(all: true)
  end

  private_lane :inform_slack do |options|
    unless ENV['SLACK_URL'].nil?
      slack(options)
    end
  end

  private_lane :shield do |options|
    add_badge(shield: "#{options[:version]}-#{options[:build]}-#{options[:color]}", no_badge: true)
  end
end

# We were seeing an issue where fastlane would leave a temporary keychain as the _default_ 
# macOS keychain, which caused all kinds of issues.
# This lane (running on `after_all` and `error`) will cleanup.
lane :remove_temp_keychain do
  begin 
    name = "fastlane_tmp_keychain"
    delete_keychain(
      name: name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
  rescue => ex
    puts(ex)
  end
end

after_all do |lane, options|
  remove_temp_keychain
end

error do |lane, exception, options|

  inform_slack(
    default_payloads: [:git_author],
    message: ":hot_face: FAIL to distribute iOS build for lane #{lane}, error: #{exception}",
    success: false
  )

  remove_temp_keychain
end