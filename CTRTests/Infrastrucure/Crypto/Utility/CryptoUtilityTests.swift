/*
 * Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 *  SPDX-License-Identifier: EUPL-1.2
 */

@testable import CTR
import XCTest

class CryptoUtilityTests: XCTestCase {
    
    var sut = CryptoUtility(signatureValidator: SignatureValidator())
    
    override func setUp() {
        
        super.setUp()
        sut = CryptoUtility(signatureValidator: SignatureValidator())
    }
    
    /// Test the signature 
    func testSignature() {
        
        // Given
        let data = "SomeData".data(using: .utf8)!
        let key = "SomeKey".data(using: .utf8)!
        
        // When
        let signature = sut.signature(forData: data, key: key)
        let hexBytes = signature.map { String(format: "%02hhx", $0) }
        
        // Then
        XCTAssertEqual("\(hexBytes.joined())", "a1118b1288eb8b20075f7b5d65d6809ad95f571856e3b831a43c39094f509beb")
    }
    
    let rootCertificateData = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURsVENDQW4yZ0F3SUJBZ0lVZmg1bXBLc25XdXJyVkZsK09mRkVHdHJFWHJBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1dqRXJNQ2tHQTFVRUF3d2lVM1JoWVhRZ1pHVnlJRTVsWkdWeWJHRnVaR1Z1SUZKdmIzUWdRMEVnTFNCSApNekVlTUJ3R0ExVUVDZ3dWVTNSaFlYUWdaR1Z5SUU1bFpHVnliR0Z1WkdWdU1Rc3dDUVlEVlFRR0V3Sk9UREFlCkZ3MHlNVEEyTWprd09EUTJORGxhRncweU1UQTNNamt3T0RRMk5EbGFNRm94S3pBcEJnTlZCQU1NSWxOMFlXRjAKSUdSbGNpQk9aV1JsY214aGJtUmxiaUJTYjI5MElFTkJJQzBnUnpNeEhqQWNCZ05WQkFvTUZWTjBZV0YwSUdSbApjaUJPWldSbGNteGhibVJsYmpFTE1Ba0dBMVVFQmhNQ1Rrd3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzlRWlJiRVNhb3h1NVJmVVFLSzlyOEtSNnJsUDhYNS9vZUtxSDVsa2UwdDRXVWcvNlAKYmFQcjMxS0Z3QWs1Wm5xd2NMWGI4d0lrcHpLelFWdmVybTVHMDUrRkE5V2RKRENBd3h5Z3hLTDZ4Z2o5ZTlmNwoyUHdZTVJtdU5IalhSaEwxK2ZNZk4wU0dkSVhJWFZHYVl1NWdwd3RaNnQ5aGRzaTdyY1hwbUlpRmg4WlZQU3FYCkZoNUx5UDdJYld1MWJTZU9iWlhZUjRLR0ZRZWthaWxDZUVjMWg1L1VQeFFZUWZzTlhQRW1wTFRGOU9JK0dwZXkKbGdaSVZONm15bm91Lzhhb3lVeVUzQlA3c2Flak93MVpZVCtuTDhUWEFUdlMrL3NCR3Z0bHAzeEY1RWM2TkhyaAp1aWQ0SnBxYzFEMWxOMDE3eDVUQWxGVzE2blZ0L1c5bld4VUxBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlN6CjAxRVhUOHIwbFdNZGIzVlI0MWFhdElwZVdEQWZCZ05WSFNNRUdEQVdnQlN6MDFFWFQ4cjBsV01kYjNWUjQxYWEKdElwZVdEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQzUxZzFuRVN6TgpkcVpyNmJPMm1PRm5oUERMempaaVRHMSsra0V1cEFlUHhubCsvanEyQ3hhaHZkWXhtYUd0ZEZkMVhEdm9TTFFrCmRKMk1qMVhzM2tnOUdBWk9JK3U5ZExtS0JpYWtTMTJrV1BybGlubzMxRS85c2tNdWRiZnhPRWxLK0tQcWNSR1gKaDIxV28yd0hBMkZrOVV4ckJkcUR0ZWNRMTZ5TG5WdS9CTVU0Q1o2bUNkRzcycHlBRHp6b2dLMHNQeE9qdll3agpwMzVHNDZaYWxhTHh0R0RyYWozU0R1bjFWc0NWTWdsTnNSSzlZWUtuZDNrMkdYSEVSZ1BsbnhqTVk3N3d5amlmCjNzUmYyOWpMYmV2TGl4TURaMnlCM01mWDMwemVjNUdoR2RaQUE1YTJsOElSemdXaXl1bTNWMTNlSXV6UFhXT2wKbE1UYWpoSkF4Q0JnCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" )!
    let authorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0xF2, 0x88, 0x35, 0x9B, 0xD9, 0x4D, 0xF4, 0xF5, 0x92, 0x29, 0x7D, 0x59, 0xFE, 0x15, 0xF2, 0xAB, 0xF4, 0xD2, 0x56, 0xFB ])
    let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K" )!
    
    let wrongPayload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl1K" )!
    
    let signaturePKCS = Data(base64Encoded: "MIIKcAYJKoZIhvcNAQcCoIIKYTCCCl0CAQExDTALBglghkgBZQMEAgEwCwYJKoZIhvcNAQcBoIIHsDCCA5owggKCoAMCAQICAgPyMA0GCSqGSIb3DQEBCwUAMFoxKzApBgNVBAMMIlN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoMFVN0YWF0IGRlciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwHhcNMjEwNjI5MDg0NjQ5WhcNMjEwNzI5MDg0NjQ5WjBnMQswCQYDVQQGEwJOTDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMTgwNgYDVQQDDC9TdGFhdCBkZXIgTmVkZXJsYW5kZW4gT3JnYW5pc2F0aWUgLSBTZXJ2aWNlcyBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK8EnYoA3HTol3a3YRwcVPt9n+Cvnd7eVAQ4NYVuVYxH5Oew9ulBM1Sy+mOX9hS0cH0paT6B/ryE0rGR3OZKXwPIMLGkW/BTB4MYDv7x9N4SdT9RQ611mUApclYD+Yhb+i+gRqajGvc7tlGVbqcv57g1L81xo52y12+UdE7Hg4eMeJ+PrnJpJwViZMjj28mGT5GX6afFi5BvATMgBtSym1Olg+4dzQmHgXFONps7JdekXpBp/dyAwPp5yBAUSqEoWHFqaBv8pJ+mgZwRtJ2OPbKDdRU/nKn5UDQvmGEkZoyAC+bZUa7mlNiSq1Xk4RODtC4Vzz0qWWY9690TFWL2LgECAwEAAaNdMFswCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBTyiDWb2U309ZIpfVn+FfKr9NJW+zAfBgNVHSMEGDAWgBSz01EXT8r0lWMdb3VR41aatIpeWDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQA3cfaVnIx/SylaCG4eODDE0Zt3op9e8tK+c6XlrVhIK46hECwuAE9ApPcNvBLq07FXeuOiLoOIBIpj4GZugRgsgOE2Up2/5UJ2e+eAVyivRB8vD0g92vqwT5smRLVcbH+QOVPJqoB9iX2Vd1cTgZmhsyVC4oVwGYoOs3n4MDhw96dnLwfWV1U9/7t94xSmPaFA9xxmpWIt7c9oHfCHU0K/3p9xiKSgT5WuJ1ojlxIEEZvI38Hw2Nte/656jZXvmnhhJkphXoHPBhdn8rvpFID040mIAVoH7Ws0qEJeVVLrkYTEFCwKiMekGN5Hw6GEGTaPPJcpP+bbPHV07RZIsENPMIIEDjCCAvagAwIBAgILAN6tvu/erb7vwN4wDQYJKoZIhvcNAQELBQAwZzELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRlciBOZWRlcmxhbmRlbjE4MDYGA1UEAwwvU3RhYXQgZGVyIE5lZGVybGFuZGVuIE9yZ2FuaXNhdGllIC0gU2VydmljZXMgRzMwHhcNMjEwNjI5MDg0NjUwWhcNMjEwNzI5MDg0NjUwWjB9MQswCQYDVQQGEwJOTDE5MDcGA1UECgwwTWluaXN0ZXJpZSB2YW4gVm9sa3NnZXpvbmRoZWlkLCBXZWx6aWpuIGVuIFNwb3J0MRgwFgYDVQQLDA9Db3JvbmEgQWxlcnRlcnMxGTAXBgNVBAMMEC5jb3JvbmF0ZXN0ZXIubmwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbqCC8w3PGLSvcWHRalqv6xFZujhqj9THr8561KVqUQQlluBhjoptXpZMwGCNuFyMT1Hb5G5dv7ckzQKLAZuHrmN9JyOWMcEjLdK/sMeQQuPqJIgSfQHghfWvuBUBsGQGkOPd3QVfMxpcqbIPhNrdQwxIZCHakm8gvAMMa+0Bt+COagqlnxBE3dUP6gHtRhi4TVUWUFqunuzGTECU1mYiGYKhREZE6myDr95nl0apjOp3O4BFlCK9AVAz6rmXy40Fw6dlZDd4AtT9Wtc8MDMmYM/nS2D8tRB3qAE/XFOq5+JGs7sD3UGS09qrKUO9O21eSYJ5KiRKl1VMC+BblmnmhAgMBAAGjgaQwgaEwRwYJYIZIAYb4QgENBDoWOEZvciB0ZXN0aW5nIG9ubHkgYW5kIG5vIHRoaXMgaXMgbm90IHRoZSByZWFsIHRoaW5nLiBEdWguMAsGA1UdDwQEAwIF4DAdBgNVHQ4EFgQU4KYySSHvC1i/hd1XqVeK6KSuQPYwHwYDVR0jBBgwFoAU8og1m9lN9PWSKX1Z/hXyq/TSVvswCQYDVR0TBAIwADANBgkqhkiG9w0BAQsFAAOCAQEAGCrBQlaEAqhVGVx7rU8Z/0HglaBdYkMFO+/t0k3F/bsWAIHGJuR31eXsaQa+mTXUbwRR/B4DFpQeY1Grnf1fxN6uDnBtV8YLocfkJXShnxZ7hVaF0sk0UQamA0Yl7i4T7Y7egyYjeqy/Db3snTzj4+2OhaW05kkQ1Q2EWsOHDIi1SBsd1JBKzq/LZZ92uVnEcMq67pu44Xc5OynPYrl1EA6NY8cHRofDvA8kOTR8zej+Pkm6yi0ZbkFyAroYI5K3LY7b2Mu1jiV7Mrr/kc2LuB3XOVnrlsXycX008QLNJr2uUS4NCyfNkI+inhi//F04ytOAkCclYqyTIfepfqIvszGCAoYwggKCAgEBMHYwZzELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRlciBOZWRlcmxhbmRlbjE4MDYGA1UEAwwvU3RhYXQgZGVyIE5lZGVybGFuZGVuIE9yZ2FuaXNhdGllIC0gU2VydmljZXMgRzMCCwDerb7v3q2+78DeMAsGCWCGSAFlAwQCAaCB5DAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMTA2MjkwODQ5MjZaMC8GCSqGSIb3DQEJBDEiBCCN6iJ4JdABvoUbWZ6h6jPmAineuLcsweVEsauDrJpRTTB5BgkqhkiG9w0BCQ8xbDBqMAsGCWCGSAFlAwQBKjALBglghkgBZQMEARYwCwYJYIZIAWUDBAECMAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0DAgIBQDAHBgUrDgMCBzANBggqhkiG9w0DAgIBKDANBgkqhkiG9w0BAQEFAASCAQB6hTaMemJBd4DdCbDNU8AZ+T4At4rN8Y/2M+bbwn6QSe7ZSaLv7W9Pbh+zhliROp66J29CqyZUYsMFH0T8et5f1E3h3wJzZMG7xAxlciwdv87V1J2+q9ezO1BBudAQvOlnurGJFaKTPWNTQpEub0lk0ty9G9E/qSmGWK5NnnIUD2cPIdrmwEBIZfETIuVf0q8KcgR6daJW4ZxWx7tCH0VFlMh/GiAgFexlwJ278b917hQ3z+BjY+kKM5AB/jhAy/gId+QlH1fsRMjLQTxJh6FR4eg0qjjrAyJxKb0zyQ813Lpnz4jOsbIthqWorcJE3z1MjX+IzTB+I8Bcn/GOqvhL" )!
    
    let signaturePPS = Data(base64Encoded: "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")!
    
    func testCMSSignature_padding_pkcs() {
        
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)
        XCTAssertEqual(true, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ".nl"))
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: wrongPayload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ".nl"))
    }
    
    func testCMSSignature_padding_pss() {
        
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)
        
        XCTAssertEqual(true, openssl.validatePKCS7Signature(
                        signaturePPS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ".nl"))
        
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePPS,
                        contentData: wrongPayload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ".nl"))
        
    }
    
    func testCMSSignature_test_pinning() {
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)
        
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".xx.n",
                        requiredCommonNameSuffix: ".nl"))
        
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ".xx"))
        
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: ".coronatester.n",
                        requiredCommonNameSuffix: ""))
        
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: "",
                        requiredCommonNameSuffix: ".xx"))
        
        XCTAssertEqual(true, openssl.validatePKCS7Signature(
                        signaturePKCS,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: "",
                        requiredCommonNameSuffix: ""))
        
    }
    
    func testCMSSignature_verydeep() {
        
        let rootCertificateData = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrekNDQWVPZ0F3SUJBZ0lVYzBPUEpXenZ2cEg3ZlZHQVVTeWg1R0o3eGhNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RURUxNQWtHQTFVRUF3d0NRMEV3SGhjTk1qRXdOakk1TVRreE5qVTBXaGNOTWpFd056STVNVGt4TmpVMApXakFOTVFzd0NRWURWUVFEREFKRFFUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCCkFQVktxLzRNbStKRXdOdExCUVpGU0dxaWdEZmwzeXJIRUpuZHY3UTNWYlZzdGNXL1A2OWxOdE9SdkxvS005eDYKWWxNUXIzWVgyWHdXek81cFVFMHdYLzVBV3dVam85a1Q2T0NaRzdXMXNDV2hJZDl1dWs5YkdvbUpEeFExdFl5bApqalgrUEpIV2l3U3ZOY043dWV4NGxOZlFhN01jVnN6d3c0UGpUZ0FEY2pUV3RPSGlNZytaWVQ3Z3E0NzBraUlXCnptQ1NDcDJRWWVIY2tEdjlMNks2OG0zTklGTFR0ckxOYmttZmowSTFwbG1ZT0VxNEpLOWR4RllWZXdYbXRpUVYKREJCRzJ5Ti9EK2dXN1VFbnZXTDljNGJ6VGlXQW9rcVFsem1QQ3EyUTdhR1JsL05keFJKNmhUTEVpUjVna1hwYQp0dWhuNWFaZlliK3VaZFlIRGNVNzBNTUNBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUVGQkRwMElzTWZtYnVYWm9mCklMRzUvU3hMeUlPYU1COEdBMVVkSXdRWU1CYUFGQkRwMElzTWZtYnVYWm9mSUxHNS9TeEx5SU9hTUE4R0ExVWQKRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFNWXRzWU1zUjVtQ2l2Q01zbnBOWjMrbQo5cDJqU1R0OHhqdXlaZSttOEhxUHo4Y3JJZHpIOEhpZ0RwRnoyR2NEaEMvQjBpZ2dwemt1Tm5MRmo1bm9iUk85ClVjMk81aHFpWlgwdlhoalNZblVHcWMzQUw2MjRSeHgwaitBdGtBNlBWVUU4RktkQ2YyTTRlWUYwNUpNb3ZtbTkKY1VsWGU5L3BUVEJUTm4yYmZqQ3Q3enFkTmR4YjVzU3doT1FNZlVBZVNBdG5oLzRKS3ZSZENIRkE2UXVqSGV0agpPTTdoalM4bjN5SG9IakxwUHJuRExTVUtkZHhuQ1hJRG9vS0lwNmJRQnJOL0JXaHhDU3VaNlRDR0dMeVQvVCs0CnNVYjFjVmJOVEx0OGQrRHJkcVRBekRXQmdOQnIrODZUeS9jZEZRM0c3YWN0ZDliSWZ6ekJhcHdpaWhaRGlQbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo==" )!
        let authorityKeyIdentifier = Data([    0x04, 0x14, 0x8F, 0xF8, 0xFC, 0x3E, 0xA0, 0x42, 0x3D, 0x45, 0x2D, 0x17, 0x07, 0xA1, 0xC4, 0xEB, 0x54, 0xE5, 0xFD, 0x5B, 0x32, 0x76])
        let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K" )!
        
        let signature = Data(base64Encoded: "" )!
        
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)
        XCTAssertEqual(true, openssl.validatePKCS7Signature(
                        signature,
                        contentData: payload,
                        certificateData: rootCertificateData,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: "leaf",
                        requiredCommonNameSuffix: "f"))
    }
    
    // Chain that is identical in subjectKeyIdentifier, issuerIdenfifier, etc
    // to a real one - but fake from the root down.
    // See the Scripts diretory:
    //  gen_fake_bananen.sh         - takes real chain and makes a fake one from it.
    //  gen_fake_cms_signed_json.sh - uses that to sign a bit of json/
    //
    func test_cms_fake_chain() {
        let fakeRoot = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTakNDQWpLZ0F3SUJBZ0lRUksrd2dOYWpKN3FKTURtR0x2aEFhekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEF3TURrek1ESXhNVEl4T1ZvWERUSXhNRGt6TURFME1ERXhOVm93ClB6RWtNQ0lHQTFVRUNoTWJSR2xuYVhSaGJDQlRhV2R1WVhSMWNtVWdWSEoxYzNRZ1EyOHVNUmN3RlFZRFZRUUQKRXc1RVUxUWdVbTl2ZENCRFFTQllNekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQgpBTi9DaXNIcmFSVHE5TDdDRTJhTS8xeEliWUNBMDNML2NoL1cveWdWTlBheFROUjk4RTYwcitnRllYMVJPNTkzCkFqWGFpaS9aYisrNVpsK2NSZms1Z2tLVEJNRlNMQXg5S0U2bWtmNmRmcHpWVjVTbWJ1YlluVnZQc0dGUnNTMloKTEV2VkpTUFpZdGY1bkNHQ1RPazcwOE0vTkszUE5NLyt3OWt4UUVKbHFyZHpKUHd2cW9DR1BoU3YrVjZvRVh5SAowVDVxZEZlN1FIczRwMkFTaFphMmIxTi9reWZOR1RxQkZpTVdFamJSY0o0SWJyZ2FMMTRZQzdrL1ZmRXg4ZDU2CmhDMGtoZkFQZ1VlblpWT2w4YmNybkdhVHc1a3NDUG9LQXptUHZUaWZRSEJNWktzbEY2UWsxOWUwN1Z2M1dhaDUKVG5iZjEwOU5GQy9LZkpaZCtxV2VsNFVDQXdFQUFhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVgpIUThCQWY4RUJBTUNBUVl3SFFZRFZSME9CQllFRk1TbnNhUjdMSEg2MitGTGtIWC94QlZnaFlrUU1BMEdDU3FHClNJYjNEUUVCQ3dVQUE0SUJBUUE2aldBYlVtVDRNYTJIcVBPbDNrdFBlZTA1OE5NQzdLaFF6RkFQRlFucnhOVngKY3BUZFVZbHJOY0dnM3p4NXBpNDdtZzBJV3VmOFVlZlc3dzkzRlB3VG5LVysxM0hHbitqYXhYM2R4NVlKV3lqNQoyeVpER0hraUJuVlFCemRlVG5ZWCtUOGJueXE3ZVRxaWxoWkJGNkFRdWtNQnVUTk9aNGhQSVFSWjBNZnlQVGJJCm5TRGhWSFVZTXM4aXgwWVcwckhtK3dBWjRUa0ltMjBjQ2VWd0l6YXkyZXd3OWNXQmtqMnB5YWhjcUNHT2xiS1kKSVlMdFBxU1hrcDBhdnBVZnkxcHFXRkhTYnN2WE5uRjlpMytpaXQxNE5Za2pKQ3hsaHJRa3BkYnlUd3Q1OTQrdgp4elRqckVkRXZVdnhhamE3aUZEZHpkemM4WldVdDB0bStDaXo3WWZsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")!
        let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K")!
        let signature = Data(base64Encoded: "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")!

        let realLeaf = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTakNDQWpLZ0F3SUJBZ0lRUksrd2dOYWpKN3FKTURtR0x2aEFhekFOQmdrcWhraUc5dzBCQVFVRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEF3TURrek1ESXhNVEl4T1ZvWERUSXhNRGt6TURFME1ERXhOVm93ClB6RWtNQ0lHQTFVRUNoTWJSR2xuYVhSaGJDQlRhV2R1WVhSMWNtVWdWSEoxYzNRZ1EyOHVNUmN3RlFZRFZRUUQKRXc1RVUxUWdVbTl2ZENCRFFTQllNekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQgpBTit2NlpkUUNJTlh0TXhpWmZhUWd1ekgweXhyTU1wYjdObkRmY2RBd1JnVWkrRG9NM1pKS3VNL0lVbVRyRTRPCnJ6NUl5Mlh1L05NaEQyWFNLdGt5ajR6bDkzZXdFbnUxbGNDSm82bTY3WE11ZWd3R01vT2lmb29VTU0wUm9PRXEKT0xsNUNqSDlVTDJBWmQrM1VXT0R5T0tJWWVwTFlZSHNVbXU1b3VKTEdpaWZTS09lRE5vSmpqNFhMaDdkSU45Ygp4aXFLcXk2OWNLM0ZDeG9sa0hSeXhYdHFxelRXTUluLzVXZ1RlMVFMeU5hdTdGcWNraDQ5WkxPTXh0Ky95VUZ3CjdCWnkxU2JzT0ZVNVE5RDgvUmhjUVBHWDY5V2FtNDBkdXRvbHVjYlkzOEVWQWpxcjJtN3hQaTcxWEFpY1BOYUQKYWVRUW14a3F0aWxYNCtVOW01L3dBbDBDQXdFQUFhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVgpIUThCQWY4RUJBTUNBUVl3SFFZRFZSME9CQllFRk1TbnNhUjdMSEg2MitGTGtIWC94QlZnaFlrUU1BMEdDU3FHClNJYjNEUUVCQlFVQUE0SUJBUUNqR2l5YkZ3QmNxUjd1S0dZM09yK0R4ejlMd3dtZ2xTQmQ0OWxaUk5JK0RUNjkKaWt1Z2RCL09FSUtjZEJvZGZwZ2EzY3NUUzdNZ1JPU1I2Y3o4ZmFYYmF1WCs1djNnVHQyM0FEcTFjRW12OHVYcgpBdkhSQW9zWnk1UTZYa2pFR0I1WUdWOGVBbHJ3RFBHeHJhbmNXWWFMYnVtUjlZYksrcmxtTTZwWlc4N2lweFp6ClI4c3J6Sm13TjBqUDQxWkw5YzhQREhJeWg4YndSTHRUY20xRDlTWkltbEpudDFpci9tZDJjWGpiRGFKV0ZCTTUKSkRHRm9xZ0NXakJINGQxUUI3d0NDWkFBNjJSallKc1d2SWpKRXViU2ZaR0wrVDB5aldXMDZYeXhWM2JxeGJZbwpPYjhWWlJ6STluZVdhZ3FOZHd2WWtRc0VqZ2ZiS2JZSzdwMkNOVFVRCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")!
        let fakeLeaf = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZNVENDQkJtZ0F3SUJBZ0lTQSs5bkNORjZ2Q1BIRWRvQm9PK2R5ZEhSTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEExTWpBeE5UQTNNalZhRncweU1UQTRNVGd4TlRBM01qVmFNQ0V4SHpBZEJnTlZCQU1UCkZtRndhUzFqZEM1aVlXNWhibVZ1YUdGc1pXNHVibXd3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURXWHRjazdlK1AwY2V0cGJKVkZNUmVJRTBYTDNWQVJqZ3RpT1ZiRUVvUE80cWdTMzlQOXAwTwp0RnlVcVNna1hpelRnMmxXbk8yQzlhbkRCdnlBNjZZQ20wbDY4UnJxSnhtZjhYRXhjZkYwV1ZhNFZsZnJnZCtCCnBJME1zWDJ6WmV0a2MxZ0VLVzQ3WFZvUGlaWlRUKzQ1VGJtT1VwczNnWXFWMHQrZjZuUUp6a3Y1Nk1ZYlg2ZVcKTWdFcEs0MVFhTXZ6VkxIb0hZYUVacnhTNmllL2NtRVhhbTc3d205anNneXZiY01lVm0yMVM0VUd1aFhON083NwowQ2pyTXhPOHdxa2lQQTVpSE1JbE5ITmRWMkR6dVdqOE9LY0t4WXNvWFhNUGh4VFhNWWc5VWk5Rm11WlNEK2d4Cm9vaFRjTk0zSFBIQWRuS3JyM3VObUZhTFd2OXozWDNQQWdNQkFBR2pnZ0pRTUlJQ1REQU9CZ05WSFE4QkFmOEUKQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQwpNQUF3SFFZRFZSME9CQllFRkFDMTE5VWRzUTRYWWVpTkdvakxXYnRtTm9iOU1COEdBMVVkSXdRWU1CYUFGQlF1CnN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01GVUdDQ3NHQVFVRkJ3RUJCRWt3UnpBaEJnZ3JCZ0VGQlFjd0FZWVYKYUhSMGNEb3ZMM0l6TG04dWJHVnVZM0l1YjNKbk1DSUdDQ3NHQVFVRkJ6QUNoaFpvZEhSd09pOHZjak11YVM1cwpaVzVqY2k1dmNtY3ZNQ0VHQTFVZEVRUWFNQmlDRm1Gd2FTMWpkQzVpWVc1aGJtVnVhR0ZzWlc0dWJtd3dUQVlEClZSMGdCRVV3UXpBSUJnWm5nUXdCQWdFd053WUxLd1lCQkFHQzN4TUJBUUV3S0RBbUJnZ3JCZ0VGQlFjQ0FSWWEKYUhSMGNEb3ZMMk53Y3k1c1pYUnpaVzVqY25sd2RDNXZjbWN3Z2dFREJnb3JCZ0VFQWRaNUFnUUNCSUgwQklIeApBTzhBZGdCRWxHVXVzTzdPcjhSQUI5aW8vaWpBMnVhQ3Z0akxNYlUvMHpPV3RiYUJxQUFBQVhtS2lCZnhBQUFFCkF3QkhNRVVDSVFDSmxZVTR2TU9KTXFtdHl6VzlIN0xWMk5INHdyV2JHbGVyb0tpN0N2VlRBUUlnYWcyOTdvZGUKQnlhWWExQ2hBT1BCdzJLQmlWMmpIMGYzb1IwV1paSjlkVlVBZFFEMlhKUXYwWGN3SWhSVUdBZ3dsRmFPNDAwVApHVE8vM3d3dklBdk1UdkZrNHdBQUFYbUtpQmZrQUFBRUF3QkdNRVFDSUM5R2lBelRDbmJyWWNjQjBwRnA0NVR4Cm5uRS9HUDBHYytlSmY1Yk5kSnVZQWlCNWx2TlVOZUxuR0Fwa3ZpZWVwZCsxQWdMY29FdGZ4bmlmWHJUUUNpK2MKVERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQU4rQmxnbk16NHhpU3d6djdsNFRuUVV4bE0rVTNsSlJFRlRFTwowUHdCTElLWVg0UkJPOWt2bnczMzZQcTlwWWlTSkkxR3ZLQkx1VjJBK1E5R210UkNSNjlZNEVyTE1oNS9Jcjc2CnJBRUlVWmZuZjNlV0w0Wjg3KzFOaU9UbmlvS1lNUURJSFR3YmpESnhQNi9IclgzaXNsb3NUUk1pcG04ek1Wa2sKMVBuQ2FiT0VTYzhsS0xFa0ZxTmdiL2t4aUNULzBvQWQ2WDJydmJqTkQ5UjRpZTBjRk0zVkhlK25aQ3BLRXllYwpsM2dySEx5OVlGbnJ1c2Z2WXdSOCtMV3FCZjNLU1NzZ3pzMWxCVFpTVjBDWGh3YnlEMlo1bTc0WlIrNDhCbzk3Ck1yV0pWQWhFQ0xSemkxT2lEN3Njc1hXeGVGczRhVU43ZVR3K0JUTUNWRm5rbXR5NVN3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")!
        let fakeChain = [
            Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3lhazZQVDQ5TVB4RE1hRkszdmdVTmZoZGFjdTIwQ1RvUWRiUVdzOHFnCmJhaUlLRzJYN3BhNG1JUTE1ejBKTi9wN0pmU0I0dURkaGZXcmVnWmJMZkM1RUduVjdFUkVIR3RHRDAxZ0grdmsKbG85NlduK05tUklWajNyTVN3emhIMUE2TXh1N3Z6ZGtQbDB0ZGZkeTRxNUNlQ2ErdmpkYVJnaXVNTkFhR0puVAo2L0hNTkEvb3pXanNXbW00QWxWdTN6VUZla3VMbVNxdmpEc0c2WkVEbE1DOUkwUk1SOFp6ZTJxQ3FTMlVjcG5PCndodHU5K1FISHVEMzYrRXRHdWljWTRlcTBqN2M1TE1OVlZ2YzNIMDhOWTR4Tks5TlhTN2pOTjREWTNkZ2lIYUkKWDFyeXlOTlgwMGFWUkxONDN4RVkybWthaEgwcU13MmlBTGJ2QUQ4R2JINmRyS0p5NWpZb09Sek4xZmg1c1d1ZwpocjQwWDJvMGJKdFJHdy9HVDZSSmo3SWdNMGRPR1N6RjFUL3Q5NDBZaXE1TWZLSU5UTjBEejFzUWp4MmE0NDYvCjBxQUpRQnVXY0JDSG9oMkRzMlFqZlc5SDI5b0RiWm1DM2JNT2ZUNks4ZTVFYzVlcG00bmQ1UWJYMFVTdDdvN2wKWkxVTEFQbnRFWkQyQVh6U0xHbmVJUWorSHBsZFJBWHB5WndIUm1DeFA2UGFldlJrZFRpMHVKK1ZVUVJLZEZpdgo0UHlNRTRPVWlWMU93dXdpREU0VWFObEJDbTVhYlJhc1orMERpdHpnVEs3Yit2bEFFSmU2NjVDZlcxRHA1UWhUCm9well0TjVzWHVzTmxsM0F0MnV0a2pVQUord0h6R2ora3N2d2VJZVNNTThYYUxvYTdnMjdlL09KcmpkMklpenIKUXdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNCQ296TFRhMEtEeWVuaElCNU42OStZWHRlcHA3aDFNL3orb0ZpCk16dTk1bEVRTkxOTXlJVVFzY3BDaGJiVnFDaGNOWkVRYnhkaHdINmxYcGlvWmVrQlNGUzVlcVJYVVU2bkxZR1IKdUYvNmN2c2RwcmtrWGJ2YVhqa3REZFJQaEQwVXl6U2hEYmNiWkQxNklrdEpWR0FnSlQwU2VDVWpzTnVjOGNzbgphKys5dzRXTmZjOGVrUkU0V3l2TXJ3bDBhQVJnZWRuQjNCbkdMckdYUE5neElMZmFnWHdKV0NmR09QanpOUnFJCm9pWjRmNVZvR3liL1NLRXRTeEdUaEVqRWo1ZmcwZkFaakZjMEFxWXJHWnh4bndhbFFNVTg3WmFaYUM3czl5ckEKa0loMU4yWE9LbjcyUG9URmxxWGxRc3YvQWhBaW5wc09Kc2IxVW94NUpIeDRxelVZCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
            Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDeE84dEY1SlpkdUpRNjB3ZzIrcGRlNWZVdk0wWjROSEtVZDlkMmE5SFVnb1o1Y0hxMUdYcnphTTVxCjZQQW9EZTJpK3N3c3NWVTJUeUlSSVEzNFQzZmtESVBGdSsreW81ZFZ1TFc2TDhrajA5NU8ySEFWV243RElEYVEKVCtRa3JUTGxxVTZ4ZkhqRlYwSmtqNHR1QTYvVERSRlE1TEFQZjNOQjQ3OVZwNWdYcFlqaVlJVEZBRE40SzBwaApybTBzVkc2NG1Nb1JmWElhb3RPNFBHd053d2RBSmY3eGZPWWJ2eDFmMzh1R0Ewblp5aS9lcGZWUGhjaVZpM2pCCmRmcmJ4YlFrbUN0TXBxTkhzakJpNkVzdDJaSWNJcjVFNTJuVFNoYzJKYlU3UkE5OGExYjhDQTBQYTVOT1pHUC8KNmhVNndaWklKTk0yOXJ1UGNUSTQvbFJsV2tYaEFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUFrQlZtODdPb3ppQXlrRVp3Y2NIQ0NURzBCMGdjUApTNGZNbEJEdTk2OUYzZGFTVTU0bE9NQXQ1VWl3VmVYb0ZHVVhlUDcydFpTcE10RGc3Q0czTWtRYzVKdWFoNndlCjdUNE1HUzNSVXRPUThnVjlEdnlCQ0pHdStJdnEvcU1WU3pIOURGTTlzTVBTVjB4ekx5WWlGSktJenlFQmsxeFcKWkhKM2NRR3ZHRCtBbk95aHpwZWhpdktqZE96WmdkUWJoZXJ3WkVTZW03YXZTaWtQNm1ycVJaTmV5R0lsWC9Zdwo5THo1dDlJTTdLRmoxSVk0b0xYRjVneW90KzFXWmRweWoxR0lHZ1BaRnoyelI0VzY4SDRSZ0V3a093cW1odFpjCnQxMWdqZ01DcEpCbFFyQmwycnJlMW14Q3pySk8xQlBSRXNjR3U1dWZEVnlpc1Z3OEkrcll6b2pZdFN2a1grMk8KSnVDeFY4elROMzc3QTlrYzVOQmZsQXo4Z0lZL3U1amx3ZldjbHNhL3dXdE1CYUdvNEI1TTNjQ3VDVlBhOWZkSQpVOGYxYTlEWEk3eEV4UnBGUUNpWlVLTkV5ZnZhaGpKK0hLS2tNUTR4M0tFa2d3d0hUT295eFNiblBiM0I4b1k0CjN2ME5TQXg3ai9HcWs1UEkzaFAzeHFlWkVaQXNIVUc5WDdMMnB2dHlKTHlBWUNXV3FTV2hHM3BJNHI2eVMveVcKUGM2NFhzZFkza0t6azc1TmhjVWU5SFF2dVJzKzIvWWZjN1h5cDByempaaUdPYzl5VzdqdlJJbFM1eGlicXRxWApLQlAzWVMvb3ZXUlBEMVR3V0xzQVJqM2lENlk0bmdZTEYrU1RYR1pDR1pPaitKRVJFV0pqQzh4N2pqcEN6bGh3CjYrRExhKytVbVoyTWxBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")]
        let realRoot = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTakNDQWpLZ0F3SUJBZ0lRUksrd2dOYWpKN3FKTURtR0x2aEFhekFOQmdrcWhraUc5dzBCQVFVRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEF3TURrek1ESXhNVEl4T1ZvWERUSXhNRGt6TURFME1ERXhOVm93ClB6RWtNQ0lHQTFVRUNoTWJSR2xuYVhSaGJDQlRhV2R1WVhSMWNtVWdWSEoxYzNRZ1EyOHVNUmN3RlFZRFZRUUQKRXc1RVUxUWdVbTl2ZENCRFFTQllNekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQgpBTit2NlpkUUNJTlh0TXhpWmZhUWd1ekgweXhyTU1wYjdObkRmY2RBd1JnVWkrRG9NM1pKS3VNL0lVbVRyRTRPCnJ6NUl5Mlh1L05NaEQyWFNLdGt5ajR6bDkzZXdFbnUxbGNDSm82bTY3WE11ZWd3R01vT2lmb29VTU0wUm9PRXEKT0xsNUNqSDlVTDJBWmQrM1VXT0R5T0tJWWVwTFlZSHNVbXU1b3VKTEdpaWZTS09lRE5vSmpqNFhMaDdkSU45Ygp4aXFLcXk2OWNLM0ZDeG9sa0hSeXhYdHFxelRXTUluLzVXZ1RlMVFMeU5hdTdGcWNraDQ5WkxPTXh0Ky95VUZ3CjdCWnkxU2JzT0ZVNVE5RDgvUmhjUVBHWDY5V2FtNDBkdXRvbHVjYlkzOEVWQWpxcjJtN3hQaTcxWEFpY1BOYUQKYWVRUW14a3F0aWxYNCtVOW01L3dBbDBDQXdFQUFhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVgpIUThCQWY4RUJBTUNBUVl3SFFZRFZSME9CQllFRk1TbnNhUjdMSEg2MitGTGtIWC94QlZnaFlrUU1BMEdDU3FHClNJYjNEUUVCQlFVQUE0SUJBUUNqR2l5YkZ3QmNxUjd1S0dZM09yK0R4ejlMd3dtZ2xTQmQ0OWxaUk5JK0RUNjkKaWt1Z2RCL09FSUtjZEJvZGZwZ2EzY3NUUzdNZ1JPU1I2Y3o4ZmFYYmF1WCs1djNnVHQyM0FEcTFjRW12OHVYcgpBdkhSQW9zWnk1UTZYa2pFR0I1WUdWOGVBbHJ3RFBHeHJhbmNXWWFMYnVtUjlZYksrcmxtTTZwWlc4N2lweFp6ClI4c3J6Sm13TjBqUDQxWkw5YzhQREhJeWg4YndSTHRUY20xRDlTWkltbEpudDFpci9tZDJjWGpiRGFKV0ZCTTUKSkRHRm9xZ0NXakJINGQxUUI3d0NDWkFBNjJSallKc1d2SWpKRXViU2ZaR0wrVDB5aldXMDZYeXhWM2JxeGJZbwpPYjhWWlJ6STluZVdhZ3FOZHd2WWtRc0VqZ2ZiS2JZSzdwMkNOVFVRCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")!
        let realCrossSigned = Data( base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVZRENDQWtpZ0F3SUJBZ0lRQjU1SktJWTNiOVFJU01JL3hqSGtZekFOQmdrcWhraUc5dzBCQVFzRkFEQlAKTVFzd0NRWURWUVFHRXdKVlV6RXBNQ2NHQTFVRUNoTWdTVzUwWlhKdVpYUWdVMlZqZFhKcGRIa2dVbVZ6WldGeQpZMmdnUjNKdmRYQXhGVEFUQmdOVkJBTVRERWxUVWtjZ1VtOXZkQ0JZTVRBZUZ3MHlNREE1TURRd01EQXdNREJhCkZ3MHlOVEE1TVRVeE5qQXdNREJhTUU4eEN6QUpCZ05WQkFZVEFsVlRNU2t3SndZRFZRUUtFeUJKYm5SbGNtNWwKZENCVFpXTjFjbWwwZVNCU1pYTmxZWEpqYUNCSGNtOTFjREVWTUJNR0ExVUVBeE1NU1ZOU1J5QlNiMjkwSUZneQpNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRXpadlZuNENEQ3V3SlN2TVdTajVjejNlczNtY0ZEUjBICnR0d1crMXFMRk52aWNXREV1a1dWRVltTzZnYmY5eW9XSEtTNXhjVXk0QVBnSG9JWU9JdlhSZGdLYW03bUFIZjcKQWxGOUl0Z0ticHBiZDkvdytrSHNPZHgxeW1nSERCL3FvNEhsTUlIaU1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUApCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUjhRcGF1M2t0SU8vcVMrSjZNejIyTHFYSTNsVEFmCkJnTlZIU01FR0RBV2dCUjV0Rm5tZTdibDVBRnpnQWlJeUJwWTl1bWJiakF5QmdnckJnRUZCUWNCQVFRbU1DUXcKSWdZSUt3WUJCUVVITUFLR0ZtaDBkSEE2THk5NE1TNXBMbXhsYm1OeUxtOXlaeTh3SndZRFZSMGZCQ0F3SGpBYwpvQnFnR0lZV2FIUjBjRG92TDNneExtTXViR1Z1WTNJdWIzSm5MekFpQmdOVkhTQUVHekFaTUFnR0JtZUJEQUVDCkFUQU5CZ3NyQmdFRUFZTGZFd0VCQVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQUczOGxLNUI2Q0hZQWR4amgKd3k2S05reEJmcjhYUytNdzExc01mcHlXbUc5N3NHakFKRVRNNHZMODBlcmIwcDhCK1JkTkRKMVYvYVd0YmRJdgpQMHR5d0M2dWM4Y2xGbGZDUGhXdDRESFJDb1NFYkdKNFFqRWlSaHJ0ZWtDL2x4YUJSSGZLYkh0ZElWd0g4aEdSCkliL2hMOEx2YnYwRklPUzA5M256TGJzM0t2REdzYXlzVWZVZnMxb2VaczVZQnhnNGYzR3BQSU82MTd5Q25wcDIKRDU2d0tmM0w4NGtIU0J2K3E1TXVGQ0VOWDYrT3QxU3JYUTdVVzB4eDBKTHFQYU0ybTN3ZjREdFZ1ZGhUVTh5RApacnRLM0lFR0FCaUw5TFBYU0xFVFFibkV0cDdQTEhlT1FpQUxnSDZmeGF0STI3eHZCSTFzUmlrQ0RYQ0tIZkVTCmM3WkdKRUtlS2hjWTQ2ekhtTUp5ekcwdGRtM2RMQ3NtbHFYUElRZ2I1ZG92eSsrZmM1T3UrRFpmUjQrWEtNNnIKNHBnbW1Jdjk3aWd5SWludFRKVUp4Q0Q2QitHR0xFVDJnVWZBNUdJeTdSM1lQRWlJbHNOZWtiYXZlMW1rN3VPRwpuTWVJV01vb0ttWlZtNFdBdVIzWVFDdkpIQk04cWV2ZW1jSVdRUGIxcEs0cUpXeFN1c2NFVExReXUvdzRYS0FNCllYdFg3SGRPVU0rdkJxSVBONHpoRHRMVEx4cTluSEUrek9INDBhaWp2UVQyR2NENWhxLzFEaHFxbFd2dnlrZHgKUzJNY1RaYmJWU01LblErQmRhRG1RUFZrUmdOdXp2cHFmUWJzcERRR2ROcFQyTG00eGlOOXFmZ3FMYVNDcGk0dApFY3JtelRGWWVZWG1jaHlubjlOTTBHYlFwN3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K")!
        let realChain = [
            realCrossSigned, // Let's Encrypt has two roots; an older one by a third party and their own.
            Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3Q2Q1J6OUJRMzg1dWVLMWNvSEllKzNMZmZPSkNNYmp6bVY2QjQ5M1hDCm92NzFhbTcyQUU4bzI5NW9obXhFazdheFkvMFVFbXUvSDlMcU1ac2hmdEV6UExwSTlkMTUzN080L3hMeElacEwKd1lxR2NXbEtabVpzajM0OGNMK3RLU0lHOCtUQTVvQ3U0a3VQdDVsK2xBT2YwMGVYZkpsSUkxUG9PSzVQQ20rRApMdEZKVjR5QWRMYmFMOUE0alhzRGNDRWJkZkl3UFBxUHJ0M2FZNnZyRmsvQ2poRkxmczhMNlArMWR5NzBzbnRLCjRFd1NKUXh3alFNcG9PRlRKT3dUMmU0WnZ4Q3pTb3cvaWFOaFVkNnNod2VVOUdOeDdDN2liMXVZZ2VHSlhEUjUKYkhidk81QmllZWJicEpvdkpzWFFFT0VPM3RrUWpoYjd0L2VvOThmbEFnZVlqellJbGVmaU41WU5ObldlK3c1eQpzUjJidkFQNVNRWFlnZDBGdENyV1FlbXNBWGFWQ2cvWTM5VzlFaDgxTHlnWGJOS1l3YWdKWkhkdVJ6ZTZ6cXhaClhtaWRmM0xXaWNVR1FTaytXVDdkSnZVa3lSR25XcU5NUUI5R29abTFwenBSYm9ZN25uMXlweElGZUZudFBsRjQKRlFzRGo0M1FMd1d5UG50S0hFdHpCUkw4eHVyZ1VCTjhRNU4wczhwMDU0NGZBUWpRTU5SYmNUYTBCN3JCTURCYwpTTGVDTzVpbWZXQ0tvcU1wZ3N5NnZZTUVHNktEQTBHaDFnWHhHOEsyOEtoOGhqdEdxRWdxaU54Mm1uYS9IMnFsClBSbVA2emp6Wk43SUt3MEtLUC8zMitJVlF0UWkwQ2RkNFhuK0dPZHdpSzFPNXRtTE9zYmRKMUZ1Lzd4azlUTkQKVHdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFLY3dCc2xtNy9EbExRcnQyTTUxb0dyUytvNDQrL3lRb0RGVkRDCjVXeEN1MitiOUxSUHdrU0lDSFhNNndlYkZHSnVlTjdzSjdvNVhQV2lvVzVXbEhBUVU3Rzc1Sy9Rb3NNckFkU1cKOU1VZ05UUDUyR0UyNEhHTnRMaTFxb0pGbGNEeXFTTW81OWFoeTJjSTJxQkRMS29ia3gvSjN2V3JhVjBUOVZ1RwpXQ0xLVFZYa2NHZHR3bGZGUmpsQno0cFlnMWh0bWY1WDZEWU84QTRqcXYySWw5RGpYQTZVU2JXMUZ6WFNMcjlPCmhlOFk0SVdTNndZN2JDa2pDV0RjUlFKTUVoZzc2ZnNPM3R4RStGaVlydXE5UlVXaGlGMW15djRRNlcrQ3lCRkMKRGZ2cDdPT0dBTjZkRU9NNCtxUjlzZGpvU1lLRUJwc3I2R3RQQVF3NGR5NzUzZWM1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
            Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")]
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)

        XCTAssert(nil != SecurityCheckerWorker().certificateFromPEM(certificateAsPemData: TrustConfiguration.rootISRGX1))

        // the authidentifier just above the leaf that signed.
        // fake and real are identical
        //
        let authorityKeyIdentifier = Data([0x04, 0x14,
                                           0x14, 0x2E, 0xB3, 0x17, 0xB7, 0x58, 0x56, 0xCB, 0xAE, 0x50, 0x09, 0x40, 0xE6, 0x1F, 0xAF, 0x9D, 0x8B, 0x14, 0xC2, 0xC6])

        // this is a test against the fully fake root and should succeed.
        //
        XCTAssertEqual(true, openssl.validatePKCS7Signature(
                        signature,
                        contentData: payload,
                        certificateData: fakeRoot,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: "bananen",
                        requiredCommonNameSuffix: "nl"))
        
        // Now test against our build in (real) root - and fail.
        //
        XCTAssertEqual(false, openssl.validatePKCS7Signature(
                        signature,
                        contentData: payload,
                        certificateData: TrustConfiguration.rootISRGX1,
                        authorityKeyIdentifier: authorityKeyIdentifier,
                        requiredCommonNameContent: "bananen",
                        requiredCommonNameSuffix: "nl"))

        let fakeCert = SecurityCheckerWorker().certificateFromPEM(certificateAsPemData: fakeLeaf)
        XCTAssert(fakeCert != nil)

        var fakeCertArray = [ fakeCert ]
        for certPem in fakeChain {
            let cert = SecurityCheckerWorker().certificateFromPEM(certificateAsPemData: certPem!)
            XCTAssert(cert != nil)
            fakeCertArray.append(cert)
        }

        let realCert = SecurityCheckerWorker().certificateFromPEM(certificateAsPemData: realLeaf)
        XCTAssert(fakeCert != nil)

        var realCertArray = [ realCert ]
        for certPem in realChain {
            let cert = SecurityCheckerWorker().certificateFromPEM(certificateAsPemData: certPem!)
            XCTAssert(cert != nil)
            realCertArray.append(cert)
        }

        let policy = SecPolicyCreateBasicX509(); // true, "api-ct.bananenhalen.nl" as CFString)
        var optionalFakeTrust: SecTrust?
        XCTAssert(noErr == SecTrustCreateWithCertificates(fakeCertArray as CFArray,
                                                    policy,
                                                    &optionalFakeTrust))
        XCTAssert(optionalFakeTrust != nil)
        let fakeServerTrust = optionalFakeTrust!

        var optionalRealTrust: SecTrust?
        XCTAssert(noErr == SecTrustCreateWithCertificates(realCertArray as CFArray,
                                                    policy,
                                                    &optionalRealTrust))
        XCTAssert(optionalRealTrust != nil)
        let realServerTrust = optionalRealTrust!

        // This should success - as we rely on the build in well known root.
        //
        XCTAssert(true == SecurityCheckerWorker().checkATS(serverTrust: realServerTrust,
                                              policies: [policy],
                                              trustedCertificates: []))

        // This should succeed - as we explictly rely on the root.
        //
        XCTAssert(true == SecurityCheckerWorker().checkATS(serverTrust: realServerTrust,
                                              policies: [policy],
                                              trustedCertificates: [ realRoot ]))
        
        // This should succeed - as we have the fake root as part of our trust
        //
        XCTAssert(true == SecurityCheckerWorker().checkATS(serverTrust: fakeServerTrust,
                                              policies: [policy],
                                              trustedCertificates: [fakeRoot]))

        // This should fail - as the root is not build in. It may however
        // succeed if the user has somehow the fake root into the system trust
        // chain -and- set it to 'trusted' (or was fooled/hacked into that).
        //
        XCTAssert(false == SecurityCheckerWorker().checkATS(serverTrust: fakeServerTrust,
                                              policies: [policy],
                                              trustedCertificates: []))
        
        // This should fail - as we are giving it the wrong cert..
        //
        XCTAssert(false == SecurityCheckerWorker().checkATS(serverTrust: fakeServerTrust,
                                              policies: [policy],
                                              trustedCertificates: [ realRoot ]))

        // This should fail - as we are giving it the wrong root.
        //
        XCTAssert(false == SecurityCheckerWorker().checkATS(serverTrust: realServerTrust,
                                              policies: [policy],
                                              trustedCertificates: [fakeRoot]))
        
    }
    func testSubjectAlternativeName() {
        let certPEM = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZNVENDQkJtZ0F3SUJBZ0lTQSs5bkNORjZ2Q1BIRWRvQm9PK2R5ZEhSTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEExTWpBeE5UQTNNalZhRncweU1UQTRNVGd4TlRBM01qVmFNQ0V4SHpBZEJnTlZCQU1UCkZtRndhUzFqZEM1aVlXNWhibVZ1YUdGc1pXNHVibXd3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURXWHRjazdlK1AwY2V0cGJKVkZNUmVJRTBYTDNWQVJqZ3RpT1ZiRUVvUE80cWdTMzlQOXAwTwp0RnlVcVNna1hpelRnMmxXbk8yQzlhbkRCdnlBNjZZQ20wbDY4UnJxSnhtZjhYRXhjZkYwV1ZhNFZsZnJnZCtCCnBJME1zWDJ6WmV0a2MxZ0VLVzQ3WFZvUGlaWlRUKzQ1VGJtT1VwczNnWXFWMHQrZjZuUUp6a3Y1Nk1ZYlg2ZVcKTWdFcEs0MVFhTXZ6VkxIb0hZYUVacnhTNmllL2NtRVhhbTc3d205anNneXZiY01lVm0yMVM0VUd1aFhON083NwowQ2pyTXhPOHdxa2lQQTVpSE1JbE5ITmRWMkR6dVdqOE9LY0t4WXNvWFhNUGh4VFhNWWc5VWk5Rm11WlNEK2d4Cm9vaFRjTk0zSFBIQWRuS3JyM3VObUZhTFd2OXozWDNQQWdNQkFBR2pnZ0pRTUlJQ1REQU9CZ05WSFE4QkFmOEUKQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQwpNQUF3SFFZRFZSME9CQllFRkFDMTE5VWRzUTRYWWVpTkdvakxXYnRtTm9iOU1COEdBMVVkSXdRWU1CYUFGQlF1CnN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01GVUdDQ3NHQVFVRkJ3RUJCRWt3UnpBaEJnZ3JCZ0VGQlFjd0FZWVYKYUhSMGNEb3ZMM0l6TG04dWJHVnVZM0l1YjNKbk1DSUdDQ3NHQVFVRkJ6QUNoaFpvZEhSd09pOHZjak11YVM1cwpaVzVqY2k1dmNtY3ZNQ0VHQTFVZEVRUWFNQmlDRm1Gd2FTMWpkQzVpWVc1aGJtVnVhR0ZzWlc0dWJtd3dUQVlEClZSMGdCRVV3UXpBSUJnWm5nUXdCQWdFd053WUxLd1lCQkFHQzN4TUJBUUV3S0RBbUJnZ3JCZ0VGQlFjQ0FSWWEKYUhSMGNEb3ZMMk53Y3k1c1pYUnpaVzVqY25sd2RDNXZjbWN3Z2dFREJnb3JCZ0VFQWRaNUFnUUNCSUgwQklIeApBTzhBZGdCRWxHVXVzTzdPcjhSQUI5aW8vaWpBMnVhQ3Z0akxNYlUvMHpPV3RiYUJxQUFBQVhtS2lCZnhBQUFFCkF3QkhNRVVDSVFDSmxZVTR2TU9KTXFtdHl6VzlIN0xWMk5INHdyV2JHbGVyb0tpN0N2VlRBUUlnYWcyOTdvZGUKQnlhWWExQ2hBT1BCdzJLQmlWMmpIMGYzb1IwV1paSjlkVlVBZFFEMlhKUXYwWGN3SWhSVUdBZ3dsRmFPNDAwVApHVE8vM3d3dklBdk1UdkZrNHdBQUFYbUtpQmZrQUFBRUF3QkdNRVFDSUM5R2lBelRDbmJyWWNjQjBwRnA0NVR4Cm5uRS9HUDBHYytlSmY1Yk5kSnVZQWlCNWx2TlVOZUxuR0Fwa3ZpZWVwZCsxQWdMY29FdGZ4bmlmWHJUUUNpK2MKVERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQU4rQmxnbk16NHhpU3d6djdsNFRuUVV4bE0rVTNsSlJFRlRFTwowUHdCTElLWVg0UkJPOWt2bnczMzZQcTlwWWlTSkkxR3ZLQkx1VjJBK1E5R210UkNSNjlZNEVyTE1oNS9Jcjc2CnJBRUlVWmZuZjNlV0w0Wjg3KzFOaU9UbmlvS1lNUURJSFR3YmpESnhQNi9IclgzaXNsb3NUUk1pcG04ek1Wa2sKMVBuQ2FiT0VTYzhsS0xFa0ZxTmdiL2t4aUNULzBvQWQ2WDJydmJqTkQ5UjRpZTBjRk0zVkhlK25aQ3BLRXllYwpsM2dySEx5OVlGbnJ1c2Z2WXdSOCtMV3FCZjNLU1NzZ3pzMWxCVFpTVjBDWGh3YnlEMlo1bTc0WlIrNDhCbzk3Ck1yV0pWQWhFQ0xSemkxT2lEN3Njc1hXeGVGczRhVU43ZVR3K0JUTUNWRm5rbXR5NVN3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")!
        let openssl = OpenSSL()
        XCTAssertNotNil(openssl)

        let san = openssl.getSubjectAlternativeName(certPEM) as String?
        XCTAssert(san == "api-ct.bananenhalen.nl")

		if let sans = openssl.getSubjectAlternativeDNSNames(certPEM) as? [String] {
			XCTAssert(sans.first == "api-ct.bananenhalen.nl")
		} else {
			XCTFail("Can't cast to array of strings")
		}

        // Regenerate with openssl req -new -x509 -subj /CN=foo/ \
        //      -addext "subjectAltName=DNS:test1,DNS:test2,email:fo@bar,IP:1.2.3.4"  \
        //      -nodes -keyout/dev/null |\
        //            openssl x509 | base64 | pbcopy
        //
        let certWithStuff = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKRENDQWd5Z0F3SUJBZ0lVZVk1Uy9seVFKKzBSN0oxbGRaQWJxL0YwNjBnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0RqRU1NQW9HQTFVRUF3d0RabTl2TUI0WERUSXhNRGN3TXpJd016ZzFNRm9YRFRJeE1EZ3dNakl3TXpnMQpNRm93RGpFTU1Bb0dBMVVFQXd3RFptOXZNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDCkFRRUFzUVdBdU5RYjc5eU1zVFBsbXFIT1RFbVVjWXE5T2NITjZPRVFJbS9JUUZhYkp2UHFOM0ZjNU5LbS9ZMU4KMGJqdXZoM1Z1a0RURFdHSnF1anBYKzJSU3QrOUg5UkFKc09aOHU0MHlBTGxwcnh4UjAvS0RyMStNT2Zwa1dtWQplOVdKSVZFdU1pM29PQ0lmMlF4T202RGJtN2VBNUVEaDF6RFpUUzB0UlNZSWk4eEpBcTU4MnZLVHI4SE40enZ0CmhQTFJwSkFIWjlrZEMrUDdWVEJHdHVYdWlKS0xmMnU3MzE0ZGpoeDVxL3E1aVhsRkw5eUFUWDNqdzQxMldKankKNEVJS1BWUHlSZ1RUTWp5RVVHbHZYZEFZUU1xRkhISnNSYlRxUTNCdHNYcmVSUlZFeXdDMGo3QjI4SmR4RWxHcQpyblBjV0RoL2t4SmRZUFZpS0ZuN1hlVGdad0lEQVFBQm8zb3dlREFkQmdOVkhRNEVGZ1FVQXZia1pOeS9NM3RNCnFLSlZNSlIxNzJ4Ym0yNHdId1lEVlIwakJCZ3dGb0FVQXZia1pOeS9NM3RNcUtKVk1KUjE3MnhibTI0d0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWxCZ05WSFJFRUhqQWNnZ1YwWlhOME1ZSUZkR1Z6ZERLQkJtWnZRR0poY29jRQpBUUlEQkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQW54QnZKT29QMEFCSzYwV3JaUmZYbTU4RVd2eGErblc5CkhTZE03R2VQYlNaODBKNjBPUElmMkpiVENkUzFxVFY2c09KK2ZFTHNKNlhkVjE5MldIbGJYR2FtUHdYNm9NbG8KU29FdFkvYXduS3E5cmVqTmRqM29wQ3FySXhhWEdmZkNBNkRiTFoyN1hzZHk2YXJCWVNMU0V6UU9SdkRyOFZGVgpXdUJId2pDSkNlbGMwNVNDNVJUMG1rdnBEeDRoRXNHaGpZN1VHVjVETHhiSk9FZmNTNTFJamJLS1FHVi85M0RPCnFBV20xeld1MkFXMDZ6cTEyUlhwdFN0dGNHcDVoeXFiZC82L3A4V1EyUDE5dmZmb3UvcUphd29hM0podnZZbDkKTUR6N3hsZ1d1OXlLZjUzT3JudXhEMlFTQ3RCY2NhTlFaNFpvOGNmcUdVUUNsUTczT0VJbzRnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=")!
        
		if let sans2 = openssl.getSubjectAlternativeDNSNames(certWithStuff) as? [String] {
			XCTAssert(sans2.count == 2) // check that we skip the IP and email entry.
			XCTAssert(sans2.first == "test1")
			XCTAssert(sans2.last == "test2")
		} else {
			XCTFail("Can't cast to array of strings")
		}
        
        XCTAssert(true == openssl.validateSubjectAlternativeDNSName("test1", forCertificateData: certWithStuff))
        XCTAssert(true == openssl.validateSubjectAlternativeDNSName("test2", forCertificateData: certWithStuff))

        // check that we do not see the non DNS entries. IP address is a bit of an edge case. Perhaps
        // we should allow that to match.
        //
        XCTAssert(false == openssl.validateSubjectAlternativeDNSName("fo@bar", forCertificateData: certWithStuff))
    }

    /// Test the hash
    func testSha256() {
        
        // Given
        let data = "SomeString".data(using: .utf8)!
        
        // When
        let sha = sut.sha256(data: data)
        
        // Then
        XCTAssertEqual(sha, "SHA256 digest: 80ed7fe2957fa688284716753d339d019d490d4589ac4999ec8827ef3f84be29")
    }
}
