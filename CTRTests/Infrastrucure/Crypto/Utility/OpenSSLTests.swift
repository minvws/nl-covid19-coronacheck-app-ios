/*
* Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
*  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
*
*  SPDX-License-Identifier: EUPL-1.2
*/

@testable import CTR
import XCTest
import Nimble

class OpenSSLTests: XCTestCase {

	var sut = OpenSSL()
	let testBundle = Bundle(for: OpenSSLTests.self)

	override func setUp() {

		super.setUp()
		sut = OpenSSL()
	}

	let authorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0x4E, 0x00, 0x9C, 0x47, 0x62, 0x93, 0x2B, 0x7C, 0x27, 0xF7, 0x4A, 0xB5, 0x7F, 0x3A, 0xD6, 0x1F, 0xDA, 0xC8, 0xBA, 0xBF ])

	let deepAuthorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0xA9, 0x2E, 0x01, 0x36, 0x33, 0x4D, 0x9E, 0xBE, 0x33, 0xF4, 0x30, 0x9E, 0x4C, 0x16, 0xDE, 0x61, 0x76, 0xDC, 0x96, 0x48])

	let noCommonNameAuthorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0x43, 0x84, 0x4c, 0xb7, 0x6c, 0xb1, 0x22, 0x7e, 0x28, 0xb0, 0x2c, 0x27, 0xbf, 0xab, 0x20, 0xd6, 0x6f, 0x53, 0xba, 0x80 ])

	let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K" )!

	let wrongPayload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl1K" )!

	// Use sign.sh to generate this signature (rsa_padding_mode: pkcs1)
	let signaturePKCS = Data(base64Encoded: "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")!

	// Use sign.sh to generate this signature (rsa_padding_mode: pss)
	let signaturePPS = Data(base64Encoded: "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")!

	let signatureNoCommonName = Data(base64Encoded: "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")!

	// use long-chain.sh to generate this signature
	let deepSignature = Data(base64Encoded: "")!

	// MARK: - Signature

	func testCMSSignature_padding_pkcs_validPayload() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pkcs_wrongPayload() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: wrongPayload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_padding_pss_validPayload() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePPS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pss_wrongPayload() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			wrongPayload,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_wrongCommonName() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronacheck.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_commonNameAsPartOfDomain() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl.xx.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_emptyCommonName() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ""
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_test_pinning_emptyAuthorityKeyIdentifier() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: nil,
			requiredCommonNameContent: "coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_test_pinning_emptyAuthorityKeyIdentifier_emptyCommonName() throws {

		// Use gen-fake-pki-overheid.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: nil,
			requiredCommonNameContent: ""
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_verydeep() throws {

		// Use long-chain.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certDeepChain", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			deepSignature,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: deepAuthorityKeyIdentifier,
			requiredCommonNameContent: "leaf.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_invalidAuthorityKeyIdentifier() throws {

		// Use long-chain.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certDeepChain", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			deepSignature,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_noCommonName() throws {

		// Use long-chain.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certWithoutCN", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signatureNoCommonName,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: noCommonNameAuthorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester..nl"
		)

		// Then
		expect(validation) == false
	}
}
