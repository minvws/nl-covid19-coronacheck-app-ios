/*
* Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
*  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
*
*  SPDX-License-Identifier: EUPL-1.2
*/

@testable import CTR
import XCTest
import Nimble

class OpenSSLTests: XCTestCase {

	var sut = OpenSSL()

	override func setUp() {

		super.setUp()
		sut = OpenSSL()
	}

	// Use gen-fake-pki-overheid.sh to generate this certifiate
	let rootCertificateData = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoekNDQW0rZ0F3SUJBZ0lKQUs2d3FVcEswaVhTTUEwR0NTcUdTSWIzRFFFQkN3VUFNRm94S3pBcEJnTlYKQkFNTUlsTjBZV0YwSUdSbGNpQk9aV1JsY214aGJtUmxiaUJTYjI5MElFTkJJQzBnUnpNeEhqQWNCZ05WQkFvTQpGVk4wWVdGMElHUmxjaUJPWldSbGNteGhibVJsYmpFTE1Ba0dBMVVFQmhNQ1Rrd3dIaGNOTWpFd09EQTFNVEV5Ck5qQTVXaGNOTWpJd09EQTFNVEV5TmpBNVdqQmFNU3N3S1FZRFZRUUREQ0pUZEdGaGRDQmtaWElnVG1Wa1pYSnMKWVc1a1pXNGdVbTl2ZENCRFFTQXRJRWN6TVI0d0hBWURWUVFLREJWVGRHRmhkQ0JrWlhJZ1RtVmtaWEpzWVc1awpaVzR4Q3pBSkJnTlZCQVlUQWs1TU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnJHQWJlM0JMeGVBWnAzZ09WcmZGU2d2S0pJSE1PWHhaME1yZnJKaXdCQTRDZEtWb1prd282dUtxRFp0S0JEdWMKc0ZCL3dHSnFZMThzSXBpUktNeWwxbFNidU9BeVp4Vit1TEFOVERucitlcDhuclU4bjlPdGNLWFZzalVsQUM4SwpBaXNUdnRDT1VsV1l6MElUUFNSeWV4bkpwblNrdWpOK1N0ZEZSS2FRaVRkc2xsUm1RR1VjOE5TazVuaGJRT1dNCmJJZ3k5QmlISmYrZ0JrU2NCNlJXQjI1UFgxdFNyS1RnTTloQkdjZE85dUJXRVdoemh5c1FFalBGVHpRaGhMdUQKNXRTWE1lRHRtKzVEeEw4STJsVWw5UTFXSmpmc09HN25ZbWloSGZkNmpyZ1dXWmQwczk2eFlVOERKUWthTlo5bwpvYk5yNmNJNXZ4ZFlldWNTc1FNd1hRSURBUUFCbzFBd1RqQWRCZ05WSFE0RUZnUVVoaHV1WVVXV2tmRGRWQmtJCndMSUlWNHFGODk4d0h3WURWUjBqQkJnd0ZvQVVoaHV1WVVXV2tmRGRWQmtJd0xJSVY0cUY4OTh3REFZRFZSMFQKQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBS3owemllZFZNalhqL05uRWxucmFUUzB2U2llZQpCOU9hYlp6UUxuUXJtaFNibXZuK1h0UWZQbGtPdjZmNitiL2syRkRoNVpEYzJnbVFrUW4vNXdrWU00MUZ2MENaCkVQU25DWHJMam01NU12eDdYZ1h2OVJoUFVlRm5qcnNzN3FZNjFiZkh5VXJEdnR5Z2hFRCtkdVJxUHViMTcydk4KOE9oYTVUbXF2UkxDN01LN20wRkVZR2MrSWdDdDdYUzRrN3BYcW9zUzNycGMyeG1tdWlmekVTckxoRkZhdHVmSQpFYU14Rzg3MEdYekhuWFlnTFJPTWZWeUg3ZFEwT09tT0NCZUhGVDB4OGFNSEhGNkJqZjJGcHVETFlWblNzeDd3Ck1pcm5taG5jZXpRL0hFTFA4eTRrRkI0aE55MHNHRUdZS0ZuOTFkbzlQZFp2cUhERDgxcmZBQTlpVGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t" )!

	// Use long-chain.sh to generate this certifcate
	let deepRootCertificateData = Data(base64Encoded: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM3VENDQWRXZ0F3SUJBZ0lKQUsxU2NYMWthcHhaTUEwR0NTcUdTSWIzRFFFQkN3VUFNQTB4Q3pBSkJnTlYKQkFNTUFrTkJNQjRYRFRJeE1EZ3dOVEV5TkRNeE1Wb1hEVEl4TURrd05ERXlORE14TVZvd0RURUxNQWtHQTFVRQpBd3dDUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURQK0hkZGhSNmk4dXdQCllWeXJQV3grbFROUm1STlAxTFVKOUtLVWhCQ2drWW96TGI2cXpKVzFWcFFDSEdPR2ZlZTR2cndwUmdxQkt6UDIKYWh4d3ROYjJidFltc2Q4a2sxYUxaOXUrd3JoSmhzU3hlTkpqbU93Y0s4NFduMlM1Z050UU1ZRFMxOEJyMUFlNgpaY3hIZkFIVzgxbjJrbkRTWm5rcXM4N3JBZlNKNGYrOHBMM0ZDZ1BIb29LdzdycWFibmdDQ29nSzIxUWJkc0t0CnRLNjBVenNkZGUwZTdEWXdwQnMxN3ZkKzBZMnpINVNtMlpHN1g2RGNPTzRnK3NaMmZ5YzVrdzBaUkdQQlRBLzAKRUhQbWxUZVFLdVlaRk5yUU5nOTU2UzMrVFhrdExRdDlnR2VmZTQ0WGhHY09tazRnR25SSzFNSUdkKyt0RVFoaAp0eUt6TmRnVkFnTUJBQUdqVURCT01CMEdBMVVkRGdRV0JCVFYzcHBlNi9sa00rbTE2VmpKYzZ1bjl4bEhHREFmCkJnTlZIU01FR0RBV2dCVFYzcHBlNi9sa00rbTE2VmpKYzZ1bjl4bEhHREFNQmdOVkhSTUVCVEFEQVFIL01BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNoYkx5WXI4RXNna3MyVGR0ZWhMSWM5eDNYZiswbDZJNEhWZ1dLNW94Qwp5UG90NWx3YXNEaElIWkhqa2xNOHVudmdhWkVBQUJCMnk5MHYxSXZ5bDNRR3oydTlnVDRWVnBjSllZL3FoLzZjCnZrU2NidjN5RmEraVJDZ0lQOGdubS9yUnhzR0hCVk5JNzBySzk1ZDFuZnE3blVKMG5ydVZlT2dKZWRIS08vR0IKMThuS1ROOGtibUdKRnlvanBvWVhpR053c3BoUzFGMURTUkd6LzlPWHFrQWNJb0kvb1g0VzFnQ1ZLbHBjaXVBVAo5eGhYYS9VelM5eVFwSEtzTG1Kckk2eUhrVEthc3dMNlBMYTlhT21JMnUyTVNUZUM2Syt5RmdzalBRb3R1RTNuCnFFMTdjdUMzQ09Lcys3Znd5OW9xK1FVaS9OUEpac2RMOTN6azgrb25EQkIyCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=" )!

	let authorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0x88, 0x58, 0x4D, 0x77, 0xE3, 0x87, 0x8B, 0xCF, 0x30, 0x63, 0xDF, 0x9A, 0x9C, 0x40, 0xD5, 0xD7, 0xD6, 0x57, 0xED, 0x93 ])

	let deepAuthorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0xd7, 0xce, 0xef, 0x1e, 0x49, 0x77, 0x92, 0x96, 0x14, 0xec, 0xac, 0xc3, 0xa6, 0x24, 0x32, 0x1d, 0xb7, 0x8c, 0x1b, 0xfd ])

	let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K" )!

	let wrongPayload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl1K" )!

	// Use sign.sh to generate this signature (rsa_padding_mode: pkcs1)
	let signaturePKCS = Data(base64Encoded: "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")!

	// Use sign.sh to generate this signature (rsa_padding_mode: pss)
	let signaturePPS = Data(base64Encoded: "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")!

	// use long-chain.sh to generate this signature
	let deepSignature = Data(base64Encoded: "")!

	// MARK: - Signature

	func testCMSSignature_padding_pkcs_validPayload() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pkcs_wrongPayload() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: wrongPayload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == false
	}

	func testCMSSignature_padding_pss_validPayload() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePPS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pss_wrongPayload() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			wrongPayload,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_wrongCommonName() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".xx.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_wrongSuffix() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".xx"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_emptySuffix() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ""
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_emptyCommonName() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: "",
			requiredCommonNameSuffix: ".xx"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_all_empty() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: "",
			requiredCommonNameSuffix: ""
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_verydeep() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			deepSignature,
			contentData: payload,
			certificateData: deepRootCertificateData,
			authorityKeyIdentifier: deepAuthorityKeyIdentifier,
			requiredCommonNameContent: "leaf",
			requiredCommonNameSuffix: ".nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_invalidAuthorityKeyIdentifier() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: rootCertificateData,
			authorityKeyIdentifier: deepAuthorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.n",
			requiredCommonNameSuffix: ".nl")

		// Then
		expect(validation) == false
	}

	// MARK: - Subject Alternative Name

	func test_subjectAlternativeName_deprecated() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let san = sut.getSubjectAlternativeName(OpenSSLData.realLeaf) as String?

		// Then
		expect(san) == "api-ct.bananenhalen.nl"
	}

	func test_subjectAlternativeNames_realLeaf() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let sans = sut.getSubjectAlternativeDNSNames(OpenSSLData.realLeaf) as? [String]

		// Then
		expect(sans).to(haveCount(1))
		expect(sans?.first) == "api-ct.bananenhalen.nl"
	}

	func test_subjectAlternativeNames_fakeLeaf() {

		// Given
		expect(self.sut).toNot(beNil())

		// When
		let sans = sut.getSubjectAlternativeDNSNames(OpenSSLData.certWithStuff) as? [String]

		// Then
		expect(sans).to(haveCount(2))
		// check that we skip the IP, otherName and email entry.
		expect(sans).to(contain("test1"))
		expect(sans).to(contain("test2"))
		expect(sans).toNot(contain("1.2.3.4"))

		// OpenSSL seems to keep the order the same.
		expect(sans?.first) == "test1"
		expect(sans?.last) == "test2"

		expect(self.sut.validateSubjectAlternativeDNSName("test1", forCertificateData: OpenSSLData.certWithStuff)) == true
		expect(self.sut.validateSubjectAlternativeDNSName("test2", forCertificateData: OpenSSLData.certWithStuff)) == true
		// check that we do not see the non DNS entries. IP address is a bit of an edge case. Perhaps
		// we should allow that to match.
		expect(self.sut.validateSubjectAlternativeDNSName("fo@bar", forCertificateData: OpenSSLData.certWithStuff)) == false
	}
}
