/*
* Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
*  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
*
*  SPDX-License-Identifier: EUPL-1.2
*/

@testable import CTR
import XCTest
import Nimble

class OpenSSLTests: XCTestCase {

	var sut = OpenSSL()
	let testBundle = Bundle(for: OpenSSLTests.self)

	override func setUp() {

		super.setUp()
		sut = OpenSSL()
	}

	// Find authorityKey with po print_octed_as_hex(authorityKeyIdentifier)

	let authorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0x27, 0xec, 0x20, 0xfd, 0x74, 0xbc, 0x41, 0xc5, 0xa7, 0x4d, 0x29, 0x69, 0x62, 0xe6, 0xd8, 0xea, 0x5d, 0x82, 0x64, 0x05])

	let deepAuthorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0xa7, 0x8d, 0x20, 0x24, 0xa1, 0xfe, 0x47, 0x55, 0x6e, 0x2a, 0xb5, 0xed, 0x64, 0x20, 0x32, 0x48, 0xbb, 0x1c, 0xf4, 0x45])

	let noCommonNameAuthorityKeyIdentifier = Data([0x04, 0x14, /* keyID starts here: */ 0x43, 0x84, 0x4c, 0xb7, 0x6c, 0xb1, 0x22, 0x7e, 0x28, 0xb0, 0x2c, 0x27, 0xbf, 0xab, 0x20, 0xd6, 0x6f, 0x53, 0xba, 0x80 ])

	let payload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K" )!

	let wrongPayload = Data(base64Encoded: "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl1K" )!

	// Use sign.sh to generate this signature (rsa_padding_mode: pkcs1)
	let signaturePKCS = Data(base64Encoded: "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")!

	// Use sign.sh to generate this signature (rsa_padding_mode: pss)
	let signaturePSS = Data(base64Encoded: "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")!

	let signatureNoCommonName = Data(base64Encoded: "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")!

	// use long-chain.sh to generate this signature
	let deepSignature = Data(base64Encoded: "")!

	// MARK: - Signature

	// Install openssl: brew install openssl@1.1
	// Use Scripts/ssl/generate/generate.sh to generate the certFakePKIOverheid certificate
	// zsh generate/generate.sh
	// Move the files
	// cp generate/ca.pem ../certFakePKIOverheid.pem
	// cp certFakePKIOverheid.pem ../../CTRTests/Infrastrucure/Crypto/Utility/files/certFakePKIOverheid.pem
	// cp generate/chain.pem ../chain.pem
	// cp generate/client.crt ../client.crt
	//
	// Use Scripts/ssl/sign.sh example.json to generate the pkci signature (zsh sign.sh example.json)
	// copy the signature to line 36 of this file: signaturePKCS
	//
	// Use Scripts/ssl/sign_pss.sh example.json to generate the pss signature (zsh sign_pps.sh example.json)
	// copy the signature to line 39 of this file: signaturePSS
	//
	// set a breakpoint in openssl.m, line 217
	// enable #define DEBUG in openssl.m, line 24
	// when breakpoints hits: po print_octed_as_hex(authorityKeyIdentifier)
	// copy the key to line 25 of this file in authorityKeyIdentifier.
	// disable the #define DEBUG in openssl.m, line 24
	
	func testCMSSignature_padding_pkcs_validPayload() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pkcs_wrongPayload() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: wrongPayload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_padding_pss_validPayload() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePSS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_padding_pss_wrongPayload() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			wrongPayload,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_wrongCommonName() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronacheck.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_commonNameAsPartOfDomain() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl.xx.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_test_pinning_emptyCommonName() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ""
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_test_pinning_emptyAuthorityKeyIdentifier() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: nil,
			requiredCommonNameContent: "coronatester.nl"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_test_pinning_emptyAuthorityKeyIdentifier_emptyCommonName() throws {

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certFakePKIOverheid", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signaturePKCS,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: nil,
			requiredCommonNameContent: ""
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_verydeep() throws {

		// Use long-chain.sh to generate this certificate (0.pem -> certDeepChain.pem)

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certDeepChain", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			deepSignature,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: deepAuthorityKeyIdentifier,
			requiredCommonNameContent: "leaf"
		)

		// Then
		expect(validation) == true
	}

	func testCMSSignature_invalidAuthorityKeyIdentifier() throws {

		// Use long-chain.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certDeepChain", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			deepSignature,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: authorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester.nl"
		)

		// Then
		expect(validation) == false
	}

	func testCMSSignature_noCommonName() throws {

		// Use long-chain.sh to generate this certificate

		// Given
		let certificateUrl = try XCTUnwrap(testBundle.url(forResource: "certWithoutCN", withExtension: ".pem"))
		let certificateData = try Data(contentsOf: certificateUrl)

		// When
		let validation = sut.validatePKCS7Signature(
			signatureNoCommonName,
			contentData: payload,
			certificateData: certificateData,
			authorityKeyIdentifier: noCommonNameAuthorityKeyIdentifier,
			requiredCommonNameContent: ".coronatester..nl"
		)

		// Then
		expect(validation) == false
	}
}
